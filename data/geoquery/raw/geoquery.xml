<?xml version="1.0"?>
<!DOCTYPE examples [
  <!ELEMENT examples (example*)>
  <!ELEMENT example (nl*,syn*,augsyn*,mrl*,mrl-parse?,parse*)>
  <!ELEMENT nl (#PCDATA)>
  <!ELEMENT syn (#PCDATA)>
  <!ELEMENT augsyn (#PCDATA)>
  <!ELEMENT mrl (#PCDATA)>
  <!ELEMENT mrl-parse (node*)>
  <!ELEMENT node (#PCDATA)>
  <!ELEMENT parse (#PCDATA)>
]>
<examples>

<example id="0">
<nl lang="en">
Give me the cities in Virginia .
</nl>
<nl lang="zh">
Weijiniya zhou you shenme chengshi ?
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS cities)) (PP (IN in) (NP (NNP Virginia))))))
</syn>
<syn lang="zh">
(S Weijiniya zhou you shenme chengshi)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[City:1] cities-[City:1] in-[City:2] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(virginia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="1">
<nl lang="en">
What are the high points of states surrounding Mississippi ?
</nl>
<nl lang="es">
que son los puntos altos de los estados rodeando a mississippi ?
</nl>
<nl lang="ja">
mishishippi no mawari ni aru shuu no takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi yi saran eyaletlerin yuksek noktalari nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ high) (NNS points)) (PP (IN of) (NP (NP (NNS states)) (VP (VBG surrounding) (NP (NNP Mississippi))))))))
</syn>
<syn lang="es">
(S que son los puntos altos de los estados rodeando a mississippi)
</syn>
<syn lang="ja">
(S mishishippi no mawari ni aru shuu no takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi yi saran eyaletlerin yuksek noktalari nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Place:1] high-[Place:1] points-[Place:1] of-[Place:1] states-[State:2] surrounding-[State:3] Mississippi-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(high_point_1(state(next_to_2(stateid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(high_point(B,A),state(B),next_to(B,C),const(C,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ high_point_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="2">
<nl lang="en">
Name the rivers in Arkansas .
</nl>
<nl lang="es">
nombra los rios en arkansas .
</nl>
<nl lang="ja">
aakansaa no kawa wo agete kudasai .
</nl>
<nl lang="tr">
arkansas daki nehirlerin isimlerini ver .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (DT the) (NNS rivers)) (PP (IN in) (NP (NNP Arkansas))))))
</syn>
<syn lang="es">
(S nombra los rios en arkansas)
</syn>
<syn lang="ja">
(S aakansaa no kawa wo agete kudasai)
</syn>
<syn lang="tr">
(S arkansas daki nehirlerin isimlerini ver)
</syn>
<augsyn lang="en">
(S Name-[Query:0] the-[River:1] rivers-[River:1] in-[River:2] Arkansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('arkansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(arkansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="3">
<nl lang="en">
Name all the rivers in Colorado .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS rivers)) (PP (IN in) (NP (NNP Colorado))))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] all-[River:1] the-[River:1] rivers-[River:1] in-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="4">
<nl lang="en">
Can you tell me the capital of Texas ?
</nl>
<syn lang="en">
(SQ (MD Can) (NP (PRP you)) (VP (VB tell) (NP (PRP me)) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S Can-[Query:0] you-[Query:0] tell-[Query:0] me-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="5">
<nl lang="en">
Could you tell me what is the highest point in the state of Oregon ?
</nl>
<syn lang="en">
(SQ (MD Could) (NP (PRP you)) (VP (VB tell) (NP (PRP me)) (SBAR (WHNP (WP what)) (S (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP Oregon))))))))))
</syn>
<augsyn lang="en">
(S Could-[Query:0] you-[Query:0] tell-[Query:0] me-[Query:0] what-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] state-[State:4] of-[State:4] Oregon-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(stateid('oregon'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),const(B,stateid(oregon)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="6">
<nl lang="en">
Count the states which have elevations lower than what Alabama has .
</nl>
<syn lang="en">
(S (VP (VB Count) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (NP (NNS elevations)) (ADJP (ADJP (JJR lower)) (PP (IN than) (SBAR (WHNP (WP what)) (S (NP (NNP Alabama)) (VP (VBZ has)))))))))))))
</syn>
<augsyn lang="en">
(S Count-[Num:1] the-[State:2] states-[State:2] which-[State:3] have-[State:3] elevations-[State:3] lower-[Place:4] than-[Place:4] what-[Place:5] Alabama-[StateName:7] has-[Place:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(low_point_2(lower_2(low_point_1(stateid('alabama')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),low_point(B,C),lower(C,D),low_point(E,D),const(E,stateid(alabama))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ low_point_2 ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ lower_2 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ low_point_1 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="7">
<nl lang="en">
Give me all the states of USA .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (PDT all) (DT the) (NNS states)) (PP (IN of) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] all-[State:1] the-[State:1] states-[State:1] of-[State:2] USA-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="8">
<nl lang="en">
Give me the cities in Texas .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS cities)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[City:1] cities-[City:1] in-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="9">
<nl lang="en">
Give me the cities in USA .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS cities)) (PP (IN in) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[City:1] cities-[City:1] in-[City:2] USA-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="10">
<nl lang="en">
Give me the cities in Virginia .
</nl>
<nl lang="es">
dame las ciudades en virginia .
</nl>
<nl lang="ja">
baajinia no toshi wa nan desu ka ?
</nl>
<nl lang="tr">
virginia daki sehirlerin isimlerini ver .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS cities)) (PP (IN in) (NP (NNP Virginia))))))
</syn>
<syn lang="es">
(S dame las ciudades en virginia)
</syn>
<syn lang="ja">
(S baajinia no toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S virginia daki sehirlerin isimlerini ver)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[City:1] cities-[City:1] in-[City:2] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(virginia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="11">
<nl lang="en">
Give me the cities which are in Texas .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS cities)) (SBAR (WHNP (WDT which)) (S (VP (VBP are) (PP (IN in) (NP (NNP Texas)))))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[City:1] cities-[City:1] which-[City:2] are-[City:2] in-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="12">
<nl lang="en">
Give me the lakes in California .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS lakes)) (PP (IN in) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[Place:1] lakes-[Place:1] in-[Place:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(lake(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(lake(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="13">
<nl lang="en">
Give me the largest state .
</nl>
<nl lang="es">
dame el estado mas grande ?
</nl>
<nl lang="ja">
mottomo ookii shuu wa nan desu ka ?
</nl>
<nl lang="tr">
en genis eyaletin ismini ver .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (DT the) (JJS largest) (NN state))))
</syn>
<syn lang="es">
(S dame el estado mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis eyaletin ismini ver)
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[State:1] largest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="14">
<nl lang="en">
Give me the longest river that passes through the US .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (JJS longest) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ passes) (PP (IN through) (NP (DT the) (NNP US)))))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[River:1] longest-[River:1] river-[River:2] that-[River:3] passes-[River:3] through-[River:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="15">
<nl lang="en">
Give me the number of rivers in California .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (NNS rivers)) (PP (IN in) (NP (NNP California))))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[Num:1] number-[Num:1] of-[Num:1] rivers-[River:2] in-[River:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(california))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="16">
<nl lang="en">
Give me the states that border Utah .
</nl>
<syn lang="en">
(S (VP (VB Give) (NP (PRP me)) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VB border) (NP (NNP Utah))))))))
</syn>
<augsyn lang="en">
(S Give-[Query:0] me-[Query:0] the-[State:1] states-[State:1] that-[State:1] border-[State:2] Utah-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('utah'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="17">
<nl lang="en">
How big is Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ big)) (SQ (VBZ is) (NP (NNP Alaska))))
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="18">
<nl lang="en">
How big is Massachusetts ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ big)) (SQ (VBZ is) (NP (NNP Massachusetts))))
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] Massachusetts-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('massachusetts')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(massachusetts))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="19">
<nl lang="en">
How big is New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ big)) (SQ (VBZ is) (NP (NNP New) (NNP Mexico))))
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="20">
<nl lang="en">
How big is North Dakota ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ big)) (SQ (VBZ is) (NP (NNP North) (NNP Dakota))))
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] North-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('north dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid('north dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' north dakota ' }) </node>
</mrl-parse>
</example>

<example id="21">
<nl lang="en">
How big is Texas ?
</nl>
<nl lang="es">
que tamano esta texas ?
</nl>
<nl lang="ja">
tekisasu no okisa wa nan desu ka ?
</nl>
<nl lang="tr">
texas en kadar buyuktur ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ big)) (SQ (VBZ is) (NP (NNP Texas))))
</syn>
<syn lang="es">
(S que tamano esta texas)
</syn>
<syn lang="ja">
(S tekisasu no okisa wa nan desu ka)
</syn>
<syn lang="tr">
(S texas en kadar buyuktur)
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="22">
<nl lang="en">
How big is the city of New York ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ big)) (SQ (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN of) (NP (NNP New) (NNP York))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] big-[Num:1] is-[Num:1] the-[City:2] city-[City:2] of-[City:2] New-[CityName:4] York-[CityName:4])
</augsyn>
<mrl lang="geo-funql">
answer(size(city(cityid('new york', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,cityid('new york',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="23">
<nl lang="en">
How high are the highest points of all the states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ high)) (SQ (VBP are) (NP (NP (DT the) (JJS highest) (NNS points)) (PP (IN of) (NP (PDT all) (DT the) (NNS states))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] are-[Num:1] the-[Place:2] highest-[Place:2] points-[Place:3] of-[Place:4] all-[State:5] the-[State:5] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="24">
<nl lang="en">
How high is Guadalupe Peak ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NNP Guadalupe) (NNP Peak))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] Guadalupe-[PlaceName:3] Peak-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('guadalupe peak')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('guadalupe peak'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' guadalupe peak ' }) </node>
</mrl-parse>
</example>

<example id="25">
<nl lang="en">
How high is Mount McKinley ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NNP Mount) (NNP McKinley))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] Mount-[PlaceName:3] McKinley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('mount mckinley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="26">
<nl lang="en">
How high is the highest point in America ?
</nl>
<nl lang="es">
que tan alto esta el punto mas alto en america ?
</nl>
<nl lang="ja">
amerika no mottomo takai chiten no takasa wa nan desu ka ?
</nl>
<nl lang="tr">
amerika daki en yuksek nokta ne kadar yuksektir ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP America))))))
</syn>
<syn lang="es">
(S que tan alto esta el punto mas alto en america)
</syn>
<syn lang="ja">
(S amerika no mottomo takai chiten no takasa wa nan desu ka)
</syn>
<syn lang="tr">
(S amerika daki en yuksek nokta ne kadar yuksektir)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] in-[Place:4] America-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="27">
<nl lang="en">
How high is the highest point in Montana ?
</nl>
<nl lang="es">
que tan alto esta el punto mas alto en montana ?
</nl>
<nl lang="ja">
montana no mottomo takai chiten no takasa wa desu ka ?
</nl>
<nl lang="tr">
montana daki en yuksek nokta ne kadar yuksektir ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Montana))))))
</syn>
<syn lang="es">
(S que tan alto esta el punto mas alto en montana)
</syn>
<syn lang="ja">
(S montana no mottomo takai chiten no takasa wa desu ka)
</syn>
<syn lang="tr">
(S montana daki en yuksek nokta ne kadar yuksektir)
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] in-[Place:4] Montana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('montana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(montana))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="28">
<nl lang="en">
How high is the highest point in the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] in-[Place:4] the-[State:5] largest-[State:5] state-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(largest(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),largest(C,state(C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="29">
<nl lang="en">
How high is the highest point of Alabama ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NNP Alabama))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] of-[Place:4] Alabama-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('alabama'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(alabama))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="30">
<nl lang="en">
How high is the highest point of Delaware ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NNP Delaware))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] of-[Place:4] Delaware-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('delaware'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(delaware))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="31">
<nl lang="en">
How high is the highest point of Florida ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NNP Florida))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] of-[Place:4] Florida-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('florida'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(florida))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="32">
<nl lang="en">
How high is the highest point of Louisiana ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ high)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NNP Louisiana))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] high-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] of-[Place:4] Louisiana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('louisiana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(louisiana))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="33">
<nl lang="en">
How large is Alaska ?
</nl>
<nl lang="es">
que tan grande esta alaska ?
</nl>
<nl lang="ja">
arasuka no ookisa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
alaska ne kadar genisliktedir ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ large)) (SQ (VBZ is) (NP (NNP Alaska))))
</syn>
<syn lang="es">
(S que tan grande esta alaska)
</syn>
<syn lang="ja">
(S arasuka no ookisa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S alaska ne kadar genisliktedir)
</syn>
<augsyn lang="en">
(S How-[Num:1] large-[Num:1] is-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="34">
<nl lang="en">
How large is Texas ?
</nl>
<nl lang="es">
que tan grande esta texas ?
</nl>
<nl lang="ja">
tekisasu no ookisa wa nan desu ka ?
</nl>
<nl lang="tr">
texas ne kadar genistir ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ large)) (SQ (VBZ is) (NP (NNP Texas))))
</syn>
<syn lang="es">
(S que tan grande esta texas)
</syn>
<syn lang="ja">
(S tekisasu no ookisa wa nan desu ka)
</syn>
<syn lang="tr">
(S texas ne kadar genistir)
</syn>
<augsyn lang="en">
(S How-[Num:1] large-[Num:1] is-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="35">
<nl lang="en">
How large is the largest city in Alaska ?
</nl>
<nl lang="es">
que tan grande esta la ciudad mas grande en alaska ?
</nl>
<nl lang="ja">
arasuka no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
alaska daki en genis sehirin genisligi ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ large)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Alaska))))))
</syn>
<syn lang="es">
(S que tan grande esta la ciudad mas grande en alaska)
</syn>
<syn lang="ja">
(S arasuka no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska daki en genis sehirin genisligi ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] large-[Num:1] is-[Num:1] the-[City:2] largest-[City:2] city-[City:3] in-[City:4] Alaska-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(size(largest(city(loc_2(stateid('alaska'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),largest(B,(city(B),loc(B,C),const(C,stateid(alaska))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="36">
<nl lang="en">
How long is Rio Grande ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (NNP Rio) (NNP Grande))))
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] Rio-[RiverName:3] Grande-[RiverName:3])
</augsyn>
<mrl lang="geo-funql">
answer(len(riverid('rio grande')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid('rio grande'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="3"> *n:RiverName -> ({ ' rio grande ' }) </node>
</mrl-parse>
</example>

<example id="37">
<nl lang="en">
How long is the Colorado river ?
</nl>
<nl lang="es">
que tan largo esta el rio colorado ?
</nl>
<nl lang="ja">
kororado kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
colorado nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Colorado) (NN river))))
</syn>
<syn lang="es">
(S que tan largo esta el rio colorado)
</syn>
<syn lang="ja">
(S kororado kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S colorado nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] Colorado-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="38">
<nl lang="en">
How long is the Delaware river ?
</nl>
<nl lang="es">
que tan largo esta el rio delaware ?
</nl>
<nl lang="ja">
derawaru kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
delaware nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Delaware) (NN river))))
</syn>
<syn lang="es">
(S que tan largo esta el rio delaware)
</syn>
<syn lang="ja">
(S derawaru kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S delaware nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] Delaware-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('delaware'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(delaware)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="39">
<nl lang="en">
How long is the longest river in California ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] longest-[River:2] river-[River:3] in-[River:4] California-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(loc_2(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,stateid(california))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="40">
<nl lang="en">
How long is the longest river in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] longest-[River:2] river-[River:3] in-[River:4] the-[CountryName:6] USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="41">
<nl lang="en">
How long is the Mississippi ?
</nl>
<nl lang="es">
que tiene de largo el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Mississippi))))
</syn>
<syn lang="es">
(S que tiene de largo el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[RiverName:3] Mississippi-[RiverName:3])
</augsyn>
<mrl lang="geo-funql">
answer(len(riverid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="3"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="42">
<nl lang="en">
How long is the Mississippi river ?
</nl>
<nl lang="es">
que tiene de largo el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Mississippi) (NN river))))
</syn>
<syn lang="es">
(S que tiene de largo el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] Mississippi-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="43">
<nl lang="en">
How long is the Mississippi river in miles ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Mississippi) (NN river)) (PP (IN in) (NP (NNS miles)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] Mississippi-[RiverName:4] river-[River:2] in-[Num:1] miles-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="44">
<nl lang="en">
How long is the Missouri river ?
</nl>
<nl lang="es">
que tan largo esta el rio missouri ?
</nl>
<nl lang="ja">
mizuuri kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
missouri nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Missouri) (NN river))))
</syn>
<syn lang="es">
(S que tan largo esta el rio missouri)
</syn>
<syn lang="ja">
(S mizuuri kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S missouri nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] Missouri-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(missouri)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="45">
<nl lang="en">
How long is the North Platte river ?
</nl>
<nl lang="es">
que tan largo esta el rio north platte ?
</nl>
<nl lang="ja">
noosu puratte kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
north platte nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP North) (NNP Platte) (NN river))))
</syn>
<syn lang="es">
(S que tan largo esta el rio north_platte)
</syn>
<syn lang="ja">
(S noosu_puratte kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S north_platte nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] North-[RiverName:4] Platte-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('north platte'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid('north platte')),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' north platte ' }) </node>
</mrl-parse>
</example>

<example id="46">
<nl lang="en">
How long is the Ohio river ?
</nl>
<nl lang="es">
que tan largo esta el rio ohio ?
</nl>
<nl lang="ja">
ohaio kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
ohio nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Ohio) (NN river))))
</syn>
<syn lang="es">
(S que tan largo esta el rio ohio)
</syn>
<syn lang="ja">
(S ohaio kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S ohio nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] Ohio-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(ohio)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="47">
<nl lang="en">
How long is the Rio Grande river ?
</nl>
<nl lang="es">
cuanto tiene de largo el rio rio grande ?
</nl>
<nl lang="ja">
rio gurande kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
rio grande nehrinin uzunlugu ne kadardir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (DT the) (NNP Rio) (NNP Grande) (NN river))))
</syn>
<syn lang="es">
(S cuanto tiene de largo el rio rio_grande)
</syn>
<syn lang="ja">
(S rio_gurande kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S rio_grande nehrinin uzunlugu ne kadardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] Rio-[RiverName:4] Grande-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('rio grande'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid('rio grande')),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' rio grande ' }) </node>
</mrl-parse>
</example>

<example id="48">
<nl lang="en">
How long is the shortest river in the USA ?
</nl>
<nl lang="es">
cuanto tiene de largo el rio mas corto en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo mijikai kawa no nagasa wa dore gurai desu ka ?
</nl>
<nl lang="tr">
usa deki en kisa nehirin uzunlugu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB How) (RB long)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S cuanto tiene de largo el rio mas corto en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo mijikai kawa no nagasa wa dore gurai desu ka)
</syn>
<syn lang="tr">
(S usa deki en kisa nehirin uzunlugu nedir)
</syn>
<augsyn lang="en">
(S How-[Num:1] long-[Num:1] is-[Num:1] the-[River:2] shortest-[River:2] river-[River:3] in-[River:4] the-[CountryName:6] USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(shortest(river(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),shortest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="49">
<nl lang="en">
How many big cities are in Pennsylvania ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ big) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Pennsylvania))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] big-[City:2] cities-[City:3] are-[City:4] in-[City:4] Pennsylvania-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('pennsylvania'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(pennsylvania))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="50">
<nl lang="en">
How many capitals does Rhode Island have ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS capitals)) (SQ (VBZ does) (NP (NNP Rhode) (NNP Island)) (VP (VB have))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] capitals-[City:2] does-[City:3] Rhode-[StateName:5] Island-[StateName:5] have-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(capital(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(capital(B),const(C,stateid('rhode island')),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="51">
<nl lang="en">
How many cities are in Louisiana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Louisiana))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] in-[City:3] Louisiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(stateid('louisiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,stateid(louisiana))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="52">
<nl lang="en">
How many cities are in Montana ?
</nl>
<nl lang="es">
cuantas ciudades hay en montana ?
</nl>
<nl lang="ja">
montana ni wa toshi ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
montana da kac tane sehir vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Montana))))))
</syn>
<syn lang="es">
(S cuantas ciudades hay en montana)
</syn>
<syn lang="ja">
(S montana ni wa toshi ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S montana da kac tane sehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] in-[City:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,stateid(montana))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="53">
<nl lang="en">
How many cities are there in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="54">
<nl lang="en">
How many cities are there in the US ?
</nl>
<nl lang="es">
cuantas ciudades hay en los us ?
</nl>
<nl lang="ja">
beikoku ni wa toshi ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
us de kac tane sehir vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S cuantas ciudades hay en los us)
</syn>
<syn lang="ja">
(S beikoku ni wa toshi ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S us de kac tane sehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="55">
<nl lang="en">
How many cities are there in US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP US))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="56">
<nl lang="en">
How many cities are there in USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] are-[City:3] there-[City:3] in-[City:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="57">
<nl lang="en">
How many cities does Texas have ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VBZ does) (NP (NNP Texas)) (VP (VB have))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] does-[City:3] Texas-[StateName:5] have-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),const(C,stateid(texas)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="58">
<nl lang="en">
How many cities does the USA have ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS cities)) (SQ (VBZ does) (NP (DT the) (NNP USA)) (VP (VB have))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:2] does-[City:3] the-[CountryName:5] USA-[CountryName:5] have-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),const(C,countryid(usa)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="59">
<nl lang="en">
How many cities named Austin are there in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WRB How) (JJ many) (NNS cities)) (VP (VBN named) (NP (NNP Austin)))) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] cities-[City:3] named-[City:3] Austin-[CityName:5] are-[City:6] there-[City:6] in-[City:6] the-[CountryName:8] USA-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(intersection(city(cityid('austin', _)), loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(city(B),const(B,cityid(austin,_)),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ intersection ( *n:City , *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
<node id="6"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="60">
<nl lang="en">
How many citizens does the biggest city have in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS citizens)) (SQ (VBZ does) (NP (DT the) (JJS biggest) (NN city)) (VP (VB have) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] does-[Num:1] the-[City:2] biggest-[City:2] city-[City:3] have-[City:2] in-[City:2] the-[City:2] USA-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="61">
<nl lang="en">
How many citizens in Alabama ?
</nl>
<nl lang="es">
cuantos ciudadanos en alabama ?
</nl>
<nl lang="ja">
arabama ni wa nannin no shuumin ga imasu ka ?
</nl>
<nl lang="tr">
alabama da kac tane vatandas vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS citizens)) (PP (IN in) (NP (NNP Alabama))))
</syn>
<syn lang="es">
(S cuantos ciudadanos en alabama)
</syn>
<syn lang="ja">
(S arabama ni wa nannin no shuumin ga imasu ka)
</syn>
<syn lang="tr">
(S alabama da kac tane vatandas vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] in-[Num:1] Alabama-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('alabama')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="62">
<nl lang="en">
How many citizens in Boulder ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS citizens)) (PP (IN in) (NP (NNP Boulder))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="63">
<nl lang="en">
How many citizens live in California ?
</nl>
<nl lang="es">
cuantos ciudadanos viven en california ?
</nl>
<nl lang="ja">
karifuorunia ni wa nannin no shuumin ga sumimasu ka ?
</nl>
<nl lang="tr">
california da ne kadar vatandas yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS citizens)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP California))))))
</syn>
<syn lang="es">
(S cuantos ciudadanos viven en california)
</syn>
<syn lang="ja">
(S karifuorunia ni wa nannin no shuumin ga sumimasu ka)
</syn>
<syn lang="tr">
(S california da ne kadar vatandas yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] citizens-[Num:1] live-[Num:1] in-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="64">
<nl lang="en">
How many Colorado rivers are there ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNP Colorado) (NNS rivers)) (SQ (VP (VBP are) (ADVP (RB there)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] Colorado-[RiverName:4] rivers-[River:2] are-[Num:1] there-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(const(B,riverid(colorado)),river(B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="65">
<nl lang="en">
How many inhabitants does Montgomery have ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ inhabitants)) (SQ (VBZ does) (NP (NNP Montgomery)) (VP (VB have))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] inhabitants-[Num:1] does-[Num:1] Montgomery-[CityName:3] have-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('montgomery', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(montgomery,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' montgomery ' }) </node>
</mrl-parse>
</example>

<example id="66">
<nl lang="en">
How many major cities are in Arizona ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Arizona))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] Arizona-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('arizona'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(arizona))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="67">
<nl lang="en">
How many major cities are in Florida ?
</nl>
<nl lang="es">
cuantas ciudades mayores hay en florida ?
</nl>
<nl lang="ja">
furorida no ookina toshi wa nankasho desu ka ?
</nl>
<nl lang="tr">
florida da baslica kac tane sehir vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Florida))))))
</syn>
<syn lang="es">
(S cuantas ciudades mayores hay en florida)
</syn>
<syn lang="ja">
(S furorida no ookina toshi wa nankasho desu ka)
</syn>
<syn lang="tr">
(S florida da baslica kac tane sehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] Florida-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('florida'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(florida))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="68">
<nl lang="en">
How many major cities are in states bordering Nebraska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NP (NNS states)) (VP (VBG bordering) (NP (NNP Nebraska))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] states-[State:5] bordering-[State:6] Nebraska-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(state(next_to_2(stateid('nebraska'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),state(C),next_to(C,D),const(D,stateid(nebraska))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="69">
<nl lang="en">
How many major cities are in states bordering Utah ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NP (NNS states)) (VP (VBG bordering) (NP (NNP Utah))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] states-[State:5] bordering-[State:6] Utah-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(state(next_to_2(stateid('utah'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),state(C),next_to(C,D),const(D,stateid(utah))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="70">
<nl lang="en">
How many major cities are in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS cities)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] in-[City:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="71">
<nl lang="en">
How many major cities are there ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS cities)) (SQ (VP (VBP are) (ADVP (RB there)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[Num:1] there-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="72">
<nl lang="en">
How many major cities are there in Oregon ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS cities)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP Oregon))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[City:2] cities-[City:3] are-[City:4] there-[City:4] in-[City:4] Oregon-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(city(loc_2(stateid('oregon'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),city(B),loc(B,C),const(C,stateid(oregon))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="73">
<nl lang="en">
How many major rivers cross Ohio ?
</nl>
<nl lang="es">
cuantos rios mayores cruzan ohio ?
</nl>
<nl lang="ja">
okina kawa wa ohaio wo oodan ikutsu shimasu ka ?
</nl>
<nl lang="tr">
kac tane baslica nehir ohio dan gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ major) (NNS rivers)) (SQ (VP (VBP cross) (NP (NNP Ohio)))))
</syn>
<syn lang="es">
(S cuantos rios mayores cruzan ohio)
</syn>
<syn lang="ja">
(S okina kawa wa ohaio wo oodan ikutsu shimasu ka)
</syn>
<syn lang="tr">
(S kac tane baslica nehir ohio dan gecer)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] major-[River:2] rivers-[River:3] cross-[River:4] Ohio-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(major(river(traverse_2(stateid('ohio'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(major(B),river(B),traverse(B,C),const(C,stateid(ohio))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="74">
<nl lang="en">
How many people are in the state of Nevada ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP are) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP Nevada))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] are-[Num:1] in-[Num:1] the-[State:2] state-[State:2] of-[State:2] Nevada-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(stateid('nevada'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(nevada))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="75">
<nl lang="en">
How many people are there in Iowa ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP Iowa))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] are-[Num:1] there-[Num:1] in-[Num:1] Iowa-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('iowa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="76">
<nl lang="en">
How many people are there in New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP New) (NNP York))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] are-[Num:1] there-[Num:1] in-[Num:1] New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="77">
<nl lang="en">
How many people in Boulder ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (PP (IN in) (NP (NNP Boulder))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="78">
<nl lang="en">
How many people live in Austin ?
</nl>
<nl lang="es">
cuantas personas viven en austin ?
</nl>
<nl lang="ja">
ausuchin ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
austin da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Austin))))))
</syn>
<syn lang="es">
(S cuantas personas viven en austin)
</syn>
<syn lang="ja">
(S ausuchin ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S austin da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="79">
<nl lang="en">
How many people live in Austin Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (NNP Austin)) (NP (NNP Texas)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Austin-[CityName:3] Texas-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', 'tx')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,tx))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' tx ' }) </node>
</mrl-parse>
</example>

<example id="80">
<nl lang="en">
How many people live in California ?
</nl>
<nl lang="es">
cuantas personas viven en california ?
</nl>
<nl lang="ja">
karifuorunia ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
california da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP California))))))
</syn>
<syn lang="es">
(S cuantas personas viven en california)
</syn>
<syn lang="ja">
(S karifuorunia ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S california da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="81">
<nl lang="en">
How many people live in Chicago ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Chicago))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Chicago-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('chicago', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(chicago,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' chicago ' }) </node>
</mrl-parse>
</example>

<example id="82">
<nl lang="en">
How many people live in Detroit ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Detroit))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Detroit-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('detroit', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(detroit,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' detroit ' }) </node>
</mrl-parse>
</example>

<example id="83">
<nl lang="en">
How many people live in Hawaii ?
</nl>
<nl lang="es">
cuantas personas viven en hawaii ?
</nl>
<nl lang="ja">
hawai ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
hawaii da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Hawaii))))))
</syn>
<syn lang="es">
(S cuantas personas viven en hawaii)
</syn>
<syn lang="ja">
(S hawai ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S hawaii da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Hawaii-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('hawaii')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="84">
<nl lang="en">
How many people live in Houston ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Houston))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Houston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('houston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(houston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' houston ' }) </node>
</mrl-parse>
</example>

<example id="85">
<nl lang="en">
How many people live in Kalamazoo ?
</nl>
<nl lang="es">
cuantas personas viven en kalamazoo ?
</nl>
<nl lang="ja">
karamazuu ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
kalamazoo da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Kalamazoo))))))
</syn>
<syn lang="es">
(S cuantas personas viven en kalamazoo)
</syn>
<syn lang="ja">
(S karamazuu ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S kalamazoo da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Kalamazoo-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('kalamazoo', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(kalamazoo,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' kalamazoo ' }) </node>
</mrl-parse>
</example>

<example id="86">
<nl lang="en">
How many people live in Kansas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Kansas))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Kansas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('kansas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(kansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="87">
<nl lang="en">
How many people live in Minneapolis Minnesota ?
</nl>
<nl lang="es">
cuantas personas viven en minneapolis minnesota ?
</nl>
<nl lang="ja">
minesota no mineaporisu ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
minneapolis minnesota da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (NNP Minneapolis)) (NP (NNP Minnesota)))))))
</syn>
<syn lang="es">
(S cuantas personas viven en minneapolis minnesota)
</syn>
<syn lang="ja">
(S minesota no mineaporisu ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S minneapolis minnesota da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Minneapolis-[CityName:3] Minnesota-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('minneapolis', 'mn')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(minneapolis,mn))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' minneapolis ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' mn ' }) </node>
</mrl-parse>
</example>

<example id="88">
<nl lang="en">
How many people live in Mississippi ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Mississippi))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Mississippi-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="89">
<nl lang="en">
How many people live in Montana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Montana))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Montana-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('montana')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="90">
<nl lang="en">
How many people live in New Hampshire ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP New) (NNP Hampshire))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] New-[StateName:3] Hampshire-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new hampshire')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="91">
<nl lang="en">
How many people live in New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP New) (NNP Mexico))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="92">
<nl lang="en">
How many people live in New York ?
</nl>
<nl lang="es">
cuantas personas viven en new york ?
</nl>
<nl lang="ja">
nyuu yooku ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
new york da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP New) (NNP York))))))
</syn>
<syn lang="es">
(S cuantas personas viven en new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S new_york da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="93">
<nl lang="en">
How many people live in Rhode Island ?
</nl>
<nl lang="es">
cuantas personas viven en rhode island ?
</nl>
<nl lang="ja">
roodoairando ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
rhode island da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Rhode) (NNP Island))))))
</syn>
<syn lang="es">
(S cuantas personas viven en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S rhode_island da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Rhode-[StateName:3] Island-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('rhode island')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="94">
<nl lang="en">
How many people live in Riverside ?
</nl>
<nl lang="es">
cuantas personas viven en riverside ?
</nl>
<nl lang="ja">
ribaasaido ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
riverside da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Riverside))))))
</syn>
<syn lang="es">
(S cuantas personas viven en riverside)
</syn>
<syn lang="ja">
(S ribaasaido ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S riverside da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Riverside-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('riverside', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(riverside,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' riverside ' }) </node>
</mrl-parse>
</example>

<example id="95">
<nl lang="en">
How many people live in San Francisco ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP San) (NNP Francisco))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] San-[CityName:3] Francisco-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('san francisco', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid('san francisco',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san francisco ' }) </node>
</mrl-parse>
</example>

<example id="96">
<nl lang="en">
How many people live in South Dakota ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP South) (NNP Dakota))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] South-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('south dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="97">
<nl lang="en">
How many people live in Spokane Washington ?
</nl>
<nl lang="es">
cuantas personas viven en spokane washington ?
</nl>
<nl lang="ja">
washinton no supoken ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
spokane washington da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (NNP Spokane)) (NP (NNP Washington)))))))
</syn>
<syn lang="es">
(S cuantas personas viven en spokane washington)
</syn>
<syn lang="ja">
(S washinton no supoken ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S spokane washington da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Spokane-[CityName:3] Washington-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('spokane', 'wa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(spokane,wa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' spokane ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' wa ' }) </node>
</mrl-parse>
</example>

<example id="98">
<nl lang="en">
How many people live in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="99">
<nl lang="en">
How many people live in the biggest city in New York state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP New) (NNP York) (NN state))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the-[City:2] biggest-[City:2] city-[City:3] in-[City:4] New-[StateName:7] York-[StateName:7] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(city(loc_2(state(stateid('new york')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,(city(B),loc(B,C),const(C,stateid('new york')),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="100">
<nl lang="en">
How many people live in the capital of Georgia ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Georgia))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the-[City:2] capital-[City:2] of-[City:3] Georgia-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(stateid('georgia')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(georgia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="101">
<nl lang="en">
How many people live in the capital of Texas ?
</nl>
<nl lang="es">
cuantas personas viven en la capital de texas ?
</nl>
<nl lang="ja">
tekisasu no shuto ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
texas in baskentinde ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Texas))))))))
</syn>
<syn lang="es">
(S cuantas personas viven en la capital de texas)
</syn>
<syn lang="ja">
(S tekisasu no shuto ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S texas in baskentinde ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the-[City:2] capital-[City:2] of-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="102">
<nl lang="en">
How many people live in the smallest state bordering Wyoming ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (DT the) (JJS smallest) (NN state)) (VP (VBG bordering) (NP (NNP Wyoming))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the-[State:2] State:2-[State:2] state-[State:3] bordering-[State:4] Wyoming-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(smallest(state(next_to_2(stateid('wyoming'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),smallest(B,(state(B),next_to(B,C),const(C,stateid(wyoming))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="103">
<nl lang="en">
How many people live in the state with the largest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population) (NN density))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the-[State:3] state-[State:3] with-[State:2] the-[State:2] largest-[State:2] population-[State:2] density-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest_one(density_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="104">
<nl lang="en">
How many people live in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] the-[CountryName:3] United-[CountryName:3] States-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="105">
<nl lang="en">
How many people live in Washington ?
</nl>
<nl lang="es">
cuantas personas viven en washington ?
</nl>
<nl lang="ja">
washinton ni wa nannin no hito ga sumimasu ka ?
</nl>
<nl lang="tr">
washington da ne kadar insan yasamaktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Washington))))))
</syn>
<syn lang="es">
(S cuantas personas viven en washington)
</syn>
<syn lang="ja">
(S washinton ni wa nannin no hito ga sumimasu ka)
</syn>
<syn lang="tr">
(S washington da ne kadar insan yasamaktadir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Washington-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('washington')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(washington))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="106">
<nl lang="en">
How many people live in Washington DC ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP live) (PP (IN in) (NP (NP (NNP Washington)) (NP (NNP DC)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] live-[Num:1] in-[Num:1] Washington-[CityName:3] DC-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('washington', 'dc')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(washington,dc))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' washington ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' dc ' }) </node>
</mrl-parse>
</example>

<example id="107">
<nl lang="en">
How many people lived in Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBD lived) (PP (IN in) (NP (NNP Austin))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] lived-[Num:1] in-[Num:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="108">
<nl lang="en">
How many people reside in Utah ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP reside) (PP (IN in) (NP (NNP Utah))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] reside-[Num:1] in-[Num:1] Utah-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('utah')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="109">
<nl lang="en">
How many people stay in Utah ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS people)) (SQ (VP (VBP stay) (PP (IN in) (NP (NNP Utah))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] people-[Num:1] stay-[Num:1] in-[Num:1] Utah-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('utah')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="110">
<nl lang="en">
How many residents live in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS residents)) (SQ (VP (VBP live) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] residents-[Num:1] live-[Num:1] in-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="111">
<nl lang="en">
How many rivers are called Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (VP (VBN called) (NP (NNP Colorado))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:2] called-[River:2] Colorado-[RiverName:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),const(B,riverid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="112">
<nl lang="en">
How many rivers are found in Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (VP (VBN found) (PP (IN in) (NP (NNP Colorado)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] found-[River:3] in-[River:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="113">
<nl lang="en">
How many rivers are in Colorado ?
</nl>
<nl lang="es">
cuantos rios hay en colorado ?
</nl>
<nl lang="ja">
kororado ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
colorado da kac tane nehir vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Colorado))))))
</syn>
<syn lang="es">
(S cuantos rios hay en colorado)
</syn>
<syn lang="ja">
(S kororado ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S colorado da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="114">
<nl lang="en">
How many rivers are in Iowa ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Iowa))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(iowa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="115">
<nl lang="en">
How many rivers are in Missouri ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP Missouri))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] Missouri-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(missouri))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="116">
<nl lang="en">
How many rivers are in New York ?
</nl>
<nl lang="es">
cuantos rios hay en new york ?
</nl>
<nl lang="ja">
nyuu yooku ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
new york da kac tane nehir vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (PP (IN in) (NP (NNP New) (NNP York))))))
</syn>
<syn lang="es">
(S cuantos rios hay en new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S new_york da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid('new york'))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="117">
<nl lang="en">
How many rivers are in the state that has the most rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (PP (IN in) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ has) (NP (DT the) (JJS most) (NNS rivers))))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] the-[State:5] state-[State:5] that-[State:6] has-[State:6] the-[State:4] most-[State:4] rivers-[River:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(most(state(loc_1(river(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),most(C,D,(state(C),loc(D,C),river(D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="118">
<nl lang="en">
How many rivers are in the state with the highest point ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS highest) (NN point))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] the-[State:4] state-[State:4] with-[State:5] the-[Place:6] highest-[Place:6] point-[Place:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(state(loc_1(highest(place(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),state(C),loc(D,C),highest(D,place(D))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="119">
<nl lang="en">
How many rivers are in the state with the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] in-[River:3] the-[State:5] state-[State:5] with-[State:4] the-[State:4] largest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(largest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),largest(D,(state(C),population(C,D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="120">
<nl lang="en">
How many rivers are there in Idaho ?
</nl>
<nl lang="es">
cuantos rios hay en idaho ?
</nl>
<nl lang="ja">
aidahou ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
idaho da kac tane nehir vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP Idaho))))))
</syn>
<syn lang="es">
(S cuantos rios hay en idaho)
</syn>
<syn lang="ja">
(S aidahou ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S idaho da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] there-[River:3] in-[River:3] Idaho-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('idaho')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(idaho))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="121">
<nl lang="en">
How many rivers are there in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] there-[River:3] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="122">
<nl lang="en">
How many rivers are there in US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP US))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] are-[River:3] there-[River:3] in-[River:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="123">
<nl lang="en">
How many rivers do not traverse the state with the capital Albany ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VBP do) (RB not) (VP (VB traverse) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (NN capital)) (NP (NNP Albany))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:3] do-[River:2] not-[River:2] traverse-[River:4] the-[State:5] state-[State:5] with-[State:6] the-[City:7] capital-[City:7] Albany-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(count(exclude(river(all), traverse_2(state(loc_1(capital(cityid('albany', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),not((traverse(B,C),state(C),loc(D,C),capital(D),const(D,cityid(albany,_))))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' albany ' }) </node>
</mrl-parse>
</example>

<example id="124">
<nl lang="en">
How many rivers does Alaska have ?
</nl>
<nl lang="es">
cuantos rios tiene alaska ?
</nl>
<nl lang="ja">
arasuka wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
alaska nun kac tane nehri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VBZ does) (NP (NNP Alaska)) (VP (VB have))))
</syn>
<syn lang="es">
(S cuantos rios tiene alaska)
</syn>
<syn lang="ja">
(S arasuka wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S alaska nun kac tane nehri vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] does-[River:3] Alaska-[StateName:5] have-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),const(C,stateid(alaska)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="125">
<nl lang="en">
How many rivers does Colorado have ?
</nl>
<nl lang="es">
cuantos rios tiene colorado ?
</nl>
<nl lang="ja">
kororado wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
colorado nun kac tane nehri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VBZ does) (NP (NNP Colorado)) (VP (VB have))))
</syn>
<syn lang="es">
(S cuantos rios tiene colorado)
</syn>
<syn lang="ja">
(S kororado wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S colorado nun kac tane nehri vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] does-[River:3] Colorado-[StateName:5] have-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),const(C,stateid(colorado)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="126">
<nl lang="en">
How many rivers in Texas are longer than the Red ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WRB How) (JJ many) (NNS rivers)) (PP (IN in) (NP (NNP Texas)))) (SQ (VP (VBP are) (ADJP (ADJP (JJR longer)) (PP (IN than) (NP (DT the) (NNP Red)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:3] in-[River:4] Texas-[StateName:6] are-[River:7] longer-[River:7] than-[River:7] the-[RiverName:9] Red-[RiverName:9])
</augsyn>
<mrl lang="geo-funql">
answer(count(intersection(river(loc_2(stateid('texas'))), longer(riverid('red')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(texas)),longer(B,D),const(D,riverid(red))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ intersection ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
<node id="7"> *n:River -> ({ longer ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="9"> *n:RiverName -> ({ ' red ' }) </node>
</mrl-parse>
</example>

<example id="127">
<nl lang="en">
How many rivers in Washington ?
</nl>
<nl lang="es">
cuantos rios en washington ?
</nl>
<nl lang="ja">
washinton ni wa kawa ga ikutsu arimasu ka ?
</nl>
<nl lang="tr">
washington da kac tane nehir vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (PP (IN in) (NP (NNP Washington))))
</syn>
<syn lang="es">
(S cuantos rios en washington)
</syn>
<syn lang="ja">
(S washinton ni wa kawa ga ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S washington da kac tane nehir vardir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] in-[River:3] Washington-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(loc_2(stateid('washington')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),loc(B,C),const(C,stateid(washington))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="128">
<nl lang="en">
How many rivers run through Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] run-[River:3] through-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(traverse_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),traverse(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="129">
<nl lang="en">
How many rivers run through the states bordering Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (DT the) (NNS states)) (VP (VBG bordering) (NP (NNP Colorado))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] rivers-[River:2] run-[River:3] through-[River:3] the-[State:4] states-[State:4] bordering-[State:5] Colorado-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(river(traverse_2(state(next_to_2(stateid('colorado')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(river(B),traverse(B,C),state(C),next_to(C,D),const(D,stateid(colorado))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="130">
<nl lang="en">
How many square kilometers in the US ?
</nl>
<nl lang="es">
cuantos kilometros cuadrados en los us ?
</nl>
<nl lang="ja">
beikoku ni wa heihou kiromeetaa wa ikutsu arimasu ka ?
</nl>
<nl lang="tr">
us kac kilometrekaredir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (JJ square) (NNS kilometers)) (PP (IN in) (NP (DT the) (NNP US))))
</syn>
<syn lang="es">
(S cuantos kilometros cuadrados en los us)
</syn>
<syn lang="ja">
(S beikoku ni wa heihou kiromeetaa wa ikutsu arimasu ka)
</syn>
<syn lang="tr">
(S us kac kilometrekaredir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] square-[Num:1] kilometers-[Num:1] in-[Num:1] the-[CountryName:3] US-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="131">
<nl lang="en">
How many states are in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP are) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] in-[State:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="132">
<nl lang="en">
How many states are in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP are) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] in-[State:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="133">
<nl lang="en">
How many states are next to major rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP are) (ADJP (JJ next) (PP (TO to) (NP (JJ major) (NNS rivers)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] next-[State:3] to-[State:3] major-[River:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),major(C),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="134">
<nl lang="en">
How many states are there ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP are) (ADVP (RB there)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[Num:1] there-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,state(B),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="135">
<nl lang="en">
How many states are there in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] there-[State:3] in-[State:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="136">
<nl lang="en">
How many states are there in United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] are-[State:3] there-[State:3] in-[State:3] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="137">
<nl lang="en">
How many states border Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (NNP Alaska)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(alaska))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="138">
<nl lang="en">
How many states border at least one other state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (QP (IN at) (JJS least) (CD one)) (JJ other) (NN state)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] at-[State:4] least-[State:4] one-[State:4] other-[State:4] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="139">
<nl lang="en">
How many states border Colorado and border New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VP (VBP border) (NP (NNP Colorado))) (CC and) (VP (VBP border) (NP (NNP New) (NNP Mexico))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:4] Colorado-[StateName:6] and-[State:3] border-[State:7] New-[StateName:9] Mexico-[StateName:9])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(intersection(next_to_2(stateid('colorado')) , next_to_2(stateid('new mexico'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(colorado)),next_to(B,D),const(D,stateid('new mexico'))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' colorado ' }) </node>
<node id="7"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="9"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="140">
<nl lang="en">
How many states border Hawaii ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (NNP Hawaii)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Hawaii-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('hawaii')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(hawaii))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="141">
<nl lang="en">
How many states border Iowa ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (NNP Iowa)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="142">
<nl lang="en">
How many states border on the state whose capital is Boston ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (PP (IN on) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WP$ whose) (NN capital)) (S (VBZ is) (NP (NNP Boston)))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] on-[State:3] the-[State:4] state-[State:4] whose-[State:5] capital-[City:6] is-[City:6] Boston-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(state(loc_1(capital(cityid('boston', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(boston,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' boston ' }) </node>
</mrl-parse>
</example>

<example id="143">
<nl lang="en">
How many states border Tennessee ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (NNP Tennessee)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Tennessee-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('tennessee')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(tennessee))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="144">
<nl lang="en">
How many states border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (NNP Texas)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="145">
<nl lang="en">
How many states border the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (DT the) (JJS largest) (NN state)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the-[State:4] largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),largest(C,state(C))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="146">
<nl lang="en">
How many states border the Mississippi river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (DT the) (NNP Mississippi) (NN river)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,riverid(mississippi)),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="147">
<nl lang="en">
How many states border the state that borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states)))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the-[State:5] state-[State:5] that-[State:6] borders-[State:6] the-[State:4] most-[State:4] states-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(most(state(next_to_2(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),most(C,D,(state(C),next_to(C,D),state(D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="148">
<nl lang="en">
How many states border the state with the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] border-[State:3] the-[State:5] state-[State:5] with-[State:4] the-[State:4] largest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(largest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),largest(D,(state(C),population(C,D)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="149">
<nl lang="en">
How many states do not have rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBP do) (RB not) (VP (VB have) (NP (NNS rivers)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:3] do-[State:2] not-[State:2] have-[State:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(exclude(state(all), loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),not((loc(C,B),river(C)))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="150">
<nl lang="en">
How many states does Iowa border ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (NNP Iowa)) (VP (VB border))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] Iowa-[StateName:5] border-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,stateid(iowa)),next_to(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="151">
<nl lang="en">
How many states does Missouri border ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (NNP Missouri)) (VP (VB border))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] Missouri-[StateName:5] border-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,stateid(missouri)),next_to(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="152">
<nl lang="en">
How many states does Tennessee border ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (NNP Tennessee)) (VP (VB border))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] Tennessee-[StateName:5] border-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('tennessee')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,stateid(tennessee)),next_to(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="153">
<nl lang="en">
How many states does the Colorado river flow through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Colorado) (NN river)) (VP (VB flow) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the-[River:4] Colorado-[RiverName:6] river-[River:4] flow-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(colorado)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="154">
<nl lang="en">
How many states does the Colorado river run through ?
</nl>
<nl lang="es">
por cuantos estados corre el rio colorado ?
</nl>
<nl lang="ja">
kororado kawa wa ikutsu no shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
colorado nehri kac eyaletin icinden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Colorado) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuantos estados corre el rio colorado)
</syn>
<syn lang="ja">
(S kororado kawa wa ikutsu no shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S colorado nehri kac eyaletin icinden gecer)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the-[River:4] Colorado-[RiverName:6] river-[River:4] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(colorado)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="155">
<nl lang="en">
How many states does the Mississippi river run through ?
</nl>
<nl lang="es">
por cuantos estados corre el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa ikutsu no shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi nehri kac tane eyaletten gecmektedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Mississippi) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuantos estados corre el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa ikutsu no shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi nehri kac tane eyaletten gecmektedir)
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="156">
<nl lang="en">
How many states does the Mississippi run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Mississippi)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the-[RiverName:5] Mississippi-[RiverName:5] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(mississippi)),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="157">
<nl lang="en">
How many states does the Missouri river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Missouri) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] the-[River:4] Missouri-[RiverName:6] river-[River:4] run-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(traverse_1(river(riverid('missouri'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,riverid(missouri)),river(C),traverse(C,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="158">
<nl lang="en">
How many states does USA have ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VBZ does) (NP (NNP USA)) (VP (VB have))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] does-[State:3] USA-[CountryName:5] have-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),const(C,countryid(usa)),loc(B,C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="159">
<nl lang="en">
How many states have a city called Rochester ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP have) (NP (NP (DT a) (NN city)) (VP (VBN called) (NP (NNP Rochester)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] a-[City:4] city-[City:4] called-[City:4] Rochester-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('rochester', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),const(C,cityid(rochester,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' rochester ' }) </node>
</mrl-parse>
</example>

<example id="160">
<nl lang="en">
How many states have a city named Springfield ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP have) (NP (NP (DT a) (NN city)) (VP (VBN named) (NP (NNP Springfield)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] a-[City:4] city-[City:4] named-[City:4] Springfield-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('springfield', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),const(C,cityid(springfield,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="161">
<nl lang="en">
How many states have a higher point than the highest point of the state with the largest capital city in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP have) (NP (NP (DT a) (JJR higher) (NN point)) (PP (IN than) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (JJS largest) (NN capital) (NN city)) (PP (IN in) (NP (DT the) (NNP US)))))))))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] a-[Place:4] higher-[Place:5] point-[Place:4] than-[Place:5] the-[Place:6] highest-[Place:6] point-[Place:7] of-[Place:8] the-[State:9] state-[State:9] with-[State:10] the-[City:11] largest-[City:11] capital-[City:12] city-[City:13] in-[City:14] the-[CountryName:16] US-[CountryName:16])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(place(higher_2(highest(place(loc_2(state(loc_1(largest(capital(city(loc_2(countryid('usa'))))))))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),higher(C,D),place(C),highest(D,(place(D),loc(D,E),state(E),loc(F,E),largest(F,(capital(F),city(F),loc(F,G),const(G,countryid(usa))))))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="8"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="10"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="11"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="12"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="13"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="14"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="15"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="16"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="162">
<nl lang="en">
How many states have cities named Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Austin)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] cities-[City:4] named-[City:4] Austin-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('austin', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),city(C),const(C,cityid(austin,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="163">
<nl lang="en">
How many states have cities or towns named Springfield ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities) (CC or) (NNS towns)) (VP (VBN named) (NP (NNP Springfield)))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] cities-[City:4] or-[City:4] towns-[City:4] named-[City:4] Springfield-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(city(cityid('springfield', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),city(C),const(C,cityid(springfield,_))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="164">
<nl lang="en">
How many states have major rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (JJ many) (NNS states)) (SQ (VP (VBP have) (NP (JJ major) (NNS rivers)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:2] have-[State:3] major-[River:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(loc_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(C,B),major(C),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="165">
<nl lang="en">
How many states in the US does the shortest river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WRB How) (JJ many) (NNS states)) (PP (IN in) (NP (DT the) (NNP US)))) (SQ (VBZ does) (NP (DT the) (JJS shortest) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S How-[Num:1] many-[Num:1] states-[State:3] in-[State:4] the-[CountryName:6] US-[CountryName:6] does-[State:7] the-[River:8] shortest-[River:8] river-[River:9] run-[State:7] through-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(count(intersection(state(loc_2(countryid('usa'))),traverse_1(shortest(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),loc(B,C),const(C,countryid(usa)),shortest(D,river(D)),traverse(D,B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
<node id="7"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="9"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="166">
<nl lang="en">
How much population does Texas have ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WRB How) (RB much) (NN population)) (SQ (VBZ does) (NP (NNP Texas)) (VP (VB have))))
</syn>
<augsyn lang="en">
(S How-[Num:1] much-[Num:1] population-[Num:1] does-[Num:1] Texas-[StateName:3] have-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="167">
<nl lang="en">
How tall is Mount McKinley ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ tall)) (SQ (VBZ is) (NP (NNP Mount) (NNP McKinley))))
</syn>
<augsyn lang="en">
(S How-[Num:1] tall-[Num:1] is-[Num:1] Mount-[PlaceName:3] McKinley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('mount mckinley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="168">
<nl lang="en">
How tall is the highest point in Montana ?
</nl>
<syn lang="en">
(SBARQ (WHADJP (WRB How) (JJ tall)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Montana))))))
</syn>
<augsyn lang="en">
(S How-[Num:1] tall-[Num:1] is-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] in-[Place:4] Montana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(stateid('montana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,stateid(montana))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="169">
<nl lang="en">
In what state is Mount McKinley ?
</nl>
<syn lang="en">
(SBARQ (WHPP (IN In) (WHNP (WDT what) (NN state))) (SQ (VBZ is) (NP (NNP Mount) (NNP McKinley))))
</syn>
<augsyn lang="en">
(S In-[State:2] what-[Query:0] state-[State:1] is-[State:2] Mount-[PlaceName:4] McKinley-[PlaceName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(placeid('mount mckinley'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),state(A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="4"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="170">
<nl lang="en">
In which state does the highest point in USA exist ?
</nl>
<syn lang="en">
(SBARQ (WHPP (IN In) (WHNP (WDT which) (NN state))) (SQ (VBZ does) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP USA)))) (VP (VB exist))))
</syn>
<augsyn lang="en">
(S In-[State:2] which-[Query:0] state-[State:1] does-[State:2] the-[Place:3] highest-[Place:3] point-[Place:4] in-[Place:5] USA-[CountryName:7] exist-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),state(A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="171">
<nl lang="en">
In which state is Rochester ?
</nl>
<syn lang="en">
(SBARQ (WHPP (IN In) (WHNP (WDT which) (NN state))) (SQ (VBZ is) (NP (NNP Rochester))))
</syn>
<augsyn lang="en">
(S In-[State:2] which-[Query:0] state-[State:1] is-[State:2] Rochester-[CityName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('rochester', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),state(A),const(B,cityid(rochester,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' rochester ' }) </node>
</mrl-parse>
</example>

<example id="172">
<nl lang="en">
Iowa borders how many states ?
</nl>
<syn lang="en">
(SQ (NP (NNP Iowa)) (VP (VBZ borders) (WHNP (WRB how) (JJ many) (NNS states))))
</syn>
<augsyn lang="en">
(S Iowa-[StateName:5] borders-[State:3] how-[Num:1] many-[Num:1] states-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_1(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(const(C,stateid(iowa)),next_to(C,B),state(B)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="173">
<nl lang="en">
List the states .
</nl>
<syn lang="en">
(S (VP (VB List) (NP (DT the) (NNS states))))
</syn>
<augsyn lang="en">
(S List-[Query:0] the-[State:1] states-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(all))
</mrl>
<mrl lang="geo-prolog">
answer(A,state(A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="174">
<nl lang="en">
Name all the lakes of US .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS lakes)) (PP (IN of) (NP (NNP US))))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] all-[Place:1] the-[Place:1] lakes-[Place:1] of-[Place:2] US-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(lake(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(lake(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="175">
<nl lang="en">
Name all the rivers in Colorado .
</nl>
<nl lang="es">
nombra todos los rios en colorado .
</nl>
<nl lang="ja">
kororado no kawa wo zenbu agete kudasai .
</nl>
<nl lang="tr">
colorado daki butun nehirlerin isimlerini ver .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (PDT all) (DT the) (NNS rivers)) (PP (IN in) (NP (NNP Colorado))))))
</syn>
<syn lang="es">
(S nombra todos los rios en colorado)
</syn>
<syn lang="ja">
(S kororado no kawa wo zenbu agete kudasai)
</syn>
<syn lang="tr">
(S colorado daki butun nehirlerin isimlerini ver)
</syn>
<augsyn lang="en">
(S Name-[Query:0] all-[River:1] the-[River:1] rivers-[River:1] in-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="176">
<nl lang="en">
Name the 50 capitals in the USA .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (DT the) (CD 50) (NNS capitals)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] the-[City:1] 50-[City:1] capitals-[City:1] in-[City:2] the-[CountryName:4] USA-[CountryName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="3"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="4"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="177">
<nl lang="en">
Name the longest river in US .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP US)))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="178">
<nl lang="en">
Name the major lakes in Michigan .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (DT the) (JJ major) (NNS lakes)) (PP (IN in) (NP (NNP Michigan))))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] the-[Place:1] major-[Place:1] lakes-[Place:2] in-[Place:3] Michigan-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(lake(loc_2(stateid('michigan')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),lake(A),loc(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ major ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="179">
<nl lang="en">
Name the major rivers in Florida .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (DT the) (JJ major) (NNS rivers)) (PP (IN in) (NP (NNP Florida))))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] the-[River:1] major-[River:1] rivers-[River:2] in-[River:3] Florida-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="180">
<nl lang="en">
Name the rivers in Arkansas .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (DT the) (NNS rivers)) (PP (IN in) (NP (NNP Arkansas))))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] the-[River:1] rivers-[River:1] in-[River:2] Arkansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('arkansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(arkansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="181">
<nl lang="en">
Name the states which have no surrounding states .
</nl>
<syn lang="en">
(S (VP (VB Name) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT which)) (S (VP (VBP have) (NP (DT no) (VBG surrounding) (NNS states))))))))
</syn>
<augsyn lang="en">
(S Name-[Query:0] the-[State:2] states-[State:2] which-[State:1] have-[State:1] no-[State:1] surrounding-[State:3] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="182">
<nl lang="en">
Number of citizens in Boulder ?
</nl>
<syn lang="en">
(SQ (NP (NP (NN Number)) (PP (IN of) (NP (NP (NNS citizens)) (PP (IN in) (NP (NNP Boulder)))))))
</syn>
<augsyn lang="en">
(S Number-[Num:1] of-[Num:1] citizens-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="183">
<nl lang="en">
Number of people in Boulder ?
</nl>
<syn lang="en">
(SQ (NP (NP (NN Number)) (PP (IN of) (NP (NP (NNS people)) (PP (IN in) (NP (NNP Boulder)))))))
</syn>
<augsyn lang="en">
(S Number-[Num:1] of-[Num:1] people-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="184">
<nl lang="en">
Number of states bordering Iowa ?
</nl>
<syn lang="en">
(SQ (NP (NP (NN Number)) (PP (IN of) (NP (NP (NNS states)) (VP (VBG bordering) (NP (NNP Iowa)))))))
</syn>
<augsyn lang="en">
(S Number-[Num:1] of-[Num:1] states-[State:2] bordering-[State:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(iowa))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="185">
<nl lang="en">
Of the states washed by the Mississippi river which has the lowest point ?
</nl>
<syn lang="en">
(SBARQ (PP (IN Of) (NP (NP (DT the) (NNS states)) (VP (VBN washed) (PP (IN by) (NP (DT the) (NNP Mississippi) (NN river)))))) (WHNP (WDT which)) (SQ (VP (VBZ has) (NP (DT the) (JJS lowest) (NN point)))))
</syn>
<augsyn lang="en">
(S Of-[State:6] the-[State:6] states-[State:6] washed-[State:7] by-[State:7] the-[River:8] Mississippi-[RiverName:10] river-[River:8] which-[Query:0] has-[State:2] the-[Place:3] lowest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(loc_2(state(traverse_1(river(riverid('mississippi'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(D,(state(D),loc(B,D),lowest(B,(state(A),traverse(C,A),const(C,riverid(mississippi)),loc(B,A),place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="9"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="10"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="186">
<nl lang="en">
People in Boulder ?
</nl>
<syn lang="en">
(SQ (NP (NP (NNS People)) (PP (IN in) (NP (NNP Boulder)))))
</syn>
<augsyn lang="en">
(S People-[Num:1] in-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="187">
<nl lang="en">
Population of Boulder ?
</nl>
<syn lang="en">
(SQ (NP (NP (NN Population)) (PP (IN of) (NP (NNP Boulder)))))
</syn>
<augsyn lang="en">
(S Population-[Num:1] of-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="188">
<nl lang="en">
Rivers in New York ?
</nl>
<nl lang="es">
rios en new york ?
</nl>
<nl lang="ja">
nyuu yooku no kawa ka ?
</nl>
<nl lang="tr">
new york taki nehirler nelerdir ?
</nl>
<syn lang="en">
(SQ (NP (NP (NNS Rivers)) (PP (IN in) (NP (NNP New) (NNP York)))))
</syn>
<syn lang="es">
(S rios en new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku no kawa ka)
</syn>
<syn lang="tr">
(S new_york taki nehirler nelerdir)
</syn>
<augsyn lang="en">
(S Rivers-[River:1] in-[River:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="189">
<nl lang="en">
Sacramento is the capital of which state ?
</nl>
<syn lang="en">
(SQ (NP (NNP Sacramento)) (VP (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (WHNP (WDT which) (NN state))))))
</syn>
<augsyn lang="en">
(S Sacramento-[CityName:5] is-[City:3] the-[City:3] capital-[City:3] of-[State:2] which-[Query:0] state-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('sacramento', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(const(B,cityid(sacramento,_)),capital(B),loc(B,A),state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' sacramento ' }) </node>
</mrl-parse>
</example>

<example id="190">
<nl lang="en">
San Antonio is in what state ?
</nl>
<syn lang="en">
(SQ (NP (NNP San) (NNP Antonio)) (VP (VBZ is) (PP (IN in) (WHNP (WDT what) (NN state)))))
</syn>
<augsyn lang="en">
(S San-[CityName:4] Antonio-[CityName:4] is-[State:2] in-[State:2] what-[Query:0] state-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('san antonio', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(const(B,cityid('san antonio',_)),loc(B,A),state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' san antonio ' }) </node>
</mrl-parse>
</example>

<example id="191">
<nl lang="en">
Show major cities in Colorado .
</nl>
<syn lang="en">
(S (VP (VB Show) (NP (NP (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Colorado))))))
</syn>
<augsyn lang="en">
(S Show-[Query:0] major-[City:1] cities-[City:2] in-[City:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="192">
<nl lang="en">
Show me all the major lakes in the US .
</nl>
<syn lang="en">
(S (VP (VB Show) (NP (PRP me)) (NP (NP (PDT all) (DT the) (JJ major) (NNS lakes)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<augsyn lang="en">
(S Show-[Query:0] me-[Query:0] all-[Place:1] the-[Place:1] major-[Place:1] lakes-[Place:2] in-[Place:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(lake(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),lake(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ major ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="193">
<nl lang="en">
State the state with the largest area .
</nl>
<syn lang="en">
(S (VP (VB State) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN area))))))
</syn>
<augsyn lang="en">
(S State-[Query:0] the-[State:2] state-[State:2] with-[State:1] the-[State:1] largest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="194">
<nl lang="en">
States bordering Iowa ?
</nl>
<syn lang="en">
(SQ (NP (NP (NNS States)) (VP (VBG bordering) (NP (NNP Iowa)))))
</syn>
<augsyn lang="en">
(S States-[State:1] bordering-[State:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="195">
<nl lang="en">
Tell me what cities are in Texas .
</nl>
<syn lang="en">
(S (VP (VB Tell) (NP (PRP me)) (SBAR (WHNP (WDT what) (NNS cities)) (S (VP (VBP are) (PP (IN in) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S Tell-[Query:0] me-[Query:0] what-[Query:0] cities-[City:1] are-[City:2] in-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="196">
<nl lang="en">
Through which states does the longest river in Texas run ?
</nl>
<syn lang="en">
(SBARQ (WHPP (IN Through) (WHNP (WDT which) (NNS states))) (SQ (VBZ does) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP Texas)))) (VP (VB run))))
</syn>
<augsyn lang="en">
(S Through-[Query:0] which-[Query:0] states-[State:1] does-[State:2] the-[River:3] longest-[River:3] river-[River:4] in-[River:5] Texas-[StateName:7] run-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(loc_2(stateid('texas')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(longest(B,(river(B),loc(B,C),const(C,stateid(texas)))),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="197">
<nl lang="en">
Through which states does the Mississippi flow ?
</nl>
<syn lang="en">
(SBARQ (WHPP (IN Through) (WHNP (WDT which) (NNS states))) (SQ (VBZ does) (NP (DT the) (NNP Mississippi)) (VP (VB flow))))
</syn>
<augsyn lang="en">
(S Through-[Query:0] which-[Query:0] states-[State:1] does-[State:2] the-[RiverName:4] Mississippi-[RiverName:4] flow-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="198">
<nl lang="en">
Through which states does the Mississippi run ?
</nl>
<nl lang="es">
por cuales estados corre el mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHPP (IN Through) (WHNP (WDT which) (NNS states))) (SQ (VBZ does) (NP (DT the) (NNP Mississippi)) (VP (VB run))))
</syn>
<syn lang="es">
(S por cuales estados corre el mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Through-[Query:0] which-[Query:0] states-[State:1] does-[State:2] the-[RiverName:4] Mississippi-[RiverName:4] run-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="199">
<nl lang="en">
What are all the rivers in Texas ?
</nl>
<nl lang="es">
que son todos los rios en texas ?
</nl>
<nl lang="ja">
tekisasu no kawa wa nani zenbu desu ka ?
</nl>
<nl lang="tr">
texas daki nehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VP (VBP are) (NP (NP (PDT all) (DT the) (NNS rivers)) (PP (IN in) (NP (NNP Texas)))))))
</syn>
<syn lang="es">
(S que son todos los rios en texas)
</syn>
<syn lang="ja">
(S tekisasu no kawa wa nani zenbu desu ka)
</syn>
<syn lang="tr">
(S texas daki nehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] all-[River:1] the-[River:1] rivers-[River:1] in-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="200">
<nl lang="en">
What are major rivers in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (JJ major) (NNS rivers)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] major-[River:1] rivers-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="201">
<nl lang="en">
What are the biggest rivers in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJS biggest) (NNS rivers)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[River:1] biggest-[River:1] rivers-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="202">
<nl lang="en">
What are the capital cities of the states which border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN capital) (NNS cities)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT which)) (S (VP (VBP border) (NP (NNP Texas))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] capital-[City:1] cities-[City:2] of-[City:3] the-[State:4] states-[State:4] which-[State:5] border-[State:5] Texas-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(capital(city(loc_2(state(next_to_2(stateid('texas')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="203">
<nl lang="en">
What is the capital city in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital) (NN city)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(capital(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="204">
<nl lang="en">
What are the capitals of states that border Missouri ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS capitals)) (PP (IN of) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Missouri))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] capitals-[City:1] of-[City:2] states-[State:3] that-[State:4] border-[State:4] Missouri-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(stateid('missouri'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="205">
<nl lang="en">
What are the capitals of the states that border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS capitals)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Texas))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] capitals-[City:1] of-[City:2] the-[State:3] states-[State:3] that-[State:4] border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="206">
<nl lang="en">
What are the cities in California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS cities)) (PP (IN in) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] cities-[City:1] in-[City:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="207">
<nl lang="en">
What are the cities in states through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS cities)) (PP (IN in) (NP (NP (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] cities-[City:1] in-[City:2] states-[State:3] through-[State:4] which-[State:4] the-[RiverName:6] Mississippi-[RiverName:6] runs-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="208">
<nl lang="en">
What are the cities of the state with the highest point ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS cities)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS highest) (NN point))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] cities-[City:1] of-[City:2] the-[State:3] state-[State:3] with-[State:4] the-[Place:5] highest-[Place:5] point-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(state(loc_1(highest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),state(B),loc(C,B),highest(C,place(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="209">
<nl lang="en">
What are the highest points of all the states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJS highest) (NNS points)) (PP (IN of) (NP (PDT all) (DT the) (NNS states))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Place:1] highest-[Place:1] points-[Place:2] of-[Place:3] all-[State:4] the-[State:4] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="210">
<nl lang="en">
What are the highest points of states surrounding Mississippi ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJS highest) (NNS points)) (PP (IN of) (NP (NP (NNS states)) (VP (VBG surrounding) (NP (NNP Mississippi))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Place:1] highest-[Place:1] points-[Place:2] of-[Place:3] states-[State:4] surrounding-[State:5] Mississippi-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(next_to_2(stateid('mississippi')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(highest(A,(place(A),loc(A,B),state(B))),next_to(B,C),const(C,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="211">
<nl lang="en">
What are the lakes in states bordering Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS lakes)) (PP (IN in) (NP (NP (NNS states)) (VP (VBG bordering) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Place:1] lakes-[Place:1] in-[Place:2] states-[State:3] bordering-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(lake(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(lake(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="212">
<nl lang="en">
What are the largest cities in the states that border the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJS largest) (NNS cities)) (PP (IN in) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (DT the) (JJS largest) (NN state))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] largest-[City:1] cities-[City:2] in-[City:3] the-[State:4] states-[State:4] that-[State:5] border-[State:5] the-[State:6] largest-[State:6] state-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(next_to_2(largest(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),largest(C,state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="213">
<nl lang="en">
What are the major cities in Alabama ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Alabama))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Alabama-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('alabama')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="214">
<nl lang="en">
What are the major cities in Alaska ?
</nl>
<nl lang="es">
que son las ciudades mayores en alaska ?
</nl>
<nl lang="ja">
arasuka ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
alaska daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Alaska))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en alaska)
</syn>
<syn lang="ja">
(S arasuka ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S alaska daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="215">
<nl lang="en">
What are the major cities in California ?
</nl>
<nl lang="es">
que son las ciudades mayores en california ?
</nl>
<nl lang="ja">
karifuorunia no ookina toshi wa nan desu ka ?
</nl>
<nl lang="tr">
california daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP California))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en california)
</syn>
<syn lang="ja">
(S karifuorunia no ookina toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S california daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="216">
<nl lang="en">
What are the major cities in Delaware ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Delaware))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Delaware-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('delaware')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(delaware))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="217">
<nl lang="en">
What are the major cities in Kansas ?
</nl>
<nl lang="es">
que son las ciudades mayores en kansas ?
</nl>
<nl lang="ja">
kanzasu no ookina toshi wa nan desu ka ?
</nl>
<nl lang="tr">
kansas daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Kansas))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en kansas)
</syn>
<syn lang="ja">
(S kanzasu no ookina toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S kansas daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(kansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="218">
<nl lang="en">
What are the major cities in Missouri ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Missouri))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Missouri-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="219">
<nl lang="en">
What are the major cities in New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP New) (NNP Mexico))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('new mexico')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="220">
<nl lang="en">
What are the major cities in New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP New) (NNP York))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="221">
<nl lang="en">
What are the major cities in North Carolina ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP North) (NNP Carolina))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] North-[StateName:5] Carolina-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('north carolina')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('north carolina'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' north carolina ' }) </node>
</mrl-parse>
</example>

<example id="222">
<nl lang="en">
What are the major cities in Ohio ?
</nl>
<nl lang="es">
que son las ciudades mayores en ohio ?
</nl>
<nl lang="ja">
ohaio ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
ohio daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Ohio))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en ohio)
</syn>
<syn lang="ja">
(S ohaio ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S ohio daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="223">
<nl lang="en">
What are the major cities in Oklahoma ?
</nl>
<nl lang="es">
que son las ciudades mayores en oklahoma ?
</nl>
<nl lang="ja">
okurahoma ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
oklahoma daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Oklahoma))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en oklahoma)
</syn>
<syn lang="ja">
(S okurahoma ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S oklahoma daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Oklahoma-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('oklahoma')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(oklahoma))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oklahoma ' }) </node>
</mrl-parse>
</example>

<example id="224">
<nl lang="en">
What are the major cities in Rhode Island ?
</nl>
<nl lang="es">
que son las ciudades mayores en rhode island ?
</nl>
<nl lang="ja">
roodoairando ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
rhode island daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Rhode) (NNP Island))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S rhode_island daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Rhode-[StateName:5] Island-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="225">
<nl lang="en">
What are the major cities in states through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NP (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] states-[State:4] through-[State:5] which-[State:5] the-[RiverName:7] Mississippi-[RiverName:7] runs-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(state(traverse_1(riverid('mississippi')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),state(B),traverse(C,B),const(C,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="7"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="226">
<nl lang="en">
What are the major cities in Texas ?
</nl>
<nl lang="es">
que son las ciudades mayores en texas ?
</nl>
<nl lang="ja">
tekisasu ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
texas daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en texas)
</syn>
<syn lang="ja">
(S tekisasu ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S texas daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="227">
<nl lang="en">
What are the major cities in the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] the-[State:4] largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="228">
<nl lang="en">
What are the major cities in the smallest state in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NP (DT the) (JJS smallest) (NN state)) (PP (IN in) (NP (DT the) (NNP US))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] the-[State:4] smallest-[State:4] state-[State:5] in-[State:6] the-[CountryName:8] US-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="229">
<nl lang="en">
What are the major cities in the state of California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP California))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] the-[State:4] state-[State:4] of-[State:4] California-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(state(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),state(B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="230">
<nl lang="en">
What are the major cities in the states through which the major river in Virginia runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NP (DT the) (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (NP (DT the) (JJ major) (NN river)) (PP (IN in) (NP (NNP Virginia)))) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] the-[State:4] states-[State:4] through-[State:5] which-[State:5] the-[River:6] major-[River:6] river-[River:7] in-[River:8] Virginia-[StateName:10] runs-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(state(traverse_1(major(river(loc_2(stateid('virginia'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),state(B),major(C),river(C),loc(C,D),const(D,stateid(virginia)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="10"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="231">
<nl lang="en">
What are the major cities in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="232">
<nl lang="en">
What are the major cities in Vermont ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Vermont))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Vermont-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('vermont')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(vermont))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' vermont ' }) </node>
</mrl-parse>
</example>

<example id="233">
<nl lang="en">
What are the major cities in Wyoming ?
</nl>
<nl lang="es">
que son las ciudades mayores en wyoming ?
</nl>
<nl lang="ja">
waiomingu ni wa donna daitoshi ga arimasu ka ?
</nl>
<nl lang="tr">
wyoming daki baslica sehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Wyoming))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores en wyoming)
</syn>
<syn lang="ja">
(S waiomingu ni wa donna daitoshi ga arimasu ka)
</syn>
<syn lang="tr">
(S wyoming daki baslica sehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(wyoming))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="234">
<nl lang="en">
What are the major cities of Texas ?
</nl>
<nl lang="es">
que son las ciudades mayores de texas ?
</nl>
<nl lang="ja">
tekisasu no ookina toshi wa nan desu ka ?
</nl>
<nl lang="tr">
texas in baslica sehirleri nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<syn lang="es">
(S que son las ciudades mayores de texas)
</syn>
<syn lang="ja">
(S tekisasu no ookina toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S texas in baslica sehirleri nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] of-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="235">
<nl lang="en">
What are the major cities of the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN of) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] of-[City:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="236">
<nl lang="en">
What are the major cities of the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN of) (NP (DT the) (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[City:1] major-[City:1] cities-[City:2] of-[City:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="237">
<nl lang="en">
What are the major lakes in United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS lakes)) (PP (IN in) (NP (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Place:1] major-[Place:1] lakes-[Place:2] in-[Place:3] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(lake(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),lake(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ major ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ lake ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="238">
<nl lang="en">
What are the major rivers in Ohio ?
</nl>
<nl lang="es">
que son los rios mayores en ohio ?
</nl>
<nl lang="ja">
ohaio no ookina kawa wa nan desu ka ?
</nl>
<nl lang="tr">
ohio daki baslica nehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS rivers)) (PP (IN in) (NP (NNP Ohio))))))
</syn>
<syn lang="es">
(S que son los rios mayores en ohio)
</syn>
<syn lang="ja">
(S ohaio no ookina kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S ohio daki baslica nehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[River:1] major-[River:1] rivers-[River:2] in-[River:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="239">
<nl lang="en">
What are the major rivers in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (JJ major) (NNS rivers)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[River:1] major-[River:1] rivers-[River:2] in-[River:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),loc(A,B),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="240">
<nl lang="en">
What are the names of the major cities in Illinois ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS names)) (PP (IN of) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Illinois))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Query:0] names-[Query:0] of-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Illinois-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('illinois')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="241">
<nl lang="en">
What are the neighboring states for Michigan ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (VBG neighboring) (NNS states)) (PP (IN for) (NP (NNP Michigan))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[State:2] neighboring-[State:2] states-[State:1] for-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(next_to(A,B),state(A),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="242">
<nl lang="en">
What are the population densities of each US state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NN population) (NNS densities)) (PP (IN of) (NP (DT each) (NNP US) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] population-[Num:1] densities-[Num:1] of-[Num:1] each-[State:2] US-[State:2] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="243">
<nl lang="en">
What is the population of Mississippi ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Mississippi))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Mississippi-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="244">
<nl lang="en">
What are the populations of all the major cities in Montana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (PDT all) (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Montana))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] all-[City:2] the-[City:2] major-[City:2] cities-[City:3] in-[City:4] Montana-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(major(city(loc_2(stateid('montana'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="245">
<nl lang="en">
What are the populations of states through which the Mississippi river runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi) (NN river)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="246">
<nl lang="en">
What are the populations of states through which the Mississippi river runs ?
</nl>
<nl lang="es">
que son las poblaciones de los estados por cual corre el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa ga nagareru shuu no jinkou wa ikura desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin icinden gectigi eyaletlerin nufuslari nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi) (NN river)) (VP (VBZ runs)))))))))
</syn>
<syn lang="es">
(S que son las poblaciones de los estados por cual corre el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa ga nagareru shuu no jinkou wa ikura desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin icinden gectigi eyaletlerin nufuslari nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="247">
<nl lang="en">
What are the populations of states through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which-[State:3] the-[RiverName:5] Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="248">
<nl lang="en">
What are the populations of states through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] states-[State:2] through-[State:3] which-[State:3] the-[RiverName:5] Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="249">
<nl lang="en">
What are the populations of states which border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (NNS states)) (SBAR (WHNP (WDT which)) (S (VP (VBP border) (NP (NNP Texas))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] states-[State:2] which-[State:3] border-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="250">
<nl lang="en">
What are the populations of the major cities of Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN of) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] the-[City:2] major-[City:2] cities-[City:3] of-[City:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(major(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="251">
<nl lang="en">
What are the populations of the states through which the Mississippi river runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi) (NN river)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] the-[State:2] states-[State:2] through-[State:3] which-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="252">
<nl lang="en">
What are the populations of the states through which the Mississippi river runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi) (NN river)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] the-[State:2] states-[State:2] through-[State:3] which-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),river(C),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="253">
<nl lang="en">
What are the populations of the states through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] the-[State:2] states-[State:2] through-[State:3] which-[State:3] the-[RiverName:5] Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="254">
<nl lang="en">
What are the populations of the states through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS populations)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[Num:1] populations-[Num:1] of-[Num:1] the-[State:2] states-[State:2] through-[State:3] which-[State:3] the-[RiverName:5] Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(state(traverse_1(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="255">
<nl lang="en">
What are the rivers in Alaska ?
</nl>
<nl lang="es">
cuales son los rios en alaska ?
</nl>
<nl lang="ja">
arasuka no kawa wa nan desu ka ?
</nl>
<nl lang="tr">
alaska daki nehirler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS rivers)) (PP (IN in) (NP (NNP Alaska))))))
</syn>
<syn lang="es">
(S cuales son los rios en alaska)
</syn>
<syn lang="ja">
(S arasuka no kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska daki nehirler nelerdir)
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[River:1] rivers-[River:1] in-[River:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="256">
<nl lang="en">
What are the rivers in the state of Indiana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS rivers)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP Indiana))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[River:1] rivers-[River:1] in-[River:2] the-[State:3] state-[State:3] of-[State:3] Indiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(state(stateid('indiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),state(B),const(B,stateid(indiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="257">
<nl lang="en">
What are the rivers in the state of Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS rivers)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[River:1] rivers-[River:1] in-[River:2] the-[State:3] state-[State:3] of-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(state(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),state(B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="258">
<nl lang="en">
What are the rivers of Montana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS rivers)) (PP (IN of) (NP (NNP Montana))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[River:1] rivers-[River:1] of-[River:2] Montana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('montana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="259">
<nl lang="en">
What are the states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (DT the) (NNS states))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[State:1] states-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(state(all))
</mrl>
<mrl lang="geo-prolog">
answer(A,state(A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="260">
<nl lang="en">
What are the states that border the state with the greatest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS greatest) (NN population))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[State:1] states-[State:1] that-[State:2] border-[State:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] greatest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(B,A),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="261">
<nl lang="en">
What are the states that the Potomac runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (NP (DT the) (NNP Potomac)) (VP (VBZ runs) (PP (IN through))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[State:1] states-[State:1] that-[State:2] the-[RiverName:4] Potomac-[RiverName:4] runs-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('potomac'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(potomac)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' potomac ' }) </node>
</mrl-parse>
</example>

<example id="262">
<nl lang="en">
What are the states through which the longest river runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBP are) (NP (NP (DT the) (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (JJS longest) (NN river)) (VP (VBZ runs)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] are-[Query:0] the-[State:1] states-[State:1] through-[State:2] which-[State:2] the-[River:3] longest-[River:3] river-[River:4] runs-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),traverse(B,A),longest(B,(river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="263">
<nl lang="en">
What can you tell me about the population of Missouri ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (MD can) (NP (PRP you)) (VP (VB tell) (NP (PRP me)) (PP (IN about) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Missouri))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] can-[Query:0] you-[Query:0] tell-[Query:0] me-[Query:0] about-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Missouri-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('missouri')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="264">
<nl lang="en">
What capital has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN capital)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[City:2] capital-[City:2] has-[City:1] the-[City:1] largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(capital(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(capital(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="265">
<nl lang="en">
What capital is the largest in the US ?
</nl>
<nl lang="es">
que capital es la mas grande en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo ookii shuto wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en genis baskent hangisidir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN capital)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que capital es la mas grande en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo ookii shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en genis baskent hangisidir)
</syn>
<augsyn lang="en">
(S What-[City:2] capital-[City:2] is-[City:1] the-[City:1] largest-[City:1] in-[City:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(capital(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="266">
<nl lang="en">
What cities are located in Pennsylvania ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS cities)) (SQ (VBP are) (VP (VBN located) (PP (IN in) (NP (NNP Pennsylvania))))))
</syn>
<augsyn lang="en">
(S What-[City:1] cities-[City:1] are-[City:2] located-[City:2] in-[City:2] Pennsylvania-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('pennsylvania'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="267">
<nl lang="en">
What cities in California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NNS cities)) (PP (IN in) (NP (NNP California)))))
</syn>
<augsyn lang="en">
(S What-[City:1] cities-[City:1] in-[City:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(city(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(city(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="268">
<nl lang="en">
What cities in Texas have the highest number of citizens ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NNS cities)) (PP (IN in) (NP (NNP Texas)))) (SQ (VP (VBP have) (NP (NP (DT the) (JJS highest) (NN number)) (PP (IN of) (NP (NNS citizens)))))))
</syn>
<augsyn lang="en">
(S What-[City:2] cities-[City:2] in-[City:3] Texas-[StateName:5] have-[City:1] the-[City:1] highest-[City:1] number-[City:1] of-[City:1] citizens-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="269">
<nl lang="en">
What cities in Texas have the highest populations ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NNS cities)) (PP (IN in) (NP (NNP Texas)))) (SQ (VP (VBP have) (NP (DT the) (JJS highest) (NNS populations)))))
</syn>
<augsyn lang="en">
(S What-[City:2] cities-[City:2] in-[City:3] Texas-[StateName:5] have-[City:1] the-[City:1] highest-[City:1] populations-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="270">
<nl lang="en">
What city has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN city)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[City:2] city-[City:2] has-[City:1] the-[City:1] largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="271">
<nl lang="en">
What city has the least population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN city)) (SQ (VP (VBZ has) (NP (DT the) (JJS least) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[City:2] city-[City:2] has-[City:1] the-[City:1] least-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="272">
<nl lang="en">
What city has the most people ?
</nl>
<nl lang="es">
que ciudad tiene mas personas ?
</nl>
<nl lang="ja">
hotondo no hito ga iru toshi wa nan desu ka ?
</nl>
<nl lang="tr">
hangi sehir en cok insana sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN city)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (NNS people)))))
</syn>
<syn lang="es">
(S que ciudad tiene mas personas)
</syn>
<syn lang="ja">
(S hotondo no hito ga iru toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi sehir en cok insana sahiptir)
</syn>
<augsyn lang="en">
(S What-[City:2] city-[City:2] has-[City:1] the-[City:1] most-[City:1] people-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="273">
<nl lang="en">
What city in the United States has the highest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NN city)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States)))) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S What-[City:2] city-[City:2] in-[City:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5] has-[City:1] the-[City:1] highest-[City:1] population-[City:1] density-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(city(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,countryid(usa)),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( density_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="274">
<nl lang="en">
What is capital of Iowa ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NN capital)) (PP (IN of) (NP (NNP Iowa))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] capital-[City:1] of-[City:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="275">
<nl lang="en">
What is capital of the state with the lowest point ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS lowest) (NN point))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] capital-[City:1] of-[City:2] the-[State:3] state-[State:3] with-[State:4] the-[Place:5] lowest-[Place:5] point-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(lowest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),lowest(C,place(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="276">
<nl lang="en">
What is largest capital ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (JJS largest) (NN capital))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] largest-[City:1] capital-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,capital(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="277">
<nl lang="en">
What is the adjacent state of California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ adjacent) (NN state)) (PP (IN of) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:2] adjacent-[State:2] state-[State:1] of-[State:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(next_to(A,B),state(A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="278">
<nl lang="en">
What is the area of Alaska ?
</nl>
<nl lang="es">
que es la area de alaska ?
</nl>
<nl lang="ja">
arasuka no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
alaska nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Alaska))))))
</syn>
<syn lang="es">
(S que es la area de alaska)
</syn>
<syn lang="ja">
(S arasuka no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="279">
<nl lang="en">
What is the area of all the states combined ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (PDT all) (DT the) (NNS states)) (VP (VBN combined)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:2] area-[Num:2] of-[Num:2] all-[State:3] the-[State:3] states-[State:3] combined-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(sum(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(area(C,B),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="280">
<nl lang="en">
What is the area of California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="281">
<nl lang="en">
What is the area of Florida ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Florida))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Florida-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('florida')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="282">
<nl lang="en">
What is the area of Idaho ?
</nl>
<nl lang="es">
que es la area de idaho ?
</nl>
<nl lang="ja">
aidahou no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
idaho nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Idaho))))))
</syn>
<syn lang="es">
(S que es la area de idaho)
</syn>
<syn lang="ja">
(S aidahou no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S idaho nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Idaho-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('idaho')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(idaho))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="283">
<nl lang="en">
What is the area of Maine ?
</nl>
<nl lang="es">
que es la area de maine ?
</nl>
<nl lang="ja">
meen no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
maine nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Maine))))))
</syn>
<syn lang="es">
(S que es la area de maine)
</syn>
<syn lang="ja">
(S meen no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S maine nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Maine-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('maine')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="284">
<nl lang="en">
What is the area of Maryland in square kilometers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Maryland)))) (PP (IN in) (NP (JJ square) (NNS kilometers))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Maryland-[StateName:3] in-[Num:1] square-[Num:1] kilometers-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('maryland')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(maryland))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="285">
<nl lang="en">
What is the area of New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP New) (NNP Mexico))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="286">
<nl lang="en">
What is the area of Ohio ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Ohio))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Ohio-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('ohio')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="287">
<nl lang="en">
What is the area of Seattle ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Seattle))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Seattle-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(cityid('seattle', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,cityid(seattle,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' seattle ' }) </node>
</mrl-parse>
</example>

<example id="288">
<nl lang="en">
What is the area of South Carolina ?
</nl>
<nl lang="es">
que es la area de south carolina ?
</nl>
<nl lang="ja">
sausu karoraina no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
south carolina nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP South) (NNP Carolina))))))
</syn>
<syn lang="es">
(S que es la area de south_carolina)
</syn>
<syn lang="ja">
(S sausu_karoraina no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S south_carolina nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] South-[StateName:3] Carolina-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('south carolina')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid('south carolina'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south carolina ' }) </node>
</mrl-parse>
</example>

<example id="289">
<nl lang="en">
What is the area of Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="290">
<nl lang="en">
What is the area of the largest state ?
</nl>
<nl lang="es">
que es la area de el estado mas grande ?
</nl>
<nl lang="ja">
mottomo ookii shuu no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
en genis eyaletin yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<syn lang="es">
(S que es la area de el estado mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii shuu no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis eyaletin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] the-[State:2] largest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(largest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="291">
<nl lang="en">
What is the area of the smallest state ?
</nl>
<nl lang="es">
que es la area de el estado mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
en kucuk eyaletin yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (DT the) (JJS smallest) (NN state))))))
</syn>
<syn lang="es">
(S que es la area de el estado mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S en kucuk eyaletin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] the-[State:2] smallest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(smallest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),smallest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="292">
<nl lang="en">
What is the area of the state with the capital Albany ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (NN capital)) (NP (NNP Albany)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] the-[State:2] state-[State:2] with-[State:3] the-[City:4] capital-[City:4] Albany-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(state(loc_1(capital(cityid('albany', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),state(B),loc(C,B),capital(C),const(C,cityid(albany,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' albany ' }) </node>
</mrl-parse>
</example>

<example id="293">
<nl lang="en">
What is the area of the state with the smallest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN population) (NN density))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] the-[State:3] state-[State:3] with-[State:2] the-[State:2] smallest-[State:2] population-[State:2] density-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(smallest_one(density_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),smallest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="294">
<nl lang="en">
What is the area of the states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (DT the) (NNS states))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] the-[State:2] states-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="295">
<nl lang="en">
What is the area of the Texas state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (DT the) (NNP Texas) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] the-[State:2] Texas-[StateName:4] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(state(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="296">
<nl lang="en">
What is the area of Wisconsin ?
</nl>
<nl lang="es">
que es la area de wisconsin ?
</nl>
<nl lang="ja">
uisukonshin no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
wisconsin nin yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN area)) (PP (IN of) (NP (NNP Wisconsin))))))
</syn>
<syn lang="es">
(S que es la area de wisconsin)
</syn>
<syn lang="ja">
(S uisukonshin no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S wisconsin nin yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] area-[Num:1] of-[Num:1] Wisconsin-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(stateid('wisconsin')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,stateid(wisconsin))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="297">
<nl lang="en">
What is the average population of the US by state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (JJ average) (NN population)) (PP (IN of) (NP (DT the) (NNP US)))) (PP (IN by) (NP (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] average-[Num:1] population-[Num:1] of-[Num:1] the-[CountryName:3] US-[CountryName:3] by-[Num:1] state-[Num:1])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="298">
<nl lang="en">
What is the average population per square km in Pennsylvania ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (JJ average) (NN population)) (PP (IN per) (NP (JJ square) (NN km)))) (PP (IN in) (NP (NNP Pennsylvania))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] average-[Num:1] population-[Num:1] per-[Num:1] square-[Num:1] km-[Num:1] in-[Num:1] Pennsylvania-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('pennsylvania')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="299">
<nl lang="en">
What is the average population per square km in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (JJ average) (NN population)) (PP (IN per) (NP (JJ square) (NN km)))) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] average-[Num:1] population-[Num:1] per-[Num:1] square-[Num:1] km-[Num:1] in-[Num:1] the-[CountryName:3] US-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="300">
<nl lang="en">
What is the biggest American city in a state with a river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (JJ American) (NN city)) (PP (IN in) (NP (NP (DT a) (NN state)) (PP (IN with) (NP (DT a) (NN river))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] American-[City:2] city-[City:2] in-[City:3] a-[State:4] state-[State:4] with-[State:5] a-[River:6] river-[River:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(loc_1(river(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),loc(C,B),river(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="301">
<nl lang="en">
What is the biggest capital city in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN capital) (NN city)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] capital-[City:2] city-[City:3] in-[City:4] the-[CountryName:6] US-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(city(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(capital(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="302">
<nl lang="en">
What is the biggest city in Arizona ?
</nl>
<nl lang="es">
que es la ciudad mas grande en arizona ?
</nl>
<nl lang="ja">
arizona no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
arizona daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Arizona))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en arizona)
</syn>
<syn lang="ja">
(S arizona no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S arizona daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Arizona-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('arizona')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(arizona)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="303">
<nl lang="en">
What is the biggest city in Georgia ?
</nl>
<nl lang="es">
que es la ciudad mas grande en georgia ?
</nl>
<nl lang="ja">
joojaa no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
georgia daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Georgia))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en georgia)
</syn>
<syn lang="ja">
(S joojaa no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Georgia-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('georgia')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(georgia)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="304">
<nl lang="en">
What is the biggest city in Kansas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Kansas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="305">
<nl lang="en">
What is the biggest city in Louisiana ?
</nl>
<nl lang="es">
que es la ciudad mas grande en louisiana ?
</nl>
<nl lang="ja">
ruijiana no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
louisiana daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Louisiana))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en louisiana)
</syn>
<syn lang="ja">
(S ruijiana no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S louisiana daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Louisiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('louisiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(louisiana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="306">
<nl lang="en">
What is the biggest city in Nebraska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Nebraska))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Nebraska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('nebraska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="307">
<nl lang="en">
What is the biggest city in Oregon ?
</nl>
<nl lang="es">
que es la ciudad mas grande en oregon ?
</nl>
<nl lang="ja">
oregon no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
oregon daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Oregon))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en oregon)
</syn>
<syn lang="ja">
(S oregon no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S oregon daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Oregon-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('oregon')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(oregon)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="308">
<nl lang="en">
What is the biggest city in Texas ?
</nl>
<nl lang="es">
que es la ciudad mas grande en texas ?
</nl>
<nl lang="ja">
tekisasu no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
texas daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en texas)
</syn>
<syn lang="ja">
(S tekisasu no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S texas daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="309">
<nl lang="en">
What is the biggest city in the smallest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (DT the) (JJS smallest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] the-[State:4] smallest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(smallest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),smallest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="310">
<nl lang="en">
What is the biggest city in the US ?
</nl>
<nl lang="es">
que es la ciudad mas grande en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="311">
<nl lang="en">
What is the biggest city in the USA ?
</nl>
<nl lang="es">
que es la ciudad mas grande en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="312">
<nl lang="en">
What is the biggest city in USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="313">
<nl lang="en">
What is the biggest city in Wyoming ?
</nl>
<nl lang="es">
que es la ciudad mas grande en wyoming ?
</nl>
<nl lang="ja">
waiomingu no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
wyoming daki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN city)) (PP (IN in) (NP (NNP Wyoming))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en wyoming)
</syn>
<syn lang="ja">
(S waiomingu no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S wyoming daki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] biggest-[City:1] city-[City:2] in-[City:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="314">
<nl lang="en">
What is the biggest river in Illinois ?
</nl>
<nl lang="es">
que es el rio mas grande en illinois ?
</nl>
<nl lang="ja">
irinoi no mottomo ookii kawa wa nan desu ka ?
</nl>
<nl lang="tr">
illinois deki en buyuk nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN river)) (PP (IN in) (NP (NNP Illinois))))))
</syn>
<syn lang="es">
(S que es el rio mas grande en illinois)
</syn>
<syn lang="ja">
(S irinoi no mottomo ookii kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S illinois deki en buyuk nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] biggest-[River:1] river-[River:2] in-[River:3] Illinois-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('illinois')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(river(A),loc(A,B),const(B,stateid(illinois)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="315">
<nl lang="en">
What is the biggest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJS biggest) (NN state))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] biggest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="316">
<nl lang="en">
What is the biggest state in continental US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN state)) (PP (IN in) (NP (JJ continental) (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] biggest-[State:1] state-[State:2] in-[State:3] continental-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="317">
<nl lang="en">
What is the biggest state in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS biggest) (NN state)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] biggest-[State:1] state-[State:2] in-[State:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="318">
<nl lang="en">
What is the capital city of the largest state in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital) (NN city)) (PP (IN of) (NP (NP (DT the) (JJS largest) (NN state)) (PP (IN in) (NP (DT the) (NNP US))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] city-[City:2] of-[City:3] the-[State:4] largest-[State:4] state-[State:5] in-[State:6] the-[CountryName:8] US-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(capital(city(loc_2(largest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),city(A),loc(A,B),largest(B,(state(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="319">
<nl lang="en">
What is the capital of California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] California-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('california'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="320">
<nl lang="en">
What is the capital of Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Colorado))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="321">
<nl lang="en">
What is the capital of Georgia ?
</nl>
<nl lang="es">
que es la capital de georgia ?
</nl>
<nl lang="ja">
joojaa no shuto wa nan desu ka ?
</nl>
<nl lang="tr">
georgia in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Georgia))))))
</syn>
<syn lang="es">
(S que es la capital de georgia)
</syn>
<syn lang="ja">
(S joojaa no shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Georgia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('georgia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(georgia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="322">
<nl lang="en">
What is the capital of Hawaii ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Hawaii))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="323">
<nl lang="en">
What is the capital of Illinois ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Illinois))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Illinois-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('illinois'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="324">
<nl lang="en">
What is the capital of Indiana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Indiana))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Indiana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('indiana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(indiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="325">
<nl lang="en">
What is the capital of Iowa ?
</nl>
<nl lang="es">
que es la capital de iowa ?
</nl>
<nl lang="ja">
aiowa no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
iowa in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Iowa))))))
</syn>
<syn lang="es">
(S que es la capital de iowa)
</syn>
<syn lang="ja">
(S aiowa no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="326">
<nl lang="en">
What is the capital of Maine ?
</nl>
<nl lang="es">
que es la capital de maine ?
</nl>
<nl lang="ja">
meen no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
maine in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Maine))))))
</syn>
<syn lang="es">
(S que es la capital de maine)
</syn>
<syn lang="ja">
(S meen no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S maine in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Maine-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('maine'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="327">
<nl lang="en">
What is the capital of Maryland ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Maryland))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Maryland-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('maryland'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(maryland))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="328">
<nl lang="en">
What is the capital of Massachusetts ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Massachusetts))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Massachusetts-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('massachusetts'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(massachusetts))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="329">
<nl lang="en">
What is the capital of Michigan ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Michigan))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="330">
<nl lang="en">
What is the capital of New Hampshire ?
</nl>
<nl lang="es">
que es la capital de new hampshire ?
</nl>
<nl lang="ja">
nyuu hanpushaa no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
new hampshire in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP New) (NNP Hampshire))))))
</syn>
<syn lang="es">
(S que es la capital de new_hampshire)
</syn>
<syn lang="ja">
(S nyuu_hanpushaa no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S new_hampshire in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] New-[StateName:4] Hampshire-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('new hampshire'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="331">
<nl lang="en">
What is the capital of New Jersey ?
</nl>
<nl lang="es">
que es la capital de new jersey ?
</nl>
<nl lang="ja">
nyuu jaajii no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
new jersey in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP New) (NNP Jersey))))))
</syn>
<syn lang="es">
(S que es la capital de new_jersey)
</syn>
<syn lang="ja">
(S nyuu_jaajii no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S new_jersey in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] New-[StateName:4] Jersey-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('new jersey'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('new jersey'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new jersey ' }) </node>
</mrl-parse>
</example>

<example id="332">
<nl lang="en">
What is the capital of New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP New) (NNP York))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="333">
<nl lang="en">
What is the capital of North Dakota ?
</nl>
<nl lang="es">
que es la capital de north dakota ?
</nl>
<nl lang="ja">
noosu dakota no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
north dakota in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP North) (NNP Dakota))))))
</syn>
<syn lang="es">
(S que es la capital de north_dakota)
</syn>
<syn lang="ja">
(S noosu_dakota no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S north_dakota in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] North-[StateName:4] Dakota-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('north dakota'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid('north dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' north dakota ' }) </node>
</mrl-parse>
</example>

<example id="334">
<nl lang="en">
What is the capital of Ohio ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Ohio))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Ohio-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="335">
<nl lang="en">
What is the capital of Pennsylvania ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Pennsylvania))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Pennsylvania-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('pennsylvania'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="336">
<nl lang="en">
What is the capital of states that have cities named Durham ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Durham))))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] states-[State:3] that-[State:4] have-[State:4] cities-[City:5] named-[City:5] Durham-[CityName:7])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(city(cityid('durham', _)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),city(C),const(C,cityid(durham,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="7"> *n:CityName -> ({ ' durham ' }) </node>
</mrl-parse>
</example>

<example id="337">
<nl lang="en">
What is the capital of Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="338">
<nl lang="en">
What is the capital of the Alabama state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (DT the) (NNP Alabama) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] Alabama-[StateName:5] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(stateid('alabama')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(alabama)),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="339">
<nl lang="en">
What is the capital of the Florida state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (DT the) (NNP Florida) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] Florida-[StateName:5] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(florida)),state(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="340">
<nl lang="en">
What is the capital of the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] largest-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="341">
<nl lang="en">
What is the capital of the smallest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (DT the) (JJS smallest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] smallest-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(smallest(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),smallest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="342">
<nl lang="en">
What is the capital of the state Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (NP (NNP Texas)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] state-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="343">
<nl lang="en">
What is the capital of the state that borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] state-[State:3] that-[State:5] borders-[State:5] the-[State:3] most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="344">
<nl lang="en">
What is the capital of the state that borders the state that borders Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas))))))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] state-[State:3] that-[State:4] borders-[State:4] the-[State:5] state-[State:5] that-[State:6] borders-[State:6] Texas-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(state(next_to_2(stateid('texas'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="345">
<nl lang="en">
What is the capital of the state with the highest elevation ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS highest) (NN elevation))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] state-[State:3] with-[State:4] the-[Place:5] highest-[Place:5] elevation-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(highest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),highest(C,place(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="346">
<nl lang="en">
What is the capital of the state with the highest point ?
</nl>
<nl lang="es">
que es la capital de el estado con el punto mas alto ?
</nl>
<nl lang="ja">
mottomo takai chiten ga aru shuu no shuto wa nan desu ka ?
</nl>
<nl lang="tr">
en yuksek noktayi iceren eyaletin baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS highest) (NN point))))))))
</syn>
<syn lang="es">
(S que es la capital de el estado con el punto mas alto)
</syn>
<syn lang="ja">
(S mottomo takai chiten ga aru shuu no shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S en yuksek noktayi iceren eyaletin baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] state-[State:3] with-[State:4] the-[Place:5] highest-[Place:5] point-[Place:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(highest(place(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),highest(C,(place(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="347">
<nl lang="en">
What is the capital of the state with the largest population ?
</nl>
<nl lang="es">
que es la capital de el estado con la poblacion mas grande ?
</nl>
<nl lang="ja">
mottomo ookii jinkou ga aru shuu no shuto wa nan desu ka ?
</nl>
<nl lang="tr">
nufusu en fazla olan eyaletin baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population))))))))
</syn>
<syn lang="es">
(S que es la capital de el estado con la poblacion mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii jinkou ga aru shuu no shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S nufusu en fazla olan eyaletin baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] largest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="348">
<nl lang="en">
What is the capital of the state with the largest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population) (NN density))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] largest-[State:3] population-[State:3] density-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest_one(density_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="349">
<nl lang="en">
What is the capital of the state with the longest river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS longest) (NN river))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:3] state-[State:3] with-[State:4] the-[River:5] longest-[River:5] river-[River:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(loc_1(longest(river(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),loc(C,B),longest(C,(river(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="350">
<nl lang="en">
What is the capital of the state with the most inhabitants ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS most) (NNS inhabitants))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] most-[State:3] inhabitants-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="351">
<nl lang="en">
What is the capital of Utah ?
</nl>
<nl lang="es">
que es la capital de utah ?
</nl>
<nl lang="ja">
yuutaa no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
utah in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Utah))))))
</syn>
<syn lang="es">
(S que es la capital de utah)
</syn>
<syn lang="ja">
(S yuutaa no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S utah in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Utah-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('utah'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="352">
<nl lang="en">
What is the capital of Vermont ?
</nl>
<nl lang="es">
que es la capital de vermont ?
</nl>
<nl lang="ja">
baamonto no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
vermont in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Vermont))))))
</syn>
<syn lang="es">
(S que es la capital de vermont)
</syn>
<syn lang="ja">
(S baamonto no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S vermont in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Vermont-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('vermont'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(vermont))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' vermont ' }) </node>
</mrl-parse>
</example>

<example id="353">
<nl lang="en">
What is the capital of Washington ?
</nl>
<nl lang="es">
que es la capital de washington ?
</nl>
<nl lang="ja">
washinton no chuto wa nan desu ka ?
</nl>
<nl lang="tr">
washington in baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Washington))))))
</syn>
<syn lang="es">
(S que es la capital de washington)
</syn>
<syn lang="ja">
(S washinton no chuto wa nan desu ka)
</syn>
<syn lang="tr">
(S washington in baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] capital-[City:1] of-[City:2] Washington-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(stateid('washington'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),const(B,stateid(washington))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="354">
<nl lang="en">
What is the city in Texas with the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (NN city)) (PP (IN in) (NP (NNP Texas)))) (PP (IN with) (NP (DT the) (JJS largest) (NN population))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:2] city-[City:2] in-[City:3] Texas-[StateName:5] with-[City:1] the-[City:1] largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="355">
<nl lang="en">
What is the city with the smallest population ?
</nl>
<nl lang="es">
que es la ciudad con la poblacion mas pequena ?
</nl>
<nl lang="ja">
mottomo chiisai jinkou ga aru toshi wa nan desu ka ?
</nl>
<nl lang="tr">
en az nufuslu sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN city)) (PP (IN with) (NP (DT the) (JJS smallest) (NN population))))))
</syn>
<syn lang="es">
(S que es la ciudad con la poblacion mas pequena)
</syn>
<syn lang="ja">
(S mottomo chiisai jinkou ga aru toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S en az nufuslu sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:2] city-[City:2] with-[City:1] the-[City:1] smallest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(city(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="356">
<nl lang="en">
What is the combined area of all 50 states ?
</nl>
<nl lang="es">
que es la area combinada de todos los 50 estados ?
</nl>
<nl lang="ja">
gojuu shuu zenbu no zentai no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
50 eyaletin toplam alani nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (VBN combined) (NN area)) (PP (IN of) (NP (DT all) (CD 50) (NNS states))))))
</syn>
<syn lang="es">
(S que es la area combinada de todos los 50 estados)
</syn>
<syn lang="ja">
(S gojuu shuu zenbu no zentai no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S 50 eyaletin toplam alani nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] combined-[Num:1] area-[Num:2] of-[Num:2] all-[State:3] 50-[State:3] states-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(sum(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(area(C,B),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ area_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="357">
<nl lang="en">
What is the combined population of all 50 states ?
</nl>
<nl lang="es">
que es la poblacion combinada de todos los 50 estados ?
</nl>
<nl lang="ja">
gojuu shuu no zentai no jinkou wa ikura desu ka ?
</nl>
<nl lang="tr">
50 eyaletin toplam nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (VBN combined) (NN population)) (PP (IN of) (NP (DT all) (CD 50) (NNS states))))))
</syn>
<syn lang="es">
(S que es la poblacion combinada de todos los 50 estados)
</syn>
<syn lang="ja">
(S gojuu shuu no zentai no jinkou wa ikura desu ka)
</syn>
<syn lang="tr">
(S 50 eyaletin toplam nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] combined-[Num:1] population-[Num:2] of-[Num:2] all-[State:3] 50-[State:3] states-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(sum(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(population(C,B),state(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="358">
<nl lang="en">
What is the density of Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN density)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] density-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="359">
<nl lang="en">
What is the density of the New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN density)) (PP (IN of) (NP (DT the) (NNP New) (NNP York))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] density-[Num:1] of-[Num:1] the-[StateName:3] New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="360">
<nl lang="en">
What is the elevation of Death Valley ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN elevation)) (PP (IN of) (NP (NNP Death) (NNP Valley))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] elevation-[Num:1] of-[Num:1] Death-[PlaceName:3] Valley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('death valley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('death valley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' death valley ' }) </node>
</mrl-parse>
</example>

<example id="361">
<nl lang="en">
What is the elevation of the highest point in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN elevation)) (PP (IN of) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] elevation-[Num:1] of-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] in-[Place:4] the-[CountryName:6] USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="362">
<nl lang="en">
What is the height of Mount McKinley ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN height)) (PP (IN of) (NP (NNP Mount) (NNP McKinley))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] height-[Num:1] of-[Num:1] Mount-[PlaceName:3] McKinley-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(placeid('mount mckinley')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),const(B,placeid('mount mckinley'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="363">
<nl lang="en">
What is the height of the highest mountain in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN height)) (PP (IN of) (NP (NP (DT the) (JJS highest) (NN mountain)) (PP (IN in) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] height-[Num:1] of-[Num:1] the-[Place:2] highest-[Place:2] mountain-[Place:3] in-[Place:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(mountain(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(mountain(B),loc(B,C),const(C,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="364">
<nl lang="en">
What is the height of the highest point in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN height)) (PP (IN of) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] height-[Num:1] of-[Num:1] the-[Place:2] highest-[Place:2] point-[Place:3] in-[Place:4] the-[CountryName:6] USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(elevation_1(highest(place(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(elevation(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ elevation_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="365">
<nl lang="en">
What is the high point of Wyoming ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ high) (NN point)) (PP (IN of) (NP (NNP Wyoming))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] high-[Place:1] point-[Place:1] of-[Place:1] Wyoming-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(high_point_1(stateid('wyoming')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(high_point(B,A),const(B,stateid(wyoming))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ high_point_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="366">
<nl lang="en">
What is the highest elevation in New Mexico ?
</nl>
<nl lang="es">
que es la elevacion mas alta en new mexico ?
</nl>
<nl lang="ja">
nyuu mekishiko no mottomo takai kaibatsu wa nan desu ka ?
</nl>
<nl lang="tr">
new mexico de en yuksek yukselti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN elevation)) (PP (IN in) (NP (NNP New) (NNP Mexico))))))
</syn>
<syn lang="es">
(S que es la elevacion mas alta en new_mexico)
</syn>
<syn lang="ja">
(S nyuu_mekishiko no mottomo takai kaibatsu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_mexico de en yuksek yukselti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] elevation-[Place:2] in-[Place:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('new mexico')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('new mexico')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="367">
<nl lang="en">
What is the highest elevation in South Carolina ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN elevation)) (PP (IN in) (NP (NNP South) (NNP Carolina))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] elevation-[Place:2] in-[Place:3] South-[StateName:5] Carolina-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('south carolina')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('south carolina')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' south carolina ' }) </node>
</mrl-parse>
</example>

<example id="368">
<nl lang="en">
What is the highest elevation in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN elevation)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] elevation-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="369">
<nl lang="en">
What is the highest elevation in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN elevation)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] elevation-[Place:2] in-[Place:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="370">
<nl lang="en">
What is the highest mountain in Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN mountain)) (PP (IN in) (NP (NNP Alaska))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] mountain-[Place:2] in-[Place:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,stateid(alaska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="371">
<nl lang="en">
What is the highest mountain in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN mountain)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] mountain-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="372">
<nl lang="en">
What is the highest mountain in the US ?
</nl>
<nl lang="es">
que es la montana mas alta en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo takai yama wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en yuksek dag nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN mountain)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que es la montana mas alta en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo takai yama wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en yuksek dag nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] mountain-[Place:2] in-[Place:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="373">
<nl lang="en">
What is the highest mountain in US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN mountain)) (PP (IN in) (NP (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] mountain-[Place:2] in-[Place:3] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="374">
<nl lang="en">
What is the highest point in Colorado ?
</nl>
<nl lang="es">
que es el punto mas alto en colorado ?
</nl>
<nl lang="ja">
kororado no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
colorado daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Colorado))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en colorado)
</syn>
<syn lang="ja">
(S kororado no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S colorado daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="375">
<nl lang="en">
What is the highest point in Delaware ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Delaware))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Delaware-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('delaware')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(delaware)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="376">
<nl lang="en">
What is the highest point in each state whose lowest point is sea level ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT each) (NN state)) (SBAR (WHNP (WP$ whose) (JJS lowest) (NN point)) (S (VBZ is) (NP (NN sea) (NN level)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] each-[State:4] state-[State:4] whose-[State:5] lowest-[State:5] point-[State:5] is-[State:5] sea-[State:5] level-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(place(elevation_2(0))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(highest(A,(place(A),loc(A,B),state(B))),lowest(C,(loc(C,B),place(C))),elevation(C,0)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ elevation_2 ( *n:Num ) }) </node>
<node id="8"> *n:Num -> ({ 0 }) </node>
</mrl-parse>
</example>

<example id="377">
<nl lang="en">
What is the highest point in Florida ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Florida))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Florida-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(florida)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="378">
<nl lang="en">
What is the highest point in Iowa ?
</nl>
<nl lang="es">
que es el punto mas alto en iowa ?
</nl>
<nl lang="ja">
aiowa no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
iowa daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Iowa))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en iowa)
</syn>
<syn lang="ja">
(S aiowa no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="379">
<nl lang="en">
What is the highest point in Kansas ?
</nl>
<nl lang="es">
que es el punto mas alto en kansas ?
</nl>
<nl lang="ja">
kanzasu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
kansas daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Kansas))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en kansas)
</syn>
<syn lang="ja">
(S kanzasu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S kansas daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(kansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="380">
<nl lang="en">
What is the highest point in Maine ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Maine))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Maine-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('maine')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(maine)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="381">
<nl lang="en">
What is the highest point in Montana ?
</nl>
<nl lang="es">
que es el punto mas alto en montana ?
</nl>
<nl lang="ja">
montana no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
montana daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Montana))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en montana)
</syn>
<syn lang="ja">
(S montana no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S montana daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="382">
<nl lang="en">
What is the highest point in Nevada in meters ?
</nl>
<nl lang="es">
que es el punto mas alto en nevada en metros ?
</nl>
<nl lang="ja">
nebaada no mottomo takai chiten wa nan metoru desu ka ?
</nl>
<nl lang="tr">
nevada daki en yuksek nokta metre olarak nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Nevada)))) (PP (IN in) (NP (NNS meters))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en nevada en metros)
</syn>
<syn lang="ja">
(S nebaada no mottomo takai chiten wa nan metoru desu ka)
</syn>
<syn lang="tr">
(S nevada daki en yuksek nokta metre olarak nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Nevada-[StateName:5] in-[Place:1] meters-[Place:1])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('nevada')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(nevada)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="383">
<nl lang="en">
What is the highest point in New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP New) (NNP Mexico))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('new mexico')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('new mexico')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="384">
<nl lang="en">
What is the highest point in Ohio ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Ohio))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(ohio)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="385">
<nl lang="en">
What is the highest point in Rhode Island ?
</nl>
<nl lang="es">
que es el punto mas alto en rhode island ?
</nl>
<nl lang="ja">
roodoairando no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
rhode island daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Rhode) (NNP Island))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S rhode_island daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Rhode-[StateName:5] Island-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid('rhode island')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="386">
<nl lang="en">
What is the highest point in states bordering Georgia ?
</nl>
<nl lang="es">
que es el punto mas alto en los estados bordeando a georgia ?
</nl>
<nl lang="ja">
joojaa ni rinsetsu suru shuu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
georgia ya siniri olan eyaletlerdeki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (NNS states)) (VP (VBG bordering) (NP (NNP Georgia))))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en los estados bordeando a georgia)
</syn>
<syn lang="ja">
(S joojaa ni rinsetsu suru shuu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia ya siniri olan eyaletlerdeki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] states-[State:4] bordering-[State:5] Georgia-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(next_to_2(stateid('georgia')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(georgia)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="387">
<nl lang="en">
What is the highest point in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="388">
<nl lang="en">
What is the highest point in the country ?
</nl>
<nl lang="es">
que es el punto mas alto en el pais ?
</nl>
<nl lang="ja">
kuni no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
ulkedeki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NN country))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en el pais)
</syn>
<syn lang="ja">
(S kuni no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S ulkedeki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[CountryName:5] country-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="389">
<nl lang="en">
What is the highest point in the smallest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (JJS smallest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] smallest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(smallest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),smallest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="390">
<nl lang="en">
What is the highest point in the state with capital Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (NN capital)) (NP (NNP Austin)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] state-[State:4] with-[State:5] capital-[City:6] Austin-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(capital(cityid('austin', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid(austin,_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="391">
<nl lang="en">
What is the highest point in the state with capital Des Moines ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (NN capital)) (NP (NNP Des) (NNP Moines)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] state-[State:4] with-[State:5] capital-[City:6] Des-[CityName:8] Moines-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(capital(cityid('des moines', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid('des moines',_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' des moines ' }) </node>
</mrl-parse>
</example>

<example id="392">
<nl lang="en">
What is the highest point in the state with the capital Des Moines ?
</nl>
<nl lang="es">
que es el punto mas alto de el estado con la capital des moines ?
</nl>
<nl lang="ja">
demoin no shuto ga aru shuu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
baskenti des moines olan eyaletin en yuksek noktasi nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (NN capital)) (NP (NNP Des) (NNP Moines)))))))))
</syn>
<syn lang="es">
(S que es el punto mas alto de el estado con la capital des_moines)
</syn>
<syn lang="ja">
(S demoin no shuto ga aru shuu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S baskenti des_moines olan eyaletin en yuksek noktasi nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] state-[State:4] with-[State:5] the-[City:6] capital-[City:6] Des-[CityName:8] Moines-[CityName:8])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(loc_1(capital(cityid('des moines', _))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),loc(C,B),capital(C),const(C,cityid('des moines',_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="8"> *n:CityName -> ({ ' des moines ' }) </node>
</mrl-parse>
</example>

<example id="393">
<nl lang="en">
What is the highest point in the state with the most rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS most) (NNS rivers))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:5] state-[State:5] with-[State:6] the-[State:4] most-[State:4] rivers-[River:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(most(state(traverse_1(river(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),most(B,C,(state(B),traverse(C,B),river(C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="394">
<nl lang="en">
What is the highest point in the state with the smallest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN population))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:5] state-[State:5] with-[State:4] the-[State:4] smallest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(smallest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),smallest(C,(state(B),population(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="395">
<nl lang="en">
What is the highest point in the states bordering Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NP (DT the) (NNS states)) (VP (VBG bordering) (NP (NNP Colorado))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] states-[State:4] bordering-[State:5] Colorado-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(state(next_to_2(stateid('colorado')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="396">
<nl lang="en">
What is the highest point in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="397">
<nl lang="en">
What is the highest point in the US ?
</nl>
<nl lang="es">
que es el punto mas alto en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="398">
<nl lang="en">
What is the highest point in the USA ?
</nl>
<nl lang="es">
que es el punto mas alto en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="399">
<nl lang="en">
What is the highest point in Virginia ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Virginia))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Virginia-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('virginia')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(virginia)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="400">
<nl lang="en">
What is the highest point in Wyoming ?
</nl>
<nl lang="es">
que es el punto mas alto en wyoming ?
</nl>
<nl lang="ja">
waiomingu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
wyoming daki en yuksek nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Wyoming))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en wyoming)
</syn>
<syn lang="ja">
(S waiomingu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S wyoming daki en yuksek nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="401">
<nl lang="en">
What is the highest point of the state with the largest area ?
</nl>
<nl lang="es">
que es el punto mas alto de el estado con la area mas grande ?
</nl>
<nl lang="ja">
mottomo ookii chiiki ga aru shuu no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
en genis alana sahip eyaletin en yuksek noktasi nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN area))))))))
</syn>
<syn lang="es">
(S que es el punto mas alto de el estado con la area mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii chiiki ga aru shuu no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis alana sahip eyaletin en yuksek noktasi nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] of-[Place:3] the-[State:5] state-[State:5] with-[State:4] the-[State:4] largest-[State:4] area-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(largest_one(area_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),largest(C,(state(B),area(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="402">
<nl lang="en">
What is the highest point of the state with the smallest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN population) (NN density))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] of-[Place:3] the-[State:5] state-[State:5] with-[State:4] the-[State:4] smallest-[State:4] population-[State:4] density-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(smallest_one(density_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),smallest(C,(state(B),density(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="403">
<nl lang="en">
What is the highest point of the USA ?
</nl>
<nl lang="es">
que es el punto mas alto de los usa ?
</nl>
<nl lang="ja">
amerika no mottomo takai chiten wa nan desu ka ?
</nl>
<nl lang="tr">
usa nin en yuksek noktasi nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S que es el punto mas alto de los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo takai chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S usa nin en yuksek noktasi nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] of-[Place:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="404">
<nl lang="en">
What is the largest capital ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJS largest) (NN capital))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] capital-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,capital(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="405">
<nl lang="en">
What is the largest capital city in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN capital) (NN city)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] capital-[City:2] city-[City:3] in-[City:4] the-[CountryName:6] USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(capital(city(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(capital(A),city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="406">
<nl lang="en">
What is the largest city in a state that borders Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NP (DT a) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] a-[State:4] state-[State:4] that-[State:5] borders-[State:5] Texas-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(next_to_2(stateid('texas')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="407">
<nl lang="en">
What is the largest city in Alabama ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Alabama))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] Alabama-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('alabama')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(alabama)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="408">
<nl lang="en">
What is the largest city in California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="409">
<nl lang="en">
What is the largest city in Michigan ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Michigan))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] Michigan-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('michigan')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(michigan)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="410">
<nl lang="en">
What is the largest city in Minnesota by population ?
</nl>
<nl lang="es">
que es la ciudad mas grande en minnesota por poblacion ?
</nl>
<nl lang="ja">
jinkou de minesota no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
minnesota da nufus acisindan en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Minnesota)))) (PP (IN by) (NP (NN population))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en minnesota por poblacion)
</syn>
<syn lang="ja">
(S jinkou de minesota no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S minnesota da nufus acisindan en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] Minnesota-[StateName:5] by-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('minnesota'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(minnesota)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' minnesota ' }) </node>
</mrl-parse>
</example>

<example id="411">
<nl lang="en">
What is the largest city in Missouri ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Missouri))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] Missouri-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(missouri)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="412">
<nl lang="en">
What is the largest city in Rhode Island ?
</nl>
<nl lang="es">
que es la ciudad mas grande en rhode island ?
</nl>
<nl lang="ja">
roodoairando no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
rhode island aki en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Rhode) (NNP Island))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en rhode_island)
</syn>
<syn lang="ja">
(S roodoairando no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S rhode_island aki en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] Rhode-[StateName:5] Island-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('rhode island')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid('rhode island')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="413">
<nl lang="en">
What is the largest city in smallest state through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NP (JJS smallest) (NN state)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] smallest-[State:4] state-[State:5] through-[State:6] which-[State:6] the-[RiverName:8] Mississippi-[RiverName:8] runs-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(smallest(state(traverse_1(riverid('mississippi'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),const(C,riverid(mississippi)),traverse(C,B))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="8"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="414">
<nl lang="en">
What is the largest city in states that border California ?
</nl>
<nl lang="es">
que es la ciudad mas grande en los estados que bordean a california ?
</nl>
<nl lang="ja">
karifuorunia ni rinsetsu suru shuu no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
california ya komsu eyaletler deki en genis sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP California))))))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en los estados que bordean a california)
</syn>
<syn lang="ja">
(S karifuorunia ni rinsetsu suru shuu no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S california ya komsu eyaletler deki en genis sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] states-[State:4] that-[State:5] border-[State:5] California-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(state(next_to_2(stateid('california')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="415">
<nl lang="en">
What is the largest city in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="416">
<nl lang="en">
What is the largest city in the smallest state in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NP (DT the) (JJS smallest) (NN state)) (PP (IN in) (NP (DT the) (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] the-[State:4] smallest-[State:4] state-[State:5] in-[State:6] the-[CountryName:8] USA-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="417">
<nl lang="en">
What is the largest city in Wisconsin ?
</nl>
<nl lang="es">
que es la ciudad mas grande en wisconsin ?
</nl>
<nl lang="ja">
uisukonshin no mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
wisconsin deki en genis sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Wisconsin))))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande en wisconsin)
</syn>
<syn lang="ja">
(S uisukonshin no mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S wisconsin deki en genis sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] in-[City:3] Wisconsin-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('wisconsin')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(wisconsin)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="418">
<nl lang="en">
What is the largest city of Kansas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN of) (NP (NNP Kansas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] city-[City:2] of-[City:3] Kansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(loc_2(stateid('kansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(city(A),loc(A,B),const(B,stateid(kansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="419">
<nl lang="en">
What is the largest of the states that the Rio Grande runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (NP (DT the) (NNP Rio) (NNP Grande)) (VP (VBZ runs) (PP (IN through))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] of-[State:1] the-[State:2] states-[State:2] that-[State:3] the-[RiverName:5] Rio-[RiverName:5] Grande-[RiverName:5] runs-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(traverse_1(riverid('rio grande')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),const(B,riverid('rio grande')),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' rio grande ' }) </node>
</mrl-parse>
</example>

<example id="420">
<nl lang="en">
What is the largest river in Washington state ?
</nl>
<nl lang="es">
que es el rio mas grande en el estado de washington ?
</nl>
<nl lang="ja">
washinton shuu no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
washington eyaletindeki en genis nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN river)) (PP (IN in) (NP (NNP Washington) (NN state))))))
</syn>
<syn lang="es">
(S que es el rio mas grande en el estado de washington)
</syn>
<syn lang="ja">
(S washinton shuu no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S washington eyaletindeki en genis nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] largest-[River:1] river-[River:2] in-[River:3] Washington-[StateName:6] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(state(stateid('washington'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(river(A),loc(A,B),const(B,stateid(washington)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="421">
<nl lang="en">
What is the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJS largest) (NN state))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="422">
<nl lang="en">
What is the largest state bordering Arkansas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (VP (VBG bordering) (NP (NNP Arkansas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] bordering-[State:3] Arkansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('arkansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(arkansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="423">
<nl lang="en">
What is the largest state bordering Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (VP (VBG bordering) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] bordering-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="424">
<nl lang="en">
What is the largest state capital in population ?
</nl>
<nl lang="es">
que es la capital de estado mas grande en poblacion ?
</nl>
<nl lang="ja">
jinkou de mottomo ookii shuto wa nan desu ka ?
</nl>
<nl lang="tr">
nufus bakimindan en buyuk eyalet baskenti nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state) (NN capital)) (PP (IN in) (NP (NN population))))))
</syn>
<syn lang="es">
(S que es la capital de estado mas grande en poblacion)
</syn>
<syn lang="ja">
(S jinkou de mottomo ookii shuto wa nan desu ka)
</syn>
<syn lang="tr">
(S nufus bakimindan en buyuk eyalet baskenti nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] largest-[City:1] state-[State:3] capital-[City:2] in-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(capital_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(C),capital(C,A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="425">
<nl lang="en">
What is the largest state in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] in-[State:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="426">
<nl lang="en">
What is the largest state in USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (PP (IN in) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] in-[State:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="427">
<nl lang="en">
What is the largest state that borders California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP California))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] that-[State:3] borders-[State:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="428">
<nl lang="en">
What is the largest state that borders Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] that-[State:3] borders-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="429">
<nl lang="en">
What is the largest state that borders the state with the highest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS highest) (NN population))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] that-[State:3] borders-[State:3] the-[State:5] state-[State:5] with-[State:4] the-[State:4] highest-[State:4] population-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(largest_one(population_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),largest(C,(state(B),population(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="430">
<nl lang="en">
What is the largest state that borders the state with the lowest point in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (DT the) (NNP USA))))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] that-[State:3] borders-[State:3] the-[State:4] state-[State:4] with-[State:5] the-[Place:6] lowest-[Place:6] point-[Place:7] in-[Place:8] the-[CountryName:10] USA-[CountryName:10])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(state(loc_1(lowest(place(loc_2(countryid('usa'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="8"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="9"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="10"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="431">
<nl lang="en">
What is the largest state traversed by the Mississippi river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN state)) (VP (VBN traversed) (PP (IN by) (NP (DT the) (NNP Mississippi) (NN river)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] largest-[State:1] state-[State:2] traversed-[State:3] by-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),traverse(B,A),const(B,riverid(mississippi)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="432">
<nl lang="en">
What is the least populous state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJS least) (JJ populous) (NN state))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] least-[State:1] populous-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(population(A,B),state(A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="433">
<nl lang="en">
What is the length of the Colorado river ?
</nl>
<nl lang="es">
cuanto tiene de largo el rio colorado ?
</nl>
<nl lang="ja">
kororado kawa no nagasa wa nan desu ka ?
</nl>
<nl lang="tr">
colorado nehrinin uzunlugu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (DT the) (NNP Colorado) (NN river))))))
</syn>
<syn lang="es">
(S cuanto tiene de largo el rio colorado)
</syn>
<syn lang="ja">
(S kororado kawa no nagasa wa nan desu ka)
</syn>
<syn lang="tr">
(S colorado nehrinin uzunlugu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:2] Colorado-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(colorado)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="434">
<nl lang="en">
What is the length of the Colorado river in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (NP (DT the) (NNP Colorado) (NN river)) (PP (IN in) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:5] Colorado-[RiverName:4] river-[River:5] in-[River:6] Texas-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(len(intersection(riverid('colorado'), river(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(colorado)),river(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ intersection ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' colorado ' }) </node>
<node id="5"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="435">
<nl lang="en">
What is the length of the longest river in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (DT the) (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:2] longest-[River:2] river-[River:3] in-[River:4] the-[CountryName:6] USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="436">
<nl lang="en">
What is the length of the longest river that runs through Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (NP (DT the) (JJS longest) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ runs) (PP (IN through) (NP (NNP Texas)))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:2] longest-[River:2] river-[River:3] that-[River:4] runs-[River:4] through-[River:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(len(longest(river(traverse_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),longest(B,(river(B),traverse(B,C),const(C,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="437">
<nl lang="en">
What is the length of the Mississippi river ?
</nl>
<nl lang="es">
que tiene de largo el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi nehrinin uzunlugu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (DT the) (NNP Mississippi) (NN river))))))
</syn>
<syn lang="es">
(S que tiene de largo el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi nehrinin uzunlugu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:2] Mississippi-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(len(river(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="438">
<nl lang="en">
What is the length of the river that flows through the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ flows) (PP (IN through) (NP (DT the) (JJS most) (NNS states)))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:3] river-[River:3] that-[River:4] flows-[River:4] through-[River:4] the-[River:2] most-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="439">
<nl lang="en">
What is the length of the river that runs through the most number of states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ runs) (PP (IN through) (NP (NP (DT the) (JJS most) (NN number)) (PP (IN of) (NP (NNS states)))))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:3] river-[River:3] that-[River:4] runs-[River:4] through-[River:4] the-[River:2] most-[River:2] number-[River:2] of-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="440">
<nl lang="en">
What is the length of the river that runs through the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ runs) (PP (IN through) (NP (DT the) (JJS most) (NNS states)))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:3] river-[River:3] that-[River:4] runs-[River:4] through-[River:4] the-[River:2] most-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="441">
<nl lang="en">
What is the length of the river that traverses the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ traverses) (NP (DT the) (JJS most) (NNS states))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] length-[Num:1] of-[Num:1] the-[River:3] river-[River:3] that-[River:4] traverses-[River:4] the-[River:2] most-[River:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(len(most(river(traverse_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),most(B,C,(river(B),traverse(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="442">
<nl lang="en">
What is the longest river ?
</nl>
<nl lang="es">
que es el rio mas largo en los united states ?
</nl>
<nl lang="ja">
beikoku no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
birlesik devletler in en uzun nehri nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJS longest) (NN river))))
</syn>
<syn lang="es">
(S que es el rio mas largo en los united states)
</syn>
<syn lang="ja">
(S beikoku no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S birlesik devletler in en uzun nehri nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,river(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="443">
<nl lang="en">
What is the longest river flowing through New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (VP (VBG flowing) (PP (IN through) (NP (NNP New) (NNP York)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] flowing-[River:3] through-[River:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),const(B,stateid('new york')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="444">
<nl lang="en">
What is the longest river in America ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP America))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] America-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="445">
<nl lang="en">
What is the longest river in California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="446">
<nl lang="en">
What is the longest river in Florida ?
</nl>
<nl lang="es">
que es el rio mas largo en florida ?
</nl>
<nl lang="ja">
furorida no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
florida daki en uzun nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP Florida))))))
</syn>
<syn lang="es">
(S que es el rio mas largo en florida)
</syn>
<syn lang="ja">
(S furorida no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S florida daki en uzun nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] Florida-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('florida')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(florida)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="447">
<nl lang="en">
What is the longest river in Mississippi ?
</nl>
<nl lang="es">
que es el rio mas largo en mississippi ?
</nl>
<nl lang="ja">
mishishippi de mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi nin en uzun nehri nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP Mississippi))))))
</syn>
<syn lang="es">
(S que es el rio mas largo en mississippi)
</syn>
<syn lang="ja">
(S mishishippi de mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi nin en uzun nehri nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] Mississippi-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(mississippi)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="448">
<nl lang="en">
What is the longest river in New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP New) (NNP York))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] New-[StateName:5] York-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('new york')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid('new york')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="449">
<nl lang="en">
What is the longest river in Pennsylvania ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP Pennsylvania))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] Pennsylvania-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('pennsylvania')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(pennsylvania)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="450">
<nl lang="en">
What is the longest river in Texas ?
</nl>
<nl lang="es">
que es el rio mas largo en texas ?
</nl>
<nl lang="ja">
tekisasu no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
texas daki en uzun nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<syn lang="es">
(S que es el rio mas largo en texas)
</syn>
<syn lang="ja">
(S tekisasu no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S texas daki en uzun nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="451">
<nl lang="en">
What is the longest river in the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] the-[State:4] largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),largest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="452">
<nl lang="en">
What is the longest river in the smallest state in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NP (DT the) (JJS smallest) (NN state)) (PP (IN in) (NP (DT the) (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] the-[State:4] smallest-[State:4] state-[State:5] in-[State:6] the-[CountryName:8] USA-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="453">
<nl lang="en">
What is the longest river in the state with the highest point ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS highest) (NN point))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] the-[State:4] state-[State:4] with-[State:5] the-[Place:6] highest-[Place:6] point-[Place:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(state(loc_1(highest(place(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),state(B),loc(C,B),highest(C,place(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="454">
<nl lang="en">
What is the longest river in the state with the most major cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS most) (JJ major) (NNS cities))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] the-[State:5] state-[State:5] with-[State:6] the-[State:4] most-[State:4] major-[City:7] cities-[City:8])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(most(state(loc_1(major(city(all)))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="455">
<nl lang="en">
What is the longest river in the states that border Nebraska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Nebraska))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] the-[State:4] states-[State:4] that-[State:5] border-[State:5] Nebraska-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(state(next_to_2(stateid('nebraska')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="456">
<nl lang="en">
What is the longest river in the United States ?
</nl>
<nl lang="es">
que es el rio mas largo en los united states ?
</nl>
<nl lang="ja">
beikoku no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
birlesik devletler in en uzun nehri nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<syn lang="es">
(S que es el rio mas largo en los united states)
</syn>
<syn lang="ja">
(S beikoku no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S birlesik devletler in en uzun nehri nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="457">
<nl lang="en">
What is the longest river in the US ?
</nl>
<nl lang="es">
que es el rio mas largo en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo nagai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en uzun nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que es el rio mas largo en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo nagai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en uzun nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="458">
<nl lang="en">
What is the longest river that does not run through Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (SBAR (WHNP (WDT that)) (S (VBZ does) (RB not) (VP (VB run) (PP (IN through) (NP (NNP Texas)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:3] that-[River:2] does-[River:2] not-[River:2] run-[River:4] through-[River:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(longest(exclude(river(all), traverse_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),not((traverse(A,B),const(B,stateid(texas)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
<node id="4"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="459">
<nl lang="en">
What is the longest river that flows through a state that borders Indiana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ flows) (PP (IN through) (NP (NP (DT a) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Indiana)))))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] that-[River:3] flows-[River:3] through-[River:3] a-[State:4] state-[State:4] that-[State:5] borders-[State:5] Indiana-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(state(next_to_2(stateid('indiana')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(indiana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="460">
<nl lang="en">
What is the longest river that flows through Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ flows) (PP (IN through) (NP (NNP Colorado)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] that-[River:3] flows-[River:3] through-[River:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),const(B,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="461">
<nl lang="en">
What is the longest river that passes the states that border the state that borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ passes) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states))))))))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] that-[River:3] passes-[River:3] the-[State:4] states-[State:4] that-[State:5] border-[State:5] the-[State:7] state-[State:7] that-[State:8] borders-[State:8] the-[State:6] most-[State:6] states-[State:9])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(state(next_to_2(most(state(next_to_2(state(all))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),most(C,D,(state(C),next_to(C,D),state(D))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="462">
<nl lang="en">
What is the longest river that runs through a state that borders Tennessee ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBZ runs) (PP (IN through) (NP (NP (DT a) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Tennessee)))))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] that-[River:3] runs-[River:3] through-[River:3] a-[State:4] state-[State:4] that-[State:5] borders-[State:5] Tennessee-[StateName:7])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(traverse_2(state(next_to_2(stateid('tennessee')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid(tennessee)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="463">
<nl lang="en">
What is the lowest elevation in Pennsylvania ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN elevation)) (PP (IN in) (NP (NNP Pennsylvania))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] elevation-[Place:2] in-[Place:3] Pennsylvania-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('pennsylvania')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(pennsylvania)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="464">
<nl lang="en">
What is the lowest point in Arkansas ?
</nl>
<nl lang="es">
que es el punto mas bajo en arkansas ?
</nl>
<nl lang="ja">
aakansaa no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
arkansas daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Arkansas))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en arkansas)
</syn>
<syn lang="ja">
(S aakansaa no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S arkansas daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Arkansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('arkansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(arkansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="465">
<nl lang="en">
What is the lowest point in California ?
</nl>
<nl lang="es">
que es el punto mas bajo en california ?
</nl>
<nl lang="ja">
karifuorunia no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
california daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP California))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en california)
</syn>
<syn lang="ja">
(S karifuorunia no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S california daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] California-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('california')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="466">
<nl lang="en">
What is the lowest point in Louisiana ?
</nl>
<nl lang="es">
que es el punto mas bajo en louisiana ?
</nl>
<nl lang="ja">
ruijiana no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
louisiana daki en alcak nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Louisiana))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en louisiana)
</syn>
<syn lang="ja">
(S ruijiana no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S louisiana daki en alcak nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Louisiana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('louisiana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(louisiana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="467">
<nl lang="en">
What is the lowest point in Massachusetts ?
</nl>
<nl lang="es">
que es el punto mas bajo en massachusetts ?
</nl>
<nl lang="ja">
masachuusettsu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
massachusetts daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Massachusetts))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en massachusetts)
</syn>
<syn lang="ja">
(S masachuusettsu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S massachusetts daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Massachusetts-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('massachusetts')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(massachusetts)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="468">
<nl lang="en">
What is the lowest point in Mississippi ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Mississippi))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Mississippi-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(mississippi)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="469">
<nl lang="en">
What is the lowest point in Nebraska in meters ?
</nl>
<nl lang="es">
que es el punto mas bajo en nebraska en metros ?
</nl>
<nl lang="ja">
neburasuka no mottomo hikui chiten wa nan metoru desu ka ?
</nl>
<nl lang="tr">
nebraska daki en alcak nokta metre olarak nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Nebraska)))) (PP (IN in) (NP (NNS meters))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en nebraska en metros)
</syn>
<syn lang="ja">
(S neburasuka no mottomo hikui chiten wa nan metoru desu ka)
</syn>
<syn lang="tr">
(S nebraska daki en alcak nokta metre olarak nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Nebraska-[StateName:5] in-[Place:1] meters-[Place:1])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('nebraska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="470">
<nl lang="en">
What is the lowest point in Oregon ?
</nl>
<nl lang="es">
que es el punto mas bajo en oregon ?
</nl>
<nl lang="ja">
oregon no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
oregon daki en alcak nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Oregon))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en oregon)
</syn>
<syn lang="ja">
(S oregon no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S oregon daki en alcak nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Oregon-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('oregon')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(oregon)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="471">
<nl lang="en">
What is the lowest point in Texas ?
</nl>
<nl lang="es">
que es el punto mas bajo en texas ?
</nl>
<nl lang="ja">
tekisasu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
texas daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en texas)
</syn>
<syn lang="ja">
(S tekisasu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S texas daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="472">
<nl lang="en">
What is the lowest point in the state of California ?
</nl>
<nl lang="es">
que es el punto mas bajo en el estado de california ?
</nl>
<nl lang="ja">
karifuorunia no shuu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
california eyaletinin en alcak noktasi nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP California))))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en el estado de california)
</syn>
<syn lang="ja">
(S karifuorunia no shuu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S california eyaletinin en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] state-[State:4] of-[State:4] California-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),state(B),const(B,stateid(california)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="473">
<nl lang="en">
What is the lowest point in the state of Texas ?
</nl>
<nl lang="es">
que es el punto mas bajo en el estado de texas ?
</nl>
<nl lang="ja">
tekisasu no shuu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
texas eyaletinin en alcak noktasi nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN of) (NP (NNP Texas))))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en el estado de texas)
</syn>
<syn lang="ja">
(S tekisasu no shuu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S texas eyaletinin en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] the-[State:4] state-[State:4] of-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),state(B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="474">
<nl lang="en">
What is the lowest point in the United States ?
</nl>
<nl lang="es">
que es el punto mas bajo en los united states ?
</nl>
<nl lang="ja">
beikoku no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
birlesik devletler deki en alcak nokta nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo en los united states)
</syn>
<syn lang="ja">
(S beikoku no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S birlesik devletler deki en alcak nokta nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="475">
<nl lang="en">
What is the lowest point in USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="476">
<nl lang="en">
What is the lowest point in Wisconsin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Wisconsin))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Wisconsin-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('wisconsin')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(wisconsin)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="477">
<nl lang="en">
What is the lowest point of all states through which the Colorado river runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN of) (NP (NP (DT all) (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Colorado) (NN river)) (VP (VBZ runs) (PP (IN through))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] of-[Place:3] all-[State:4] states-[State:4] through-[State:5] which-[State:5] the-[River:6] Colorado-[RiverName:8] river-[River:6] runs-[State:5] through-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),state(B),const(C,riverid(colorado)),river(C),traverse(C,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="8"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="478">
<nl lang="en">
What is the lowest point of Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN of) (NP (NNP Colorado))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] of-[Place:3] Colorado-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(colorado)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="479">
<nl lang="en">
What is the lowest point of the state with the largest area ?
</nl>
<nl lang="es">
que es el punto mas bajo de el estado con la area mas grande ?
</nl>
<nl lang="ja">
mottomo ookii chiiki ga aru shuu no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
en genis alana sahip eyaletin en alcak noktasi nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN area))))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo de el estado con la area mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii chiiki ga aru shuu no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S en genis alana sahip eyaletin en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] of-[Place:3] the-[State:5] state-[State:5] with-[State:4] the-[State:4] largest-[State:4] area-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(largest_one(area_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),largest(C,(state(B),area(B,C))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="480">
<nl lang="en">
What is the lowest point of the US ?
</nl>
<nl lang="es">
que es el punto mas bajo de los us ?
</nl>
<nl lang="ja">
beikoku no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
us in en alcak noktasi nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN of) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que es el punto mas bajo de los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S us in en alcak noktasi nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] of-[Place:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="481">
<nl lang="en">
What is the major cities in Montana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Montana))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] major-[City:1] cities-[City:2] in-[City:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="482">
<nl lang="en">
What is the maximum elevation of San Francisco ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN maximum) (NN elevation)) (PP (IN of) (NP (NNP San) (NNP Francisco))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] maximum-[Place:1] elevation-[Place:2] of-[Place:3] San-[CityName:5] Francisco-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(cityid('san francisco', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,cityid('san francisco',_)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' san francisco ' }) </node>
</mrl-parse>
</example>

<example id="483">
<nl lang="en">
What is the most dense state in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ dense)) (NN state)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] most-[State:1] dense-[State:1] state-[State:2] in-[State:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(density(A,B),state(A),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="484">
<nl lang="en">
What is the most populated capital in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ populated)) (NN capital)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] most-[City:1] populated-[City:1] capital-[City:2] in-[City:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(capital(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),capital(A),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="485">
<nl lang="en">
What is the most populated state bordering Oklahoma ?
</nl>
<nl lang="es">
que es el estado mas poblado bordeando a oklahoma ?
</nl>
<nl lang="ja">
okurahoma ni rinsetsu suru mottomo ookii jinkou ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
oklahoma ya siniri olan en kalabalik eyalet nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ populated)) (NN state)) (VP (VBG bordering) (NP (NNP Oklahoma))))))
</syn>
<syn lang="es">
(S que es el estado mas poblado bordeando a oklahoma)
</syn>
<syn lang="ja">
(S okurahoma ni rinsetsu suru mottomo ookii jinkou ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S oklahoma ya siniri olan en kalabalik eyalet nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] most-[State:1] populated-[State:1] state-[State:2] bordering-[State:3] Oklahoma-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('oklahoma'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A),next_to(A,C),const(C,stateid(oklahoma)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' oklahoma ' }) </node>
</mrl-parse>
</example>

<example id="486">
<nl lang="en">
What is the most populous city ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (ADJP (RBS most) (JJ populous)) (NN city))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] most-[City:1] populous-[City:1] city-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),city(A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="487">
<nl lang="en">
What is the most populous city in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ populous)) (NN city)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] most-[City:1] populous-[City:1] city-[City:2] in-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(B,largest(A,(population(B,A),city(B),loc(B,C),const(C,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="488">
<nl lang="en">
What is the most populous city in Wyoming ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ populous)) (NN city)) (PP (IN in) (NP (NNP Wyoming))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] most-[City:1] populous-[City:1] city-[City:2] in-[City:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('wyoming'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),city(A),loc(A,C),const(C,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="489">
<nl lang="en">
What is the most populous state ?
</nl>
<nl lang="es">
que es el estado mas poblado ?
</nl>
<nl lang="ja">
mottomo jinkou no ooi shuu wa nan desu ka ?
</nl>
<nl lang="tr">
en kalabalik eyalet nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (ADJP (RBS most) (JJ populous)) (NN state))))
</syn>
<syn lang="es">
(S que es el estado mas poblado)
</syn>
<syn lang="ja">
(S mottomo jinkou no ooi shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S en kalabalik eyalet nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] most-[State:1] populous-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="490">
<nl lang="en">
What is the most populous state in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ populous)) (NN state)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] most-[State:1] populous-[State:1] state-[State:2] in-[State:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="491">
<nl lang="en">
What is the most populous state through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ populous)) (NN state)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] most-[State:1] populous-[State:1] state-[State:2] through-[State:3] which-[State:3] the-[RiverName:5] Mississippi-[RiverName:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),state(A),const(C,riverid(mississippi)),traverse(C,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="492">
<nl lang="en">
What is the name of the state with the lowest point ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS lowest) (NN point))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Query:0] name-[Query:0] of-[Query:0] the-[State:1] state-[State:1] with-[State:2] the-[Place:3] lowest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),lowest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="493">
<nl lang="en">
What is the number of neighboring states for Kentucky ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN number)) (PP (IN of) (NP (NP (VBG neighboring) (NNS states)) (PP (IN for) (NP (NNP Kentucky))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] number-[Num:1] of-[Num:1] neighboring-[State:3] states-[State:2] for-[State:3] Kentucky-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(count(state(next_to_2(stateid('kentucky')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,count(B,(state(B),next_to(B,C),const(C,stateid(kentucky))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ count ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="494">
<nl lang="en">
What is the population density in the state with capital Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (NN capital)) (NP (NNP Austin)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] in-[Num:1] the-[State:2] state-[State:2] with-[State:3] capital-[City:4] Austin-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(state(loc_1(capital(cityid('austin', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),state(B),loc(C,B),capital(C),const(C,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="495">
<nl lang="en">
What is the population density of Maine ?
</nl>
<nl lang="es">
que es la densidad de poblacion de maine ?
</nl>
<nl lang="ja">
meen no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
maine in nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (NNP Maine))))))
</syn>
<syn lang="es">
(S que es la densidad de poblacion de maine)
</syn>
<syn lang="ja">
(S meen no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S maine in nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] Maine-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('maine')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="496">
<nl lang="en">
What is the population density of South Dakota ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (NNP South) (NNP Dakota))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] South-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('south dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="497">
<nl lang="en">
What is the population density of Texas ?
</nl>
<nl lang="es">
que es la densidad de poblacion de texas ?
</nl>
<nl lang="ja">
tekisasu no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
texas in nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<syn lang="es">
(S que es la densidad de poblacion de texas)
</syn>
<syn lang="ja">
(S tekisasu no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S texas in nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="498">
<nl lang="en">
What is the population density of the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] the-[State:2] largest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(largest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="499">
<nl lang="en">
What is the population density of the smallest state ?
</nl>
<nl lang="es">
que es la densidad de poblacion de el estado mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
en kucuk eyaletin nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (DT the) (JJS smallest) (NN state))))))
</syn>
<syn lang="es">
(S que es la densidad de poblacion de el estado mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S en kucuk eyaletin nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] the-[State:2] smallest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(smallest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),smallest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="500">
<nl lang="en">
What is the population density of the state with the smallest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN area))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] the-[State:3] state-[State:3] with-[State:2] the-[State:2] smallest-[State:2] area-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(smallest_one(area_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),smallest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="501">
<nl lang="en">
What is the population density of the state with the smallest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN population))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] the-[State:3] state-[State:3] with-[State:2] the-[State:2] smallest-[State:2] population-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(smallest_one(population_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),smallest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="502">
<nl lang="en">
What is the population density of Wyoming ?
</nl>
<nl lang="es">
que es la densidad de poblacion de wyoming ?
</nl>
<nl lang="ja">
waiomingu no jinkou no mitsudo wa nan desu ka ?
</nl>
<nl lang="tr">
wyoming in nufus yogunlugu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population) (NN density)) (PP (IN of) (NP (NNP Wyoming))))))
</syn>
<syn lang="es">
(S que es la densidad de poblacion de wyoming)
</syn>
<syn lang="ja">
(S waiomingu no jinkou no mitsudo wa nan desu ka)
</syn>
<syn lang="tr">
(S wyoming in nufus yogunlugu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] density-[Num:1] of-[Num:1] Wyoming-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(stateid('wyoming')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),const(B,stateid(wyoming))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="503">
<nl lang="en">
What is the population in Boston ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN in) (NP (NNP Boston))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] in-[Num:1] Boston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boston ' }) </node>
</mrl-parse>
</example>

<example id="504">
<nl lang="en">
What is the population of Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Alaska))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Alaska-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('alaska')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="505">
<nl lang="en">
What is the population of Arizona ?
</nl>
<nl lang="es">
que es la poblacion de arizona ?
</nl>
<nl lang="ja">
arizona no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
arizona nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Arizona))))))
</syn>
<syn lang="es">
(S que es la poblacion de arizona)
</syn>
<syn lang="ja">
(S arizona no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S arizona nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Arizona-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('arizona')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="506">
<nl lang="en">
What is the population of Atlanta ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Atlanta))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Atlanta-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('atlanta', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(atlanta,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' atlanta ' }) </node>
</mrl-parse>
</example>

<example id="507">
<nl lang="en">
What is the population of Atlanta GA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Atlanta) (NNP GA))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Atlanta-[CityName:3] GA-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('atlanta', 'ga')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(atlanta,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' atlanta ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' ga ' }) </node>
</mrl-parse>
</example>

<example id="508">
<nl lang="en">
What is the population of Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Austin))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="509">
<nl lang="en">
What is the population of Austin Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Austin)) (NP (NNP Texas)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Austin-[CityName:3] Texas-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('austin', 'tx')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(austin,tx))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' tx ' }) </node>
</mrl-parse>
</example>

<example id="510">
<nl lang="en">
What is the population of Boston Massachusetts ?
</nl>
<nl lang="es">
que es la poblacion de boston massachusetts ?
</nl>
<nl lang="ja">
masachuusettsu no bosuton no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
boston massachusetts in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Boston)) (NP (NNP Massachusetts)))))))
</syn>
<syn lang="es">
(S que es la poblacion de boston massachusetts)
</syn>
<syn lang="ja">
(S masachuusettsu no bosuton no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S boston massachusetts in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Boston-[CityName:3] Massachusetts-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boston', 'ma')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boston,ma))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' boston ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' ma ' }) </node>
</mrl-parse>
</example>

<example id="511">
<nl lang="en">
What is the population of Boulder ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Boulder))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Boulder-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('boulder', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(boulder,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' boulder ' }) </node>
</mrl-parse>
</example>

<example id="512">
<nl lang="en">
What is the population of California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="513">
<nl lang="en">
What is the population of Dallas ?
</nl>
<nl lang="es">
que es la poblacion de dallas ?
</nl>
<nl lang="ja">
darasu no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
dallas in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Dallas))))))
</syn>
<syn lang="es">
(S que es la poblacion de dallas)
</syn>
<syn lang="ja">
(S darasu no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S dallas in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Dallas-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('dallas', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(dallas,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="514">
<nl lang="en">
What is the population of Denver ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Denver))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Denver-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('denver', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(denver,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' denver ' }) </node>
</mrl-parse>
</example>

<example id="515">
<nl lang="en">
What is the population of Erie Pennsylvania ?
</nl>
<nl lang="es">
que es la poblacion de erie pennsylvania ?
</nl>
<nl lang="ja">
penshirubenia no eri no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
erie pennsylvania in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Erie)) (NP (NNP Pennsylvania)))))))
</syn>
<syn lang="es">
(S que es la poblacion de erie pennsylvania)
</syn>
<syn lang="ja">
(S penshirubenia no eri no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S erie pennsylvania in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Erie-[CityName:3] Pennsylvania-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('erie', 'pa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(erie,pa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' erie ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' pa ' }) </node>
</mrl-parse>
</example>

<example id="516">
<nl lang="en">
What is the population of Hawaii ?
</nl>
<nl lang="es">
que es la poblacion de hawaii ?
</nl>
<nl lang="ja">
hawai no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
hawaii nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Hawaii))))))
</syn>
<syn lang="es">
(S que es la poblacion de hawaii)
</syn>
<syn lang="ja">
(S hawai no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S hawaii nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Hawaii-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('hawaii')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="517">
<nl lang="en">
What is the population of Houston ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Houston))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Houston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('houston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(houston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' houston ' }) </node>
</mrl-parse>
</example>

<example id="518">
<nl lang="en">
What is the population of Idaho ?
</nl>
<nl lang="es">
que es la poblacion de idaho ?
</nl>
<nl lang="ja">
aidahou no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
idaho nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Idaho))))))
</syn>
<syn lang="es">
(S que es la poblacion de idaho)
</syn>
<syn lang="ja">
(S aidahou no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S idaho nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Idaho-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('idaho')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(idaho))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="519">
<nl lang="en">
What is the population of Illinois ?
</nl>
<nl lang="es">
que es la poblacion de illinois ?
</nl>
<nl lang="ja">
irinoi no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
illinois nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Illinois))))))
</syn>
<syn lang="es">
(S que es la poblacion de illinois)
</syn>
<syn lang="ja">
(S irinoi no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S illinois nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Illinois-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('illinois')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="520">
<nl lang="en">
What is the population of Maine ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Maine))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Maine-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('maine')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="521">
<nl lang="en">
What is the population of Maryland ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Maryland))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Maryland-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('maryland')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(maryland))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="522">
<nl lang="en">
What is the population of Minnesota ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Minnesota))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Minnesota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('minnesota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(minnesota))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' minnesota ' }) </node>
</mrl-parse>
</example>

<example id="523">
<nl lang="en">
What is the population of Montana ?
</nl>
<nl lang="es">
que es la poblacion de montana ?
</nl>
<nl lang="ja">
montana no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
montana in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Montana))))))
</syn>
<syn lang="es">
(S que es la poblacion de montana)
</syn>
<syn lang="ja">
(S montana no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S montana in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Montana-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('montana')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="524">
<nl lang="en">
What is the population of New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP New) (NNP Mexico))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] New-[StateName:3] Mexico-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new mexico')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="525">
<nl lang="en">
What is the population of New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP New) (NNP York))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] New-[StateName:3] York-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('new york')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="526">
<nl lang="en">
What is the population of New York City ?
</nl>
<nl lang="es">
que es la poblacion de la ciudad new york ?
</nl>
<nl lang="ja">
nyuu yooku toshi no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
new york sehrinin nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP New) (NNP York) (NNP City))))))
</syn>
<syn lang="es">
(S que es la poblacion de la ciudad new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku toshi no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S new_york sehrinin nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] New-[CityName:4] York-[CityName:4] City-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(city(cityid('new york', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid('new york',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="527">
<nl lang="en">
What is the population of Oregon ?
</nl>
<nl lang="es">
que es la poblacion de oregon ?
</nl>
<nl lang="ja">
oregon no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
oregon nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Oregon))))))
</syn>
<syn lang="es">
(S que es la poblacion de oregon)
</syn>
<syn lang="ja">
(S oregon no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S oregon nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Oregon-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('oregon')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(oregon))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="528">
<nl lang="en">
What is the population of Portland Maine ?
</nl>
<nl lang="es">
que es la poblacion de portland maine ?
</nl>
<nl lang="ja">
meen no porutorando no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
portland maine in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Portland)) (NP (NNP Maine)))))))
</syn>
<syn lang="es">
(S que es la poblacion de portland maine)
</syn>
<syn lang="ja">
(S meen no porutorando no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S portland maine in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Portland-[CityName:3] Maine-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('portland', 'me')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(portland,me))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' portland ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' me ' }) </node>
</mrl-parse>
</example>

<example id="529">
<nl lang="en">
What is the population of Rhode Island ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Rhode) (NNP Island))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Rhode-[StateName:3] Island-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('rhode island')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="530">
<nl lang="en">
What is the population of Sacramento ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Sacramento))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Sacramento-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('sacramento', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(sacramento,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' sacramento ' }) </node>
</mrl-parse>
</example>

<example id="531">
<nl lang="en">
What is the population of San Antonio ?
</nl>
<nl lang="es">
que es la poblacion de san antonio ?
</nl>
<nl lang="ja">
sanantonio no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
san antonio nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP San) (NNP Antonio))))))
</syn>
<syn lang="es">
(S que es la poblacion de san_antonio)
</syn>
<syn lang="ja">
(S sanantonio no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S san_antonio nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] San-[CityName:3] Antonio-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('san antonio', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid('san antonio',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san antonio ' }) </node>
</mrl-parse>
</example>

<example id="532">
<nl lang="en">
What is the population of Seattle ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Seattle))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Seattle-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('seattle', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(seattle,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' seattle ' }) </node>
</mrl-parse>
</example>

<example id="533">
<nl lang="en">
What is the population of Seattle Washington ?
</nl>
<nl lang="es">
que es la poblacion de seattle washington ?
</nl>
<nl lang="ja">
washinton no shiatoru no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
seattle washington in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Seattle)) (NP (NNP Washington)))))))
</syn>
<syn lang="es">
(S que es la poblacion de seattle washington)
</syn>
<syn lang="ja">
(S washinton no shiatoru no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S seattle washington in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Seattle-[CityName:3] Washington-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('seattle', 'wa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(seattle,wa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' seattle ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' wa ' }) </node>
</mrl-parse>
</example>

<example id="534">
<nl lang="en">
What is the population of South Dakota ?
</nl>
<nl lang="es">
que es la poblacion de south dakota ?
</nl>
<nl lang="ja">
sausu dakota no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
south dakota nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP South) (NNP Dakota))))))
</syn>
<syn lang="es">
(S que es la poblacion de south_dakota)
</syn>
<syn lang="ja">
(S sausu_dakota no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S south_dakota nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] South-[StateName:3] Dakota-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('south dakota')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="535">
<nl lang="en">
What is the population of Springfield Missouri ?
</nl>
<nl lang="es">
que es la poblacion de springfield missouri ?
</nl>
<nl lang="ja">
mizuuri no supuringufiirudo no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
springfield missouri in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Springfield)) (NP (NNP Missouri)))))))
</syn>
<syn lang="es">
(S que es la poblacion de springfield missouri)
</syn>
<syn lang="ja">
(S mizuuri no supuringufiirudo no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S springfield missouri in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Springfield-[CityName:3] Missouri-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('springfield', 'mo')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(springfield,mo))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' springfield ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' mo ' }) </node>
</mrl-parse>
</example>

<example id="536">
<nl lang="en">
What is the population of Springfield South Dakota ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Springfield)) (NP (NNP South) (NNP Dakota)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Springfield-[CityName:3] South-[StateAbbrev:4] Dakota-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('springfield', 'sd')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(springfield,sd))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' springfield ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' sd ' }) </node>
</mrl-parse>
</example>

<example id="537">
<nl lang="en">
What is the population of Tempe Arizona ?
</nl>
<nl lang="es">
que es la poblacion de tempe arizona ?
</nl>
<nl lang="ja">
arizona no tenpi no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
tempe arizona in nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Tempe)) (NP (NNP Arizona)))))))
</syn>
<syn lang="es">
(S que es la poblacion de tempe arizona)
</syn>
<syn lang="ja">
(S arizona no tenpi no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S tempe arizona in nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Tempe-[CityName:3] Arizona-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('tempe', 'az')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(tempe,az))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' tempe ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' az ' }) </node>
</mrl-parse>
</example>

<example id="538">
<nl lang="en">
What is the population of Texas ?
</nl>
<nl lang="es">
que es la poblacion de texas ?
</nl>
<nl lang="ja">
tekisasu no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
texas nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<syn lang="es">
(S que es la poblacion de texas)
</syn>
<syn lang="ja">
(S tekisasu no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S texas nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="539">
<nl lang="en">
What is the population of the capital of the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (DT the) (JJS largest) (NN state))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[City:2] capital-[City:2] of-[City:3] the-[State:4] largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),largest(C,state(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="540">
<nl lang="en">
What is the population of the capital of the largest state through which the Mississippi runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NP (DT the) (JJS largest) (NN state)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs)))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[City:2] capital-[City:2] of-[City:3] the-[State:4] largest-[State:4] state-[State:5] through-[State:6] which-[State:6] the-[RiverName:8] Mississippi-[RiverName:8] runs-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(largest(state(traverse_1(riverid('mississippi'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),largest(C,(state(C),const(D,riverid(mississippi)),traverse(D,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="8"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="541">
<nl lang="en">
What is the population of the capital of the smallest state ?
</nl>
<nl lang="es">
que es la poblacion de la capital de el estado mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu no shuto no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
en kucuk eyaletin baskentinin nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (DT the) (JJS smallest) (NN state))))))))
</syn>
<syn lang="es">
(S que es la poblacion de la capital de el estado mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu no shuto no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S en kucuk eyaletin baskentinin nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[City:2] capital-[City:2] of-[City:3] the-[State:4] smallest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(capital(loc_2(smallest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),capital(B),loc(B,C),smallest(C,state(C))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="542">
<nl lang="en">
What is the population of the largest city in the state with the largest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN area))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[City:2] largest-[City:2] city-[City:3] in-[City:4] the-[State:6] state-[State:6] with-[State:5] the-[State:5] largest-[State:5] area-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(city(loc_2(largest_one(area_1(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,(city(B),loc(B,C),largest(D,(state(C),area(C,D)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="543">
<nl lang="en">
What is the population of the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[State:2] largest-[State:2] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="544">
<nl lang="en">
What is the population of the largest state that borders Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (JJS largest) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[State:2] largest-[State:2] state-[State:3] that-[State:4] borders-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(B,(state(B),next_to(B,C),const(C,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="545">
<nl lang="en">
What is the population of the major cities in Wisconsin ?
</nl>
<nl lang="es">
que es la poblacion de las ciudades mayores en wisconsin ?
</nl>
<nl lang="ja">
uisukonshin ni wa ookina toshi no jinkou ga nan desu ka ?
</nl>
<nl lang="tr">
wisconsin deki baslica sehirlerin nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (JJ major) (NNS cities)) (PP (IN in) (NP (NNP Wisconsin))))))))
</syn>
<syn lang="es">
(S que es la poblacion de las ciudades mayores en wisconsin)
</syn>
<syn lang="ja">
(S uisukonshin ni wa ookina toshi no jinkou ga nan desu ka)
</syn>
<syn lang="tr">
(S wisconsin deki baslica sehirlerin nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[City:2] major-[City:2] cities-[City:3] in-[City:4] Wisconsin-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(major(city(loc_2(stateid('wisconsin'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),major(B),city(B),loc(B,C),const(C,stateid(wisconsin))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="546">
<nl lang="en">
What is the population of the smallest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (DT the) (JJS smallest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:2] population-[Num:2] of-[Num:2] the-[Num:1] smallest-[Num:1] state-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(population(B,A),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ smallest ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="547">
<nl lang="en">
What is the population of the state that borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states))))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[State:3] state-[State:3] that-[State:4] borders-[State:4] the-[State:2] most-[State:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(most(state(next_to_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="548">
<nl lang="en">
What is the population of the state with the highest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS highest) (NN population) (NN density))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[State:3] state-[State:3] with-[State:2] the-[State:2] highest-[State:2] population-[State:2] density-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest_one(density_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(C,(state(B),density(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="549">
<nl lang="en">
What is the population of the state with the largest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN area))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] the-[State:3] state-[State:3] with-[State:2] the-[State:2] largest-[State:2] area-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(largest_one(area_1(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),largest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="3"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="550">
<nl lang="en">
What is the population of Tucson ?
</nl>
<nl lang="es">
que es la poblacion de tucson ?
</nl>
<nl lang="ja">
tsuuson no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
tucson nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Tucson))))))
</syn>
<syn lang="es">
(S que es la poblacion de tucson)
</syn>
<syn lang="ja">
(S tsuuson no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S tucson nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Tucson-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('tucson', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(tucson,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' tucson ' }) </node>
</mrl-parse>
</example>

<example id="551">
<nl lang="en">
What is the population of Utah ?
</nl>
<nl lang="es">
que es la poblacion de utah ?
</nl>
<nl lang="ja">
yuutaa no jinkou wa nan desu ka ?
</nl>
<nl lang="tr">
utah nun nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Utah))))))
</syn>
<syn lang="es">
(S que es la poblacion de utah)
</syn>
<syn lang="ja">
(S yuutaa no jinkou wa nan desu ka)
</syn>
<syn lang="tr">
(S utah nun nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Utah-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('utah')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="552">
<nl lang="en">
What is the population of Washington ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NNP Washington))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Washington-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(stateid('washington')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,stateid(washington))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="553">
<nl lang="en">
What is the population of Washington DC ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN population)) (PP (IN of) (NP (NP (NNP Washington)) (NP (NNP DC)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] population-[Num:1] of-[Num:1] Washington-[CityName:3] DC-[StateAbbrev:4])
</augsyn>
<mrl lang="geo-funql">
answer(population_1(cityid('washington', 'dc')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(population(B,A),const(B,cityid(washington,dc))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ population_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="3"> *n:CityName -> ({ ' washington ' }) </node>
<node id="4"> *n:StateAbbrev -> ({ ' dc ' }) </node>
</mrl-parse>
</example>

<example id="554">
<nl lang="en">
What is the river that cross over Ohio ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN river)) (SBAR (WHNP (WDT that)) (S (VP (VBP cross) (PP (IN over) (NP (NNP Ohio)))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] river-[River:1] that-[River:2] cross-[River:2] over-[River:2] Ohio-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="555">
<nl lang="en">
What is the shortest river ?
</nl>
<nl lang="es">
que es el rio mas corto ?
</nl>
<nl lang="ja">
mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
en kisa nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (JJS shortest) (NN river))))
</syn>
<syn lang="es">
(S que es el rio mas corto)
</syn>
<syn lang="ja">
(S mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,river(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="556">
<nl lang="en">
What is the shortest river in Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (NNP Alaska))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2] in-[River:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(alaska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="557">
<nl lang="en">
What is the shortest river in Iowa ?
</nl>
<nl lang="es">
que es el rio mas corto en iowa ?
</nl>
<nl lang="ja">
aiowa no mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
iowa daki en kisa nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (NNP Iowa))))))
</syn>
<syn lang="es">
(S que es el rio mas corto en iowa)
</syn>
<syn lang="ja">
(S aiowa no mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa daki en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2] in-[River:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(iowa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="558">
<nl lang="en">
What is the shortest river in Nebraska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (NNP Nebraska))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2] in-[River:3] Nebraska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('nebraska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(nebraska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nebraska ' }) </node>
</mrl-parse>
</example>

<example id="559">
<nl lang="en">
What is the shortest river in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2] in-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="560">
<nl lang="en">
What is the shortest river in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2] in-[River:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="561">
<nl lang="en">
What is the shortest river in the US ?
</nl>
<nl lang="es">
que es el rio mas corto en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
us deki en kisa nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que es el rio mas corto en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S us deki en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2] in-[River:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="562">
<nl lang="en">
What is the shortest river in the USA ?
</nl>
<nl lang="es">
que es el rio mas corto en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo mijikai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kisa nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS shortest) (NN river)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S que es el rio mas corto en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo mijikai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kisa nehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2] in-[River:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="563">
<nl lang="en">
What is the size of California ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN size)) (PP (IN of) (NP (NNP California))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] size-[Num:1] of-[Num:1] California-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('california')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(california))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="564">
<nl lang="en">
What is the size of Florida ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN size)) (PP (IN of) (NP (NNP Florida))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] size-[Num:1] of-[Num:1] Florida-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('florida')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="565">
<nl lang="en">
What is the size of Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN size)) (PP (IN of) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] size-[Num:1] of-[Num:1] Texas-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(size(stateid('texas')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="566">
<nl lang="en">
What is the size of the capital of Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN size)) (PP (IN of) (NP (NP (DT the) (NN capital)) (PP (IN of) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] size-[Num:1] of-[Num:1] the-[City:2] capital-[City:2] of-[City:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(size(capital(loc_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),capital(B),loc(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="567">
<nl lang="en">
What is the size of the largest state in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN size)) (PP (IN of) (NP (NP (DT the) (JJS largest) (NN state)) (PP (IN in) (NP (DT the) (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] size-[Num:1] of-[Num:1] the-[State:2] largest-[State:2] state-[State:3] in-[State:4] the-[CountryName:6] USA-[CountryName:6])
</augsyn>
<mrl lang="geo-funql">
answer(size(largest(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(size(B,A),largest(B,(state(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ size ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="5"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="6"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="568">
<nl lang="en">
What is the smallest city in Alaska ?
</nl>
<nl lang="es">
que es la ciudad mas pequena en alaska ?
</nl>
<nl lang="ja">
arasuka no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
alaska daki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN in) (NP (NNP Alaska))))))
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en alaska)
</syn>
<syn lang="ja">
(S arasuka no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S alaska daki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] in-[City:3] Alaska-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(alaska)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="569">
<nl lang="en">
What is the smallest city in Arkansas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN in) (NP (NNP Arkansas))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] in-[City:3] Arkansas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('arkansas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(arkansas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="570">
<nl lang="en">
What is the smallest city in Hawaii ?
</nl>
<nl lang="es">
que es la ciudad mas pequena en hawaii ?
</nl>
<nl lang="ja">
hawai no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
hawaii deki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN in) (NP (NNP Hawaii))))))
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en hawaii)
</syn>
<syn lang="ja">
(S hawai no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S hawaii deki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] in-[City:3] Hawaii-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('hawaii')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(hawaii)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="571">
<nl lang="en">
What is the smallest city in the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN in) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] in-[City:3] the-[State:4] largest-[State:4] state-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(largest(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),largest(B,state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="572">
<nl lang="en">
What is the smallest city in the US ?
</nl>
<nl lang="es">
que es la ciudad mas pequena en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] in-[City:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="573">
<nl lang="en">
What is the smallest city in the USA ?
</nl>
<nl lang="es">
que es la ciudad mas pequena en los usa ?
</nl>
<nl lang="ja">
beikoku no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en los usa)
</syn>
<syn lang="ja">
(S beikoku no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] in-[City:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="574">
<nl lang="en">
What is the smallest city in Washington ?
</nl>
<nl lang="es">
que es la ciudad mas pequena en washington ?
</nl>
<nl lang="ja">
washinton no mottomo chiisai toshi wa nan desu ka ?
</nl>
<nl lang="tr">
washington daki en kucuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN in) (NP (NNP Washington))))))
</syn>
<syn lang="es">
(S que es la ciudad mas pequena en washington)
</syn>
<syn lang="ja">
(S washinton no mottomo chiisai toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S washington daki en kucuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] in-[City:3] Washington-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(stateid('washington')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),const(B,stateid(washington)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' washington ' }) </node>
</mrl-parse>
</example>

<example id="575">
<nl lang="en">
What is the smallest city of the smallest state in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN city)) (PP (IN of) (NP (NP (DT the) (JJS smallest) (NN state)) (PP (IN in) (NP (DT the) (NNP US))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[City:1] smallest-[City:1] city-[City:2] of-[City:3] the-[State:4] smallest-[State:4] state-[State:5] in-[State:6] the-[CountryName:8] US-[CountryName:8])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(city(loc_2(smallest(state(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(city(A),loc(A,B),smallest(B,(state(B),loc(B,C),const(C,countryid(usa)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="576">
<nl lang="en">
What is the smallest state bordering Ohio ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (VP (VBG bordering) (NP (NNP Ohio))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2] bordering-[State:3] Ohio-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(next_to_2(stateid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(ohio)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="577">
<nl lang="en">
What is the smallest state bordering Wyoming ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (VP (VBG bordering) (NP (NNP Wyoming))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2] bordering-[State:3] Wyoming-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(next_to_2(stateid('wyoming')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(wyoming)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' wyoming ' }) </node>
</mrl-parse>
</example>

<example id="578">
<nl lang="en">
What is the smallest state by area ?
</nl>
<nl lang="es">
que es el estado mas pequeno por area ?
</nl>
<nl lang="ja">
chiiki de mottomo chiisai shuu wa nan desu ka ?
</nl>
<nl lang="tr">
alan acisindan en kucuk eyalet nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (PP (IN by) (NP (NN area))))))
</syn>
<syn lang="es">
(S que es el estado mas pequeno por area)
</syn>
<syn lang="ja">
(S chiiki de mottomo chiisai shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S alan acisindan en kucuk eyalet nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2] by-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="579">
<nl lang="en">
What is the smallest state in the USA ?
</nl>
<nl lang="es">
que es el estado mas pequeno en los usa ?
</nl>
<nl lang="ja">
amerika no mottomo chiisai shuu wa nan desu ka ?
</nl>
<nl lang="tr">
usa deki en kucuk eyalet nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (PP (IN in) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S que es el estado mas pequeno en los usa)
</syn>
<syn lang="ja">
(S amerika no mottomo chiisai shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S usa deki en kucuk eyalet nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2] in-[State:3] the-[CountryName:5] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="580">
<nl lang="en">
What is the smallest state that borders Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2] that-[State:3] borders-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="581">
<nl lang="en">
What is the smallest state that borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:3] that-[State:4] borders-[State:4] the-[State:2] most-[State:2] states-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(most(state(next_to_2(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,most(A,B,(state(A),next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="582">
<nl lang="en">
What is the smallest state that the Mississippi river runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (SBAR (WHNP (WDT that)) (S (NP (DT the) (NNP Mississippi) (NN river)) (VP (VBZ runs) (PP (IN through))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2] that-[State:3] the-[River:4] Mississippi-[RiverName:6] river-[River:4] runs-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(traverse_1(river(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="583">
<nl lang="en">
What is the smallest state through which the longest river runs ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS smallest) (NN state)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (JJS longest) (NN river)) (VP (VBZ runs)))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2] through-[State:3] which-[State:3] the-[River:4] longest-[River:4] river-[River:5] runs-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(traverse_1(longest(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,(state(A),longest(B,river(B)),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="584">
<nl lang="en">
What is the state that contains the highest point ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ contains) (NP (DT the) (JJS highest) (NN point))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] state-[State:1] that-[State:2] contains-[State:2] the-[Place:3] highest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="585">
<nl lang="en">
What is the state with the highest elevation in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (JJS highest) (NN elevation)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] state-[State:1] with-[State:2] the-[Place:3] highest-[Place:3] elevation-[Place:4] in-[Place:5] the-[CountryName:7] United-[CountryName:7] States-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="586">
<nl lang="en">
What is the state with the largest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN area))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:2] state-[State:2] with-[State:1] the-[State:1] largest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="587">
<nl lang="en">
What is the state with the largest density in USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (JJS largest) (NN density)) (PP (IN in) (NP (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:2] state-[State:2] with-[State:1] the-[State:1] largest-[State:1] density-[State:1] in-[State:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(loc_2(countryid('usa'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B),loc(A,C),const(C,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="588">
<nl lang="en">
What is the state with the largest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population) (NN density))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:2] state-[State:2] with-[State:1] the-[State:1] largest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="589">
<nl lang="en">
What is the state with the lowest point ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS lowest) (NN point))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:1] state-[State:1] with-[State:2] the-[Place:3] lowest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),lowest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="590">
<nl lang="en">
What is the state with the lowest population ?
</nl>
<nl lang="es">
que es el estado con la poblacion mas baja ?
</nl>
<nl lang="ja">
mottomo chiisai jinkou ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
en az nufuslu eyalet nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS lowest) (NN population))))))
</syn>
<syn lang="es">
(S que es el estado con la poblacion mas baja)
</syn>
<syn lang="ja">
(S mottomo chiisai jinkou ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S en az nufuslu eyalet nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:2] state-[State:2] with-[State:1] the-[State:1] lowest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="591">
<nl lang="en">
What is the state with the lowest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS lowest) (NN population) (NN density))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:2] state-[State:2] with-[State:1] the-[State:1] lowest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="592">
<nl lang="en">
What is the state with the smallest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN area))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[State:2] state-[State:2] with-[State:1] the-[State:1] smallest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="593">
<nl lang="en">
What is the tallest mountain in America ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS tallest) (NN mountain)) (PP (IN in) (NP (NNP America))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] tallest-[Place:1] mountain-[Place:2] in-[Place:3] America-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="594">
<nl lang="en">
What is the tallest mountain in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJS tallest) (NN mountain)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Place:1] tallest-[Place:1] mountain-[Place:2] in-[Place:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="595">
<nl lang="en">
What is the total area of the USA ?
</nl>
<nl lang="es">
que es la area total de los usa ?
</nl>
<nl lang="ja">
amerika no zentai no chiiki wa nan desu ka ?
</nl>
<nl lang="tr">
usa nin toplam yuzolcumu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN area)) (PP (IN of) (NP (DT the) (NNP USA))))))
</syn>
<syn lang="es">
(S que es la area total de los usa)
</syn>
<syn lang="ja">
(S amerika no zentai no chiiki wa nan desu ka)
</syn>
<syn lang="tr">
(S usa nin toplam yuzolcumu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] total-[Num:1] area-[Num:1] of-[Num:1] the-[CountryName:3] USA-[CountryName:3])
</augsyn>
<mrl lang="geo-funql">
answer(area_1(countryid('usa')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(area(B,A),const(B,countryid(usa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ area_1 ( *n:Country ) }) </node>
<node id="2"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="3"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="596">
<nl lang="en">
What is the total length of all rivers in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN length)) (PP (IN of) (NP (NP (DT all) (NNS rivers)) (PP (IN in) (NP (DT the) (NNP USA))))))))
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] total-[Num:1] length-[Num:2] of-[Num:2] all-[River:3] rivers-[River:3] in-[River:3] the-[River:3] USA-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(sum(len(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(len(C,B),river(C)),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="597">
<nl lang="en">
What is the total population of the states that border Texas ?
</nl>
<nl lang="es">
que es el total de la poblacion de los estados que bordean a texas ?
</nl>
<nl lang="ja">
tekisasu ni rinsetsu suru shuu no zentai no jinkou wa ikura desu ka ?
</nl>
<nl lang="tr">
texas a komsu eyaletlerin toplam nufusu nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (NP (DT the) (JJ total) (NN population)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Texas))))))))))
</syn>
<syn lang="es">
(S que es el total de la poblacion de los estados que bordean a texas)
</syn>
<syn lang="ja">
(S tekisasu ni rinsetsu suru shuu no zentai no jinkou wa ikura desu ka)
</syn>
<syn lang="tr">
(S texas a komsu eyaletlerin toplam nufusu nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] is-[Query:0] the-[Num:1] total-[Num:1] population-[Num:2] of-[Num:2] the-[State:3] states-[State:3] that-[State:4] border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(sum(population_1(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,sum(B,(population(C,B),state(C),next_to(D,C),const(D,stateid(texas))),A))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ sum ( *n:Num ) }) </node>
<node id="2"> *n:Num -> ({ population_1 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="598">
<nl lang="en">
What length is the Mississippi ?
</nl>
<nl lang="es">
cuanto tiene de largo el mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa no nagasa wa nan desu ka ?
</nl>
<nl lang="tr">
mississippi ni ne kadar uzunluktadir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN length)) (SQ (VBZ is) (NP (DT the) (NNP Mississippi))))
</syn>
<syn lang="es">
(S cuanto tiene de largo el mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa no nagasa wa nan desu ka)
</syn>
<syn lang="tr">
(S mississippi ni ne kadar uzunluktadir)
</syn>
<augsyn lang="en">
(S What-[Num:1] length-[Num:1] is-[Num:1] the-[RiverName:3] Mississippi-[RiverName:3])
</augsyn>
<mrl lang="geo-funql">
answer(len(riverid('mississippi')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(len(B,A),const(B,riverid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ len ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="3"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="599">
<nl lang="en">
What major cities are located in Pennsylvania ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (JJ major) (NNS cities)) (SQ (VBP are) (VP (VBN located) (PP (IN in) (NP (NNP Pennsylvania))))))
</syn>
<augsyn lang="en">
(S What-[City:1] major-[City:1] cities-[City:2] are-[City:3] located-[City:3] in-[City:3] Pennsylvania-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(city(loc_2(stateid('pennsylvania')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),city(A),loc(A,B),const(B,stateid(pennsylvania))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="600">
<nl lang="en">
What major rivers run through Illinois ?
</nl>
<nl lang="es">
que rios mayores corren por illinois ?
</nl>
<nl lang="ja">
ookina kawa wa irinoi wo nagarete imasu ka ?
</nl>
<nl lang="tr">
illinois den baslica hangi nehirler gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (JJ major) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP Illinois))))))
</syn>
<syn lang="es">
(S que rios mayores corren por illinois)
</syn>
<syn lang="ja">
(S ookina kawa wa irinoi wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S illinois den baslica hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What-[River:1] major-[River:1] rivers-[River:2] run-[River:3] through-[River:3] Illinois-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(major(river(traverse_2(stateid('illinois')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(major(A),river(A),traverse(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="601">
<nl lang="en">
What mountains are in Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS mountains)) (SQ (VBP are) (PP (IN in) (NP (NNP Alaska)))))
</syn>
<augsyn lang="en">
(S What-[Place:1] mountains-[Place:1] are-[Place:2] in-[Place:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(mountain(loc_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(mountain(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="602">
<nl lang="en">
What river flows through Kansas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ flows) (PP (IN through) (NP (NNP Kansas))))))
</syn>
<augsyn lang="en">
(S What-[River:1] river-[River:1] flows-[River:2] through-[River:2] Kansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('kansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(kansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kansas ' }) </node>
</mrl-parse>
</example>

<example id="603">
<nl lang="en">
What river flows through Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ flows) (PP (IN through) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[River:1] river-[River:1] flows-[River:2] through-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="604">
<nl lang="en">
What river flows through the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ flows) (PP (IN through) (NP (DT the) (JJS most) (NNS states))))))
</syn>
<augsyn lang="en">
(S What-[River:2] river-[River:2] flows-[River:3] through-[River:3] the-[River:1] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="605">
<nl lang="en">
What river is the longest one in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (CD one)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S What-[River:2] river-[River:2] is-[River:2] the-[River:1] longest-[River:1] one-[River:1] in-[River:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="606">
<nl lang="en">
What river runs through Illinois ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ runs) (PP (IN through) (NP (NNP Illinois))))))
</syn>
<augsyn lang="en">
(S What-[River:1] river-[River:1] runs-[River:2] through-[River:2] Illinois-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('illinois'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="607">
<nl lang="en">
What river runs through the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ runs) (PP (IN through) (NP (DT the) (JJS most) (NNS states))))))
</syn>
<augsyn lang="en">
(S What-[River:2] river-[River:2] runs-[River:3] through-[River:3] the-[River:1] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="608">
<nl lang="en">
What river runs through the state with the most cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ runs) (PP (IN through) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS most) (NNS cities))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] river-[River:1] runs-[River:2] through-[River:2] the-[State:4] state-[State:4] with-[State:5] the-[State:3] most-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(most(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),most(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="609">
<nl lang="en">
What river runs through Virginia ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ runs) (PP (IN through) (NP (NNP Virginia))))))
</syn>
<augsyn lang="en">
(S What-[River:1] river-[River:1] runs-[River:2] through-[River:2] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(virginia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' virginia ' }) </node>
</mrl-parse>
</example>

<example id="610">
<nl lang="en">
What river traverses the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ traverses) (NP (DT the) (JJS most) (NNS states)))))
</syn>
<augsyn lang="en">
(S What-[River:2] river-[River:2] traverses-[River:3] the-[River:1] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="611">
<nl lang="en">
What river traverses the state which borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN river)) (SQ (VP (VBZ traverses) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT which)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states)))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] river-[River:1] traverses-[River:2] the-[State:4] state-[State:4] which-[State:5] borders-[State:5] the-[State:3] most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="612">
<nl lang="en">
What rivers are in Nevada ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP are) (PP (IN in) (NP (NNP Nevada)))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] are-[River:2] in-[River:2] Nevada-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('nevada'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(nevada))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="613">
<nl lang="en">
What rivers are in New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP are) (PP (IN in) (NP (NNP New) (NNP Mexico)))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] are-[River:2] in-[River:2] New-[StateName:4] Mexico-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('new mexico'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="614">
<nl lang="en">
What rivers are in Oregon ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP are) (PP (IN in) (NP (NNP Oregon)))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] are-[River:2] in-[River:2] Oregon-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('oregon'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(oregon))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' oregon ' }) </node>
</mrl-parse>
</example>

<example id="615">
<nl lang="en">
What rivers are in states that border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP are) (PP (IN in) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Texas)))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] are-[River:2] in-[River:2] states-[State:3] that-[State:4] border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="616">
<nl lang="en">
What rivers are in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP are) (PP (IN in) (NP (NNP Texas)))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] are-[River:2] in-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="617">
<nl lang="en">
What rivers are in Utah ?
</nl>
<nl lang="es">
que rios estan en utah ?
</nl>
<nl lang="ja">
yuutaa ni wa kawa ga nan desu ka ?
</nl>
<nl lang="tr">
utah da hangi nehirler vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP are) (PP (IN in) (NP (NNP Utah)))))
</syn>
<syn lang="es">
(S que rios estan en utah)
</syn>
<syn lang="ja">
(S yuutaa ni wa kawa ga nan desu ka)
</syn>
<syn lang="tr">
(S utah da hangi nehirler vardir)
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] are-[River:2] in-[River:2] Utah-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('utah'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(utah))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' utah ' }) </node>
</mrl-parse>
</example>

<example id="618">
<nl lang="en">
What rivers are there in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP are) (ADVP (RB there)) (PP (IN in) (NP (NNP Texas)))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] are-[River:2] there-[River:2] in-[River:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="619">
<nl lang="en">
What rivers do not run through Tennessee ?
</nl>
<nl lang="es">
que rios no corren por tennessee ?
</nl>
<nl lang="ja">
teneshii wo nagarenai kawa wa nan desu ka ?
</nl>
<nl lang="tr">
hangi nehirler tennessee den gecmez ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VBP do) (RB not) (VP (VB run) (PP (IN through) (NP (NNP Tennessee))))))
</syn>
<syn lang="es">
(S que rios no corren por tennessee)
</syn>
<syn lang="ja">
(S teneshii wo nagarenai kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi nehirler tennessee den gecmez)
</syn>
<augsyn lang="en">
(S What-[River:2] rivers-[River:2] do-[River:1] not-[River:1] run-[River:3] through-[River:3] Tennessee-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(river(all), traverse_2(stateid('tennessee'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),not((traverse(A,B),const(B,stateid(tennessee))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' tennessee ' }) </node>
</mrl-parse>
</example>

<example id="620">
<nl lang="en">
What rivers flow though Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN though) (NP (NNP Colorado))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] flow-[River:2] though-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="621">
<nl lang="en">
What rivers flow through Missouri ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN through) (NP (NNP Missouri))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] flow-[River:2] through-[River:2] Missouri-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="622">
<nl lang="en">
What rivers flow through states that Alabama borders ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN through) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (NP (NNP Alabama)) (VP (VBZ borders)))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] flow-[River:2] through-[River:2] states-[State:3] that-[State:4] Alabama-[StateName:6] borders-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_1(stateid('alabama'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),const(C,stateid(alabama)),next_to(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_1 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="623">
<nl lang="en">
What rivers flow through states that border the state with the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN through) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population))))))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] flow-[River:2] through-[River:2] states-[State:3] that-[State:4] border-[State:4] the-[State:6] state-[State:6] with-[State:5] the-[State:5] largest-[State:5] population-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(largest_one(population_1(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),largest(D,(state(C),population(C,D)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="624">
<nl lang="en">
What rivers flow through the largest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN through) (NP (DT the) (JJS largest) (NN state))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] flow-[River:2] through-[River:2] the-[State:3] largest-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(largest(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),largest(B,state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="625">
<nl lang="en">
What rivers flow through the state with the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN through) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] flow-[River:2] through-[River:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] largest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),largest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="626">
<nl lang="en">
What rivers run through Arizona ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP Arizona))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] Arizona-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('arizona'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="627">
<nl lang="en">
What rivers run through Austin Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (NNP Austin)) (NP (NNP Texas)))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] Austin-[CityName:4] Texas-[StateAbbrev:5])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(cityid('austin', 'tx'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,cityid(austin,tx))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , *n:StateAbbrev ) }) </node>
<node id="4"> *n:CityName -> ({ ' austin ' }) </node>
<node id="5"> *n:StateAbbrev -> ({ ' tx ' }) </node>
</mrl-parse>
</example>

<example id="628">
<nl lang="en">
What rivers run through Colorado ?
</nl>
<nl lang="es">
que rios corren por colorado ?
</nl>
<nl lang="ja">
dono kawa wa kororado wo nagarete imasu ka ?
</nl>
<nl lang="tr">
colorado dan hangi nehirler gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP Colorado))))))
</syn>
<syn lang="es">
(S que rios corren por colorado)
</syn>
<syn lang="ja">
(S dono kawa wa kororado wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S colorado dan hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="629">
<nl lang="en">
What rivers run through Louisiana ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP Louisiana))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] Louisiana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('louisiana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(louisiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' louisiana ' }) </node>
</mrl-parse>
</example>

<example id="630">
<nl lang="en">
What rivers run through Maine ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP Maine))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] Maine-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('maine'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="631">
<nl lang="en">
What rivers run through New York ?
</nl>
<nl lang="es">
que rios corren por new york ?
</nl>
<nl lang="ja">
dono kawa wa nyoo yooku wo nagarete imasu ka ?
</nl>
<nl lang="tr">
new york dan hangi nehirler gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP New) (NNP York))))))
</syn>
<syn lang="es">
(S que rios corren por new_york)
</syn>
<syn lang="ja">
(S dono kawa wa nyoo_yooku wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S new_york dan hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="632">
<nl lang="en">
What rivers run through the state with the lowest point in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (DT the) (NNP USA))))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] the-[State:3] state-[State:3] with-[State:4] the-[Place:5] lowest-[Place:5] point-[Place:6] in-[Place:7] the-[CountryName:9] USA-[CountryName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(loc_1(lowest(place(loc_2(countryid('usa')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="8"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="9"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="633">
<nl lang="en">
What rivers run through the states that border the state with the capital Atlanta ?
</nl>
<nl lang="es">
que rios corren por los estados que bordean a el estado con la capital atlanta ?
</nl>
<nl lang="ja">
ataranta wo shuto ni motsu shuu ni rinsetsu suru shuu wo nagareru kawa wa nan desu ka ?
</nl>
<nl lang="tr">
baskenti atlanta olan eyalete komsu eyaletlerden gecen nehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (NN capital)) (NP (NNP Atlanta)))))))))))))
</syn>
<syn lang="es">
(S que rios corren por los estados que bordean a el estado con la capital atlanta)
</syn>
<syn lang="ja">
(S ataranta wo shuto ni motsu shuu ni rinsetsu suru shuu wo nagareru kawa wa nan desu ka)
</syn>
<syn lang="tr">
(S baskenti atlanta olan eyalete komsu eyaletlerden gecen nehir nedir)
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] the-[State:3] states-[State:3] that-[State:4] border-[State:4] the-[State:5] state-[State:5] with-[State:6] the-[City:7] capital-[City:7] Atlanta-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(state(loc_1(capital(cityid('atlanta', _)))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(atlanta,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' atlanta ' }) </node>
</mrl-parse>
</example>

<example id="634">
<nl lang="en">
What rivers run through West Virginia ?
</nl>
<nl lang="es">
que rios corren por west virginia ?
</nl>
<nl lang="ja">
dono kawa wa uesuto baajinia wo nagarete imasu ka ?
</nl>
<nl lang="tr">
west virginia dan hangi nehirler gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NNP West) (NNP Virginia))))))
</syn>
<syn lang="es">
(S que rios corren por west_virginia)
</syn>
<syn lang="ja">
(S dono kawa wa uesuto_baajinia wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S west_virginia dan hangi nehirler gecer)
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] run-[River:2] through-[River:2] West-[StateName:4] Virginia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('west virginia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid('west virginia'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' west virginia ' }) </node>
</mrl-parse>
</example>

<example id="635">
<nl lang="en">
What rivers traverses the state which borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS rivers)) (SQ (VP (VBZ traverses) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT which)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states)))))))))
</syn>
<augsyn lang="en">
(S What-[River:1] rivers-[River:1] traverses-[River:2] the-[State:4] state-[State:4] which-[State:5] borders-[State:5] the-[State:3] most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="636">
<nl lang="en">
What state bordering Nevada has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (VBP state)) (VP (VBG bordering) (NP (NNP Nevada)))) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] bordering-[State:3] Nevada-[StateName:5] has-[State:1] the-[State:1] largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('nevada'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(nevada)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' nevada ' }) </node>
</mrl-parse>
</example>

<example id="637">
<nl lang="en">
What state borders Michigan ?
</nl>
<nl lang="es">
cual estado bordea a michigan ?
</nl>
<nl lang="ja">
mishigan ni rinsetsu suru shuu wa dochira desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin michigan ya siniri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ borders) (NP (NNP Michigan)))))
</syn>
<syn lang="es">
(S cual estado bordea a michigan)
</syn>
<syn lang="ja">
(S mishigan ni rinsetsu suru shuu wa dochira desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin michigan ya siniri vardir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] borders-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="638">
<nl lang="en">
What state borders most other states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ borders) (NP (JJS most) (JJ other) (NNS states)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] borders-[State:3] most-[State:1] other-[State:4] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="639">
<nl lang="en">
What state borders New York ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ borders) (NP (NNP New) (NNP York)))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] borders-[State:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="640">
<nl lang="en">
What state borders the least states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ borders) (NP (DT the) (JJS least) (NNS states)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] borders-[State:3] the-[State:1] least-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(fewest(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,fewest(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ fewest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="641">
<nl lang="en">
What state borders the least states excluding Alaska and excluding Hawaii ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ borders) (NP (NP (DT the) (JJS least) (NNS states)) (VP (VP (VBG excluding) (NP (NNP Alaska))) (CC and) (VP (VBG excluding) (NP (NNP Hawaii))))))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] borders-[State:3] the-[State:1] least-[State:1] states-[State:6] excluding-[State:5] Alaska-[StateName:8] and-[State:4] excluding-[State:4] Hawaii-[StateName:10])
</augsyn>
<mrl lang="geo-funql">
answer(fewest(state(next_to_2(exclude(exclude(state(all), stateid('alaska')), stateid('hawaii'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,fewest(A,B,(state(A),next_to(A,B),state(B),not((const(A,stateid(alaska)))),not((const(A,stateid(hawaii)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ fewest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="5"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' alaska ' }) </node>
<node id="9"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="10"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="642">
<nl lang="en">
What state borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] borders-[State:3] the-[State:1] most-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="643">
<nl lang="en">
What state borders the state with the smallest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ borders) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN population)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] borders-[State:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] smallest-[State:3] population-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(smallest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),smallest(C,(state(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="644">
<nl lang="en">
What state contains the highest point in the US ?
</nl>
<nl lang="es">
que estado contiene el punto mas alto en los us ?
</nl>
<nl lang="ja">
dono shuu wa beikoku no mottomo takai chiten ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet us deki en yusek noktayi kapsar ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ contains) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NNP US)))))))
</syn>
<syn lang="es">
(S que estado contiene el punto mas alto en los us)
</syn>
<syn lang="ja">
(S dono shuu wa beikoku no mottomo takai chiten ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet us deki en yusek noktayi kapsar)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] contains-[State:2] the-[Place:3] highest-[Place:3] point-[Place:4] in-[Place:5] the-[CountryName:7] US-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="645">
<nl lang="en">
What state contains the highest point of those the Colorado river traverses ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ contains) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN of) (NP (NP (DT those)) (SBAR (S (NP (DT the) (NNP Colorado) (NN river)) (VP (VBZ traverses))))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] contains-[State:2] the-[Place:3] highest-[Place:3] point-[Place:4] of-[Place:5] those-[State:6] the-[River:8] Colorado-[RiverName:10] river-[River:8] traverses-[State:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(loc_2(state(traverse_1(river(riverid('colorado'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B),loc(B,C),state(C),const(D,riverid(colorado)),river(D),traverse(D,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="9"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="10"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="646">
<nl lang="en">
What state has highest elevation ?
</nl>
<nl lang="es">
que estado tiene la elevacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai kaibatsu ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek yukseltiye sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (JJS highest) (NN elevation)))))
</syn>
<syn lang="es">
(S que estado tiene la elevacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai kaibatsu ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek yukseltiye sahiptir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] highest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="647">
<nl lang="en">
What state has no rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT no) (NNS rivers)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:3] no-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), loc_1(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((loc(B,A),river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="648">
<nl lang="en">
What state has the capital Salem ?
</nl>
<nl lang="es">
que estado tiene la capital salem ?
</nl>
<nl lang="ja">
dono shuu wa saremu to iu shuto ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyaletin baskenti salem dir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (NN capital)) (NP (NNP Salem))))))
</syn>
<syn lang="es">
(S que estado tiene la capital salem)
</syn>
<syn lang="ja">
(S dono shuu wa saremu to iu shuto ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin baskenti salem dir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[City:3] capital-[City:3] Salem-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('salem', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),capital(B),const(B,cityid(salem,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' salem ' }) </node>
</mrl-parse>
</example>

<example id="649">
<nl lang="en">
What state has the city Flint ?
</nl>
<nl lang="es">
que estado tiene la ciudad flint ?
</nl>
<nl lang="ja">
dono shuu wa furinto toshi ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet in flint sehri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (NN city)) (NP (NNP Flint))))))
</syn>
<syn lang="es">
(S que estado tiene la ciudad flint)
</syn>
<syn lang="ja">
(S dono shuu wa furinto toshi ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet in flint sehri vardir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[City:3] city-[City:3] Flint-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('flint', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(flint,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' flint ' }) </node>
</mrl-parse>
</example>

<example id="650">
<nl lang="en">
What state has the city with the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (NN city)) (PP (IN with) (NP (DT the) (JJS largest) (NN population)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[City:4] city-[City:4] with-[City:3] the-[City:3] largest-[City:3] population-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest_one(population_1(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(C,(city(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="651">
<nl lang="en">
What state has the city with the most population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (NN city)) (PP (IN with) (NP (DT the) (JJS most) (NN population)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[City:4] city-[City:4] with-[City:3] the-[City:3] most-[City:3] population-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest_one(population_1(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(C,(city(B),population(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="652">
<nl lang="en">
What state has the greatest population density ?
</nl>
<nl lang="es">
que estado tiene la densidad de poblacion mas grande ?
</nl>
<nl lang="ja">
mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS greatest) (NN population) (NN density)))))
</syn>
<syn lang="es">
(S que estado tiene la densidad de poblacion mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] greatest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="653">
<nl lang="en">
What state has the highest elevation ?
</nl>
<nl lang="es">
que estado tiene la elevacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai kaibatsu ga arimsua ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek yukseltiye sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN elevation)))))
</syn>
<syn lang="es">
(S que estado tiene la elevacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai kaibatsu ga arimsua ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek yukseltiye sahiptir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[Place:3] highest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="654">
<nl lang="en">
What state has the highest population ?
</nl>
<nl lang="es">
cual estado tiene la poblacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii jinkou ga ariumasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek nufusa sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN population)))))
</syn>
<syn lang="es">
(S cual estado tiene la poblacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii jinkou ga ariumasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek nufusa sahiptir)
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] highest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="655">
<nl lang="en">
What state has the highest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] highest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="656">
<nl lang="en">
What state has the largest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN area)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] largest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="657">
<nl lang="en">
What state has the largest capital ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN capital)))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[City:3] largest-[City:3] capital-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(capital(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(B,capital(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="658">
<nl lang="en">
What state has the largest city ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN city)))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[City:3] largest-[City:3] city-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(B,(city(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="659">
<nl lang="en">
What state has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="660">
<nl lang="en">
What state has the largest population density ?
</nl>
<nl lang="es">
que estado tiene la densidad de poblacion mas grande ?
</nl>
<nl lang="ja">
mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population) (NN density)))))
</syn>
<syn lang="es">
(S que estado tiene la densidad de poblacion mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii jinkou no mitsudo ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] largest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="661">
<nl lang="en">
What state has the largest urban population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (JJ urban) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] largest-[State:1] urban-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="662">
<nl lang="en">
What state has the least population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS least) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] least-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="663">
<nl lang="en">
What state has the longest river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS longest) (NN river)))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[River:3] longest-[River:3] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),longest(B,river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="664">
<nl lang="en">
What state has the lowest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS lowest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] lowest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="665">
<nl lang="en">
What state has the most cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (NNS cities)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] cities-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(city(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="666">
<nl lang="en">
What state has the most major cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (JJ major) (NNS cities)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] major-[City:4] cities-[City:5])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(major(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="667">
<nl lang="en">
What state has the most major rivers running through it ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (JJS most) (JJ major) (NNS rivers)) (VP (VBG running) (PP (IN through) (NP (PRP it))))))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] major-[River:4] rivers-[River:5] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),major(B),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="668">
<nl lang="en">
What state has the most people ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (NNS people)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] most-[State:1] people-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="669">
<nl lang="en">
What state has the most rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (NNS rivers)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="670">
<nl lang="en">
What state has the most rivers running through it ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (JJS most) (NNS rivers)) (VP (VBG running) (PP (IN through) (NP (PRP it))))))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] rivers-[River:4] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="671">
<nl lang="en">
What state has the shortest river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS shortest) (NN river)))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[River:3] shortest-[River:3] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(shortest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),shortest(B,river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="672">
<nl lang="en">
What state has the smallest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (NN area)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] smallest-[State:1] area-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="673">
<nl lang="en">
What state has the smallest capital ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (NN capital)))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] has-[State:2] the-[City:3] smallest-[City:3] capital-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(smallest(capital(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),smallest(B,capital(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="674">
<nl lang="en">
What state has the smallest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] smallest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="675">
<nl lang="en">
What state has the smallest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] smallest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="676">
<nl lang="en">
What state has the smallest urban population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (JJ urban) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] smallest-[State:1] urban-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="677">
<nl lang="en">
What state has the sparsest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJ sparsest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] has-[State:1] the-[State:1] sparsest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="678">
<nl lang="en">
What state is Austin in ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Austin)) (PP (IN in))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Austin-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('austin', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(austin,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="679">
<nl lang="en">
What state is Austin the capital of ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Austin)) (NP (NP (DT the) (NN capital)) (PP (IN of)))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Austin-[CityName:5] the-[City:3] capital-[City:3] of-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(austin,_)),capital(B),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="680">
<nl lang="en">
What state is Boston in ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Boston)) (PP (IN in))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Boston-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('boston', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(boston,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' boston ' }) </node>
</mrl-parse>
</example>

<example id="681">
<nl lang="en">
What state is Columbus the capital of ?
</nl>
<nl lang="es">
de cual estado es columbus la capital ?
</nl>
<nl lang="ja">
koronbaasu wa dono shuu no shuto desu ka ?
</nl>
<nl lang="tr">
columbus hangi eyaletin baskentidir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Columbus)) (NP (NP (DT the) (NN capital)) (PP (IN of)))))
</syn>
<syn lang="es">
(S de cual estado es columbus la capital)
</syn>
<syn lang="ja">
(S koronbaasu wa dono shuu no shuto desu ka)
</syn>
<syn lang="tr">
(S columbus hangi eyaletin baskentidir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Columbus-[CityName:5] the-[City:3] capital-[City:3] of-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(cityid('columbus', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(columbus,_)),capital(B),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' columbus ' }) </node>
</mrl-parse>
</example>

<example id="682">
<nl lang="en">
What state is Dallas in ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Dallas)) (PP (IN in))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Dallas-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('dallas', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(dallas,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="683">
<nl lang="en">
What state is Des Moines located in ?
</nl>
<nl lang="es">
en que estado se encuentra des moines ?
</nl>
<nl lang="ja">
demoin wa dono shuu ni arimasu ka ?
</nl>
<nl lang="tr">
des moines hangi eyalettedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Des) (NNP Moines)) (VP (VBN located) (PP (IN in)))))
</syn>
<syn lang="es">
(S en que estado se encuentra des_moines)
</syn>
<syn lang="ja">
(S demoin wa dono shuu ni arimasu ka)
</syn>
<syn lang="tr">
(S des_moines hangi eyalettedir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Des-[CityName:4] Moines-[CityName:4] located-[State:2] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('des moines', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid('des moines',_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' des moines ' }) </node>
</mrl-parse>
</example>

<example id="684">
<nl lang="en">
What state is Miami in ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Miami)) (PP (IN in))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Miami-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('miami', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(miami,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' miami ' }) </node>
</mrl-parse>
</example>

<example id="685">
<nl lang="en">
What state is Pittsburgh in ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NNP Pittsburgh)) (PP (IN in))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:2] Pittsburgh-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('pittsburgh', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(pittsburgh,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' pittsburgh ' }) </node>
</mrl-parse>
</example>

<example id="686">
<nl lang="en">
What state is the biggest ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (DT the) (JJS biggest))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] is-[State:1] the-[State:1] biggest-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="687">
<nl lang="en">
What state is the largest in population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest)) (PP (IN in) (NP (NN population))))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] is-[State:1] the-[State:1] largest-[State:1] in-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="688">
<nl lang="en">
What state is the state with the most rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NN state)) (SQ (VBZ is) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS most) (NNS rivers))))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] is-[State:1] the-[State:3] state-[State:3] with-[State:4] the-[State:2] most-[State:2] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(most(state(loc_1(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),most(A,B,(state(A),loc(B,A),river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="689">
<nl lang="en">
What state that borders Texas has the highest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas)))))) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] that-[State:3] borders-[State:3] Texas-[StateName:5] has-[State:1] the-[State:1] highest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(texas)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="690">
<nl lang="en">
What state that borders Texas is the largest ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas)))))) (SQ (VBZ is) (NP (DT the) (JJS largest))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] that-[State:3] borders-[State:3] Texas-[StateName:5] is-[State:1] the-[State:1] largest-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest(state(next_to_2(stateid('texas')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,(state(A),next_to(A,B),const(B,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="691">
<nl lang="en">
What state which the Mississippi runs through has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NN state)) (SBAR (WHNP (WDT which)) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs) (PP (IN through)))))) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[State:2] state-[State:2] which-[State:3] the-[RiverName:5] Mississippi-[RiverName:5] runs-[State:3] through-[State:3] has-[State:1] the-[State:1] largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),const(C,riverid(mississippi)),traverse(C,A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="692">
<nl lang="en">
What states are next to Arizona ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBP are) (ADJP (JJ next) (PP (TO to) (NP (NNP Arizona))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] are-[State:2] next-[State:2] to-[State:2] Arizona-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('arizona'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="693">
<nl lang="en">
What states are next to Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBP are) (ADJP (JJ next) (PP (TO to) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] are-[State:2] next-[State:2] to-[State:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="694">
<nl lang="en">
What states are next to the Mississippi ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBP are) (ADJP (JJ next) (PP (TO to) (NP (DT the) (NNP Mississippi))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] are-[State:2] next-[State:2] to-[State:2] the-[StateName:4] Mississippi-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="695">
<nl lang="en">
What states border Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Alaska)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="696">
<nl lang="en">
What states border Arkansas ?
</nl>
<nl lang="es">
cuales estados bordean a arkansas ?
</nl>
<nl lang="ja">
aakansaa ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
arkansas a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Arkansas)))))
</syn>
<syn lang="es">
(S cuales estados bordean a arkansas)
</syn>
<syn lang="ja">
(S aakansaa ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S arkansas a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Arkansas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('arkansas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(arkansas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arkansas ' }) </node>
</mrl-parse>
</example>

<example id="697">
<nl lang="en">
What states border Delaware ?
</nl>
<nl lang="es">
cuales estados bordean a delaware ?
</nl>
<nl lang="ja">
derawaru ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
delaware a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Delaware)))))
</syn>
<syn lang="es">
(S cuales estados bordean a delaware)
</syn>
<syn lang="ja">
(S derawaru ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S delaware a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Delaware-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('delaware'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(delaware))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="698">
<nl lang="en">
What states border Florida ?
</nl>
<nl lang="es">
cuales estados bordean a florida ?
</nl>
<nl lang="ja">
furorida ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
florida a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Florida)))))
</syn>
<syn lang="es">
(S cuales estados bordean a florida)
</syn>
<syn lang="ja">
(S furorida ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S florida a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Florida-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('florida'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="699">
<nl lang="en">
What states border Georgia ?
</nl>
<nl lang="es">
cuales estados bordean a georgia ?
</nl>
<nl lang="ja">
joojaa ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
georgia a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Georgia)))))
</syn>
<syn lang="es">
(S cuales estados bordean a georgia)
</syn>
<syn lang="ja">
(S joojaa ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S georgia a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Georgia-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('georgia'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(georgia))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' georgia ' }) </node>
</mrl-parse>
</example>

<example id="700">
<nl lang="en">
What states border Hawaii ?
</nl>
<nl lang="es">
cuales estados bordean a hawaii ?
</nl>
<nl lang="ja">
hawai ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hawaii a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Hawaii)))))
</syn>
<syn lang="es">
(S cuales estados bordean a hawaii)
</syn>
<syn lang="ja">
(S hawai ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hawaii a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="701">
<nl lang="en">
What states border Indiana ?
</nl>
<nl lang="es">
cuales estados bordean a indiana ?
</nl>
<nl lang="ja">
indiana ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
indiana a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Indiana)))))
</syn>
<syn lang="es">
(S cuales estados bordean a indiana)
</syn>
<syn lang="ja">
(S indiana ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S indiana a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Indiana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('indiana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(indiana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' indiana ' }) </node>
</mrl-parse>
</example>

<example id="702">
<nl lang="en">
What states border Kentucky ?
</nl>
<nl lang="es">
cuales estados bordean a kentucky ?
</nl>
<nl lang="ja">
kentakkii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
kentucky a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Kentucky)))))
</syn>
<syn lang="es">
(S cuales estados bordean a kentucky)
</syn>
<syn lang="ja">
(S kentakkii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S kentucky a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="703">
<nl lang="en">
What states border Michigan ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Michigan)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="704">
<nl lang="en">
What states border Missouri ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Missouri)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Missouri-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(missouri))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="705">
<nl lang="en">
What states border Montana ?
</nl>
<nl lang="es">
cuales estados bordean a montana ?
</nl>
<nl lang="ja">
montana ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
montana a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Montana)))))
</syn>
<syn lang="es">
(S cuales estados bordean a montana)
</syn>
<syn lang="ja">
(S montana ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S montana a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Montana-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('montana'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(montana))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="706">
<nl lang="en">
What states border New Hampshire ?
</nl>
<nl lang="es">
cuales estados bordean a new hampshire ?
</nl>
<nl lang="ja">
nyuu hanpushaa ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
new hampshire a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP New) (NNP Hampshire)))))
</syn>
<syn lang="es">
(S cuales estados bordean a new_hampshire)
</syn>
<syn lang="ja">
(S nyuu_hanpushaa ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_hampshire a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] New-[StateName:4] Hampshire-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new hampshire'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="707">
<nl lang="en">
What states border New Jersey ?
</nl>
<nl lang="es">
cuales estados bordean a new jersey ?
</nl>
<nl lang="ja">
nyuu jaajii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
new jersey a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP New) (NNP Jersey)))))
</syn>
<syn lang="es">
(S cuales estados bordean a new_jersey)
</syn>
<syn lang="ja">
(S nyuu_jaajii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_jersey a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] New-[StateName:4] Jersey-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new jersey'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new jersey'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new jersey ' }) </node>
</mrl-parse>
</example>

<example id="708">
<nl lang="en">
What states border Ohio ?
</nl>
<nl lang="es">
cuales estados bordean a ohio ?
</nl>
<nl lang="ja">
ohaio ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
ohio ya siniri bulunan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Ohio)))))
</syn>
<syn lang="es">
(S cuales estados bordean a ohio)
</syn>
<syn lang="ja">
(S ohaio ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S ohio ya siniri bulunan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Ohio-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('ohio'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(ohio))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="709">
<nl lang="en">
What states border Rhode Island ?
</nl>
<nl lang="es">
cuales estados bordean a rhode island ?
</nl>
<nl lang="ja">
roodoairando ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
rhode island a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Rhode) (NNP Island)))))
</syn>
<syn lang="es">
(S cuales estados bordean a rhode island)
</syn>
<syn lang="ja">
(S roodoairando ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S rhode island a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Rhode-[StateName:4] Island-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('rhode island'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('rhode island'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' rhode island ' }) </node>
</mrl-parse>
</example>

<example id="710">
<nl lang="en">
What states border states that border Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Colorado)))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] that-[State:4] border-[State:4] Colorado-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(stateid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="711">
<nl lang="en">
What states border states that border Mississippi ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Mississippi)))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] that-[State:4] border-[State:4] Mississippi-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(stateid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),const(C,stateid(mississippi))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="712">
<nl lang="en">
What states border states that border states that border Florida ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Florida)))))))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] that-[State:4] border-[State:4] states-[State:5] that-[State:6] border-[State:6] Florida-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(state(next_to_2(stateid('florida'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),const(D,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="713">
<nl lang="en">
What states border states that border states that border states that border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Texas)))))))))))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] that-[State:4] border-[State:4] states-[State:5] that-[State:6] border-[State:6] states-[State:7] that-[State:8] border-[State:8] Texas-[StateName:10])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(state(next_to_2(state(next_to_2(stateid('texas'))))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),state(C),next_to(C,D),state(D),next_to(D,E),const(E,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="9"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="10"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="714">
<nl lang="en">
What states border states that border the state with the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS largest) (NN population)))))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] that-[State:4] border-[State:4] the-[State:6] state-[State:6] with-[State:5] the-[State:5] largest-[State:5] population-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(next_to_2(largest_one(population_1(state(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),next_to(B,C),largest(D,(state(C),population(C,D)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="715">
<nl lang="en">
What states border states that the Mississippi runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs) (PP (IN through)))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] that-[State:4] the-[RiverName:6] Mississsippi-[RiverName:6] runs-[State:4] through-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="716">
<nl lang="en">
What states border states that the Ohio runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (NP (DT the) (NNP Ohio)) (VP (VBZ runs) (PP (IN through)))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] that-[State:4] the-[RiverName:6] Ohio-[RiverName:6] runs-[State:4] through-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('ohio'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(ohio)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="717">
<nl lang="en">
What states border states which the Mississippi runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHNP (WDT which)) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs) (PP (IN through)))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] states-[State:3] which-[State:4] the-[RiverName:6] Mississippi-[RiverName:6] runs-[State:4] through-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="718">
<nl lang="en">
What states border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Texas)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="719">
<nl lang="en">
What states border Texas and have a major river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VP (VBP border) (NP (NNP Texas))) (CC and) (VP (VBP have) (NP (DT a) (JJ major) (NN river))))))
</syn>
<augsyn lang="en">
(S What-[State:2] states-[State:2] border-[State:3] Texas-[StateName:5] and-[State:1] have-[State:6] a-[River:7] major-[River:7] river-[River:8])
</augsyn>
<mrl lang="geo-funql">
answer(intersection(state(next_to_2(stateid('texas'))), loc_1(major(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas)),loc(C,A),major(C),river(C)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="7"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="8"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="720">
<nl lang="en">
What states border the Mississippi river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (DT the) (NNP Mississippi) (NN river)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] the-[River:3] Mississippi-[RiverName:5] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(river(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,riverid(mississippi)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="721">
<nl lang="en">
What states border the most populous state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (DT the) (ADJP (RBS most) (JJ populous)) (NN state)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] the-[State:3] most-[State:3] populous-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(largest_one(population_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),largest(C,(population(B,C),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="722">
<nl lang="en">
What states border the state that borders the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states)))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] the-[State:4] state-[State:4] that-[State:5] borders-[State:5] the-[State:3] most-[State:3] states-[State:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(next_to_2(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),next_to(B,C),state(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="723">
<nl lang="en">
What states border the state with the most cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS most) (NNS cities)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] the-[State:4] state-[State:4] with-[State:5] the-[State:3] most-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="724">
<nl lang="en">
What states border the state with the most major cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS most) (JJ major) (NNS cities)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] the-[State:4] state-[State:4] with-[State:5] the-[State:3] most-[State:3] major-[City:6] cities-[City:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(loc_1(major(city(all))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),major(C),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="725">
<nl lang="en">
What states border the state with the smallest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN area)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] smallest-[State:3] area-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(smallest_one(area_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="726">
<nl lang="en">
What states border the states with the most cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NNS states)) (PP (IN with) (NP (DT the) (JJS most) (NNS cities)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] the-[State:4] states-[State:4] with-[State:5] the-[State:3] most-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(most(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),most(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="727">
<nl lang="en">
What states border Wisconsin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP border) (NP (NNP Wisconsin)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] border-[State:2] Wisconsin-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('wisconsin'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(wisconsin))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' wisconsin ' }) </node>
</mrl-parse>
</example>

<example id="728">
<nl lang="en">
What state 's capital is Dover ?
</nl>
<nl lang="es">
que estado tiene la capital dover ?
</nl>
<nl lang="ja">
doobaa to iu shuto wa dono shuu desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin baskenti dover dir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NN state) (POS 's)) (NN capital)) (SQ (VBZ is) (NP (NNP Dover))))
</syn>
<syn lang="es">
(S que estado tiene la capital dover)
</syn>
<syn lang="ja">
(S doobaa to iu shuto wa dono shuu desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin baskenti dover dir)
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] 's-[State:2] capital-[State:2] is-[State:2] Dover-[CityName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(capital_2(cityid('dover', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),capital(A,B),const(B,cityid(dover,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ capital_2 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' dover ' }) </node>
</mrl-parse>
</example>

<example id="729">
<nl lang="en">
What states contain at least one major rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP contain) (NP (QP (IN at) (JJS least) (CD one)) (JJ major) (NNS rivers)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] contain-[State:2] at-[River:4] least-[River:4] one-[River:4] major-[River:3] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(major(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),major(B),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="730">
<nl lang="en">
What states does the Colorado river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Colorado) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[River:3] Colorado-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(colorado)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="731">
<nl lang="en">
What states does the Delaware river run through ?
</nl>
<nl lang="es">
por cuales estados corre el rio delaware ?
</nl>
<nl lang="ja">
derawaru kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
delaware nehri hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Delaware) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuales estados corre el rio delaware)
</syn>
<syn lang="ja">
(S derawaru kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S delaware nehri hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[River:3] Delaware-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('delaware')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(delaware)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' delaware ' }) </node>
</mrl-parse>
</example>

<example id="732">
<nl lang="en">
What states does the Mississippi river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Mississippi) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[River:3] Mississippi-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="733">
<nl lang="en">
What states does the Mississippi run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Mississippi)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[RiverName:4] Mississippi-[RiverName:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="734">
<nl lang="en">
What states does the Missouri river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Missouri) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[River:3] Missouri-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="735">
<nl lang="en">
What states does the Missouri run through ?
</nl>
<nl lang="es">
por cuales estados corre el missouri ?
</nl>
<nl lang="ja">
mizuuri kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
missouri hangi eyaletlerin icinden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Missouri)) (VP (VB run) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuales estados corre el missouri)
</syn>
<syn lang="ja">
(S mizuuri kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S missouri hangi eyaletlerin icinden gecer)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[RiverName:4] Missouri-[RiverName:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('missouri'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="736">
<nl lang="en">
What states does the Ohio river go through ?
</nl>
<nl lang="es">
por cuales estados corre el rio ohio ?
</nl>
<nl lang="ja">
ohaio kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
ohio nehri hangi eyaletlerin icinden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Ohio) (NN river)) (VP (VB go) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuales estados corre el rio ohio)
</syn>
<syn lang="ja">
(S ohaio kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S ohio nehri hangi eyaletlerin icinden gecer)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[River:3] Ohio-[RiverName:5] river-[River:3] go-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(ohio)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="737">
<nl lang="en">
What states does the Ohio river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Ohio) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[River:3] Ohio-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('ohio')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(ohio)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' ohio ' }) </node>
</mrl-parse>
</example>

<example id="738">
<nl lang="en">
What states does the shortest river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VBZ does) (NP (DT the) (JJS shortest) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] does-[State:2] the-[River:3] shortest-[River:3] river-[River:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(shortest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),shortest(B,river(B)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="739">
<nl lang="en">
What states have a capital that is the highest point in the state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (DT a) (NN capital)) (SBAR (WHNP (WDT that)) (S (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (DT the) (NN state))))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] a-[City:3] capital-[City:3] that-[Place:4] is-[Place:4] the-[Place:4] highest-[Place:4] point-[Place:5] in-[Place:4] the-[Place:4] state-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(capital(highest(place(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),capital(B),highest(B,(place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ capital ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="740">
<nl lang="en">
What states have a city named Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (DT a) (NN city)) (VP (VBN named) (NP (NNP Austin)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] a-[City:3] city-[City:3] named-[City:3] Austin-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="741">
<nl lang="en">
What states have cities named Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Austin)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Austin-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="742">
<nl lang="en">
What states have cities named Dallas ?
</nl>
<nl lang="es">
cuales estados tienen ciudades con el nombre dallas ?
</nl>
<nl lang="ja">
darasu to iu toshi ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletlerde dallas sehri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Dallas)))))))
</syn>
<syn lang="es">
(S cuales estados tienen ciudades con el nombre dallas)
</syn>
<syn lang="ja">
(S darasu to iu toshi ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletlerde dallas sehri vardir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Dallas-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('dallas', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(dallas,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="743">
<nl lang="en">
What states have cities named Plano ?
</nl>
<nl lang="es">
cuales estados tienen ciudades con el nombre plano ?
</nl>
<nl lang="ja">
purano to iu toshi ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletlerde plano sehri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Plano)))))))
</syn>
<syn lang="es">
(S cuales estados tienen ciudades con el nombre plano)
</syn>
<syn lang="ja">
(S purano to iu toshi ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletlerde plano sehri vardir)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Plano-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('plano', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(plano,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' plano ' }) </node>
</mrl-parse>
</example>

<example id="744">
<nl lang="en">
What states have cities named Portland ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Portland)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Portland-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('portland', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(portland,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' portland ' }) </node>
</mrl-parse>
</example>

<example id="745">
<nl lang="en">
What states have cities named Rochester ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Rochester)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Rochester-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('rochester', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(rochester,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' rochester ' }) </node>
</mrl-parse>
</example>

<example id="746">
<nl lang="en">
What states have cities named Salt Lake City ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Salt) (NNP Lake) (NNP City)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Salt-[CityName:5] Lake-[CityName:5] City-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('salt lake city', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid('salt lake city',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' salt lake city ' }) </node>
</mrl-parse>
</example>

<example id="747">
<nl lang="en">
What states have no bordering state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (DT no) (VBG bordering) (NN state)))))
</syn>
<augsyn lang="en">
(S What-[State:2] states-[State:2] have-[State:1] no-[State:1] bordering-[State:3] state-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="748">
<nl lang="en">
What states have rivers named Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS rivers)) (VP (VBN named) (NP (NNP Colorado)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] rivers-[River:3] named-[River:3] Colorado-[RiverName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,riverid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="749">
<nl lang="en">
What states have rivers running through them ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS rivers)) (VP (VBG running) (PP (IN through) (NP (PRP them))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] rivers-[River:3] running-[State:2] through-[State:2] them-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="750">
<nl lang="en">
What states have towns named Springfield ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS towns)) (VP (VBN named) (NP (NNP Springfield)))))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] have-[State:2] towns-[City:3] named-[City:3] Springfield-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('springfield', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,cityid(springfield,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="751">
<nl lang="en">
What state 's high point is higher than that of Colorado ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NN state) (POS 's)) (JJ high) (NN point)) (SQ (VBZ is) (ADJP (ADJP (JJR higher)) (PP (IN than) (NP (NP (DT that)) (PP (IN of) (NP (NNP Colorado))))))))
</syn>
<augsyn lang="en">
(S What-[State:1] state-[State:1] 's-[State:2] high-[State:2] point-[State:2] is-[Place:3] higher-[Place:3] than-[Place:3] that-[Place:4] of-[Place:4] Colorado-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(high_point_2(higher_2(high_point_1(stateid('colorado'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),high_point(A,B),higher(B,C),high_point(D,C),const(D,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ high_point_2 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ high_point_1 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="752">
<nl lang="en">
What states in the United States have a city of Springfield ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WP What) (NNS states)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States)))) (SQ (VP (VBP have) (NP (NP (DT a) (NN city)) (PP (IN of) (NP (NNP Springfield)))))))
</syn>
<augsyn lang="en">
(S What-[State:2] states-[State:2] in-[State:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5] have-[State:6] a-[City:7] city-[City:7] of-[City:7] Springfield-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(intersection(state(loc_2(countryid('usa'))), loc_1(city(cityid('springfield', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(A,B),const(B,countryid(usa)),loc(C,A),const(C,cityid(springfield,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ intersection ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="753">
<nl lang="en">
What states neighbor Maine ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP neighbor) (NP (NNP Maine)))))
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] neighbor-[State:2] Maine-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('maine'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(maine))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' maine ' }) </node>
</mrl-parse>
</example>

<example id="754">
<nl lang="en">
What states surround Kentucky ?
</nl>
<nl lang="es">
cuales estados rodean a kentucky ?
</nl>
<nl lang="ja">
donna shuu ga kentakkii no mawari ni arimasu ka ?
</nl>
<nl lang="tr">
kentucky yi hangi eyaletler cevreler ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNS states)) (SQ (VP (VBP surround) (NP (NNP Kentucky)))))
</syn>
<syn lang="es">
(S cuales estados rodean a kentucky)
</syn>
<syn lang="ja">
(S donna shuu ga kentakkii no mawari ni arimasu ka)
</syn>
<syn lang="tr">
(S kentucky yi hangi eyaletler cevreler)
</syn>
<augsyn lang="en">
(S What-[State:1] states-[State:1] surround-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="755">
<nl lang="en">
What Texas city has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What) (NNP Texas) (NN city)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S What-[City:2] Texas-[StateName:5] city-[City:2] has-[City:1] the-[City:1] largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(const(C,stateid(texas)),city(A),loc(A,C),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="756">
<nl lang="en">
What 's the largest city ?
</nl>
<nl lang="es">
que es la ciudad mas grande ?
</nl>
<nl lang="ja">
mottomo ookii toshi wa nan desu ka ?
</nl>
<nl lang="tr">
en buyuk sehir nedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WP What)) (SQ (VBZ 's) (NP (DT the) (JJS largest) (NN city))))
</syn>
<syn lang="es">
(S que es la ciudad mas grande)
</syn>
<syn lang="ja">
(S mottomo ookii toshi wa nan desu ka)
</syn>
<syn lang="tr">
(S en buyuk sehir nedir)
</syn>
<augsyn lang="en">
(S What-[Query:0] 's-[Query:0] the-[City:1] largest-[City:1] city-[City:2])
</augsyn>
<mrl lang="geo-funql">
answer(largest(city(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(A,city(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="757">
<nl lang="en">
Where are mountains ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBP are) (NP (NNS mountains))))
</syn>
<augsyn lang="en">
(S Where-[State:1] are-[State:1] mountains-[Place:2])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(mountain(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),mountain(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( all ) }) </node>
</mrl-parse>
</example>

<example id="758">
<nl lang="en">
Where is Austin ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Austin))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Austin-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('austin', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="759">
<nl lang="en">
Where is Baton Rouge ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Baton) (NNP Rouge))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Baton-[CityName:3] Rouge-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('baton rouge', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('baton rouge',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' baton rouge ' }) </node>
</mrl-parse>
</example>

<example id="760">
<nl lang="en">
Where is Dallas ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Dallas))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Dallas-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('dallas', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(dallas,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' dallas ' }) </node>
</mrl-parse>
</example>

<example id="761">
<nl lang="en">
Where is Fort Wayne ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Fort) (NNP Wayne))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Fort-[CityName:3] Wayne-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('fort wayne', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('fort wayne',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' fort wayne ' }) </node>
</mrl-parse>
</example>

<example id="762">
<nl lang="en">
Where is Houston ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Houston))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Houston-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('houston', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(houston,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' houston ' }) </node>
</mrl-parse>
</example>

<example id="763">
<nl lang="en">
Where is Indianapolis ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Indianapolis))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Indianapolis-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('indianapolis', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(indianapolis,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' indianapolis ' }) </node>
</mrl-parse>
</example>

<example id="764">
<nl lang="en">
Where is Massachusetts ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Massachusetts))))
</syn>
<augsyn lang="en">
(S Where-[Country:1] is-[Country:1] Massachusetts-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(stateid('massachusetts')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,stateid(massachusetts))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Country ) }) </node>
<node id="1"> *n:Country -> ({ loc_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' massachusetts ' }) </node>
</mrl-parse>
</example>

<example id="765">
<nl lang="en">
Where is Mount Whitney ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Mount) (NNP Whitney))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Mount-[PlaceName:3] Whitney-[PlaceName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(placeid('mount whitney')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,placeid('mount whitney'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount whitney ' }) </node>
</mrl-parse>
</example>

<example id="766">
<nl lang="en">
Where is Mount Whitney located ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Mount) (NNP Whitney)) (VP (VBN located))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Mount-[PlaceName:3] Whitney-[PlaceName:3] located-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(placeid('mount whitney')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,placeid('mount whitney'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="3"> *n:PlaceName -> ({ ' mount whitney ' }) </node>
</mrl-parse>
</example>

<example id="767">
<nl lang="en">
Where is New Hampshire ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP New) (NNP Hampshire))))
</syn>
<augsyn lang="en">
(S Where-[Country:1] is-[Country:1] New-[StateName:3] Hampshire-[StateName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(stateid('new hampshire')))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,stateid('new hampshire'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Country ) }) </node>
<node id="1"> *n:Country -> ({ loc_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="3"> *n:StateName -> ({ ' new hampshire ' }) </node>
</mrl-parse>
</example>

<example id="768">
<nl lang="en">
Where is New Orleans ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP New) (NNP Orleans))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] New-[CityName:3] Orleans-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('new orleans', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('new orleans',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' new orleans ' }) </node>
</mrl-parse>
</example>

<example id="769">
<nl lang="en">
Where is Portland ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Portland))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Portland-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('portland', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(portland,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' portland ' }) </node>
</mrl-parse>
</example>

<example id="770">
<nl lang="en">
Where is San Diego ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP San) (NNP Diego))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] San-[CityName:3] Diego-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('san diego', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('san diego',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san diego ' }) </node>
</mrl-parse>
</example>

<example id="771">
<nl lang="en">
Where is San Jose ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP San) (NNP Jose))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] San-[CityName:3] Jose-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('san jose', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('san jose',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' san jose ' }) </node>
</mrl-parse>
</example>

<example id="772">
<nl lang="en">
Where is Scotts Valley ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Scotts) (NNP Valley))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Scotts-[CityName:3] Valley-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('scotts valley', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid('scotts valley',_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' scotts valley ' }) </node>
</mrl-parse>
</example>

<example id="773">
<nl lang="en">
Where is Springfield ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NNP Springfield))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] Springfield-[CityName:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(cityid('springfield', _)))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,cityid(springfield,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="3"> *n:CityName -> ({ ' springfield ' }) </node>
</mrl-parse>
</example>

<example id="774">
<nl lang="en">
Where is the Chattahoochee river ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (DT the) (JJ Chattahoochee) (NN river))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] the-[River:2] Chattahoochee-[RiverName:4] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(river(riverid('chattahoochee'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),const(B,riverid(chattahoochee)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' chattahoochee ' }) </node>
</mrl-parse>
</example>

<example id="775">
<nl lang="en">
Where is the highest mountain of the United States ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN mountain)) (PP (IN of) (NP (DT the) (NNP United) (NNPS States))))))
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] mountain-[Place:2] of-[Place:3] the-[CountryName:5] United-[CountryName:5] States-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(mountain(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ mountain ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="776">
<nl lang="en">
Where is the highest point in Hawaii ?
</nl>
<nl lang="es">
que es el punto mas alto en hawaii ?
</nl>
<nl lang="ja">
hawai no mottomo takai chiten wa doko desu ka ?
</nl>
<nl lang="tr">
hawaii deki en yuksek nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Hawaii))))))
</syn>
<syn lang="es">
(S que es el punto mas alto en hawaii)
</syn>
<syn lang="ja">
(S hawai no mottomo takai chiten wa doko desu ka)
</syn>
<syn lang="tr">
(S hawaii deki en yuksek nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Hawaii-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('hawaii')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(hawaii)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="777">
<nl lang="en">
Where is the highest point in Montana ?
</nl>
<nl lang="es">
donde esta el punto mas alto en montana ?
</nl>
<nl lang="ja">
montana no mottomo takai chiten wa doko desu ka ?
</nl>
<nl lang="tr">
montana daki en yuksek nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Montana))))))
</syn>
<syn lang="es">
(S donde esta el punto mas alto en montana)
</syn>
<syn lang="ja">
(S montana no mottomo takai chiten wa doko desu ka)
</syn>
<syn lang="tr">
(S montana daki en yuksek nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] point-[Place:2] in-[Place:3] Montana-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(highest(place(loc_2(stateid('montana')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(place(A),loc(A,B),const(B,stateid(montana)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="778">
<nl lang="en">
Where is the lowest point in Maryland ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (NNP Maryland))))))
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] Maryland-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('maryland')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(maryland)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' maryland ' }) </node>
</mrl-parse>
</example>

<example id="779">
<nl lang="en">
Where is the lowest point in the US ?
</nl>
<nl lang="es">
donde esta el punto mas bajo en los us ?
</nl>
<nl lang="ja">
beikoku no mottomo hikui chiten wa doko desu ka ?
</nl>
<nl lang="tr">
us deki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN in) (NP (DT the) (NNP US))))))
</syn>
<syn lang="es">
(S donde esta el punto mas bajo en los us)
</syn>
<syn lang="ja">
(S beikoku no mottomo hikui chiten wa doko desu ka)
</syn>
<syn lang="tr">
(S us deki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] in-[Place:3] the-[CountryName:5] US-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="780">
<nl lang="en">
Where is the lowest spot in Iowa ?
</nl>
<nl lang="es">
donde esta el punto mas bajo en iowa ?
</nl>
<nl lang="ja">
aiowa no mottomo hikui chiten wa nan desu ka ?
</nl>
<nl lang="tr">
iowa daki en alcak nokta nerededir ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN spot)) (PP (IN in) (NP (NNP Iowa))))))
</syn>
<syn lang="es">
(S donde esta el punto mas bajo en iowa)
</syn>
<syn lang="ja">
(S aiowa no mottomo hikui chiten wa nan desu ka)
</syn>
<syn lang="tr">
(S iowa daki en alcak nokta nerededir)
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] spot-[Place:2] in-[Place:3] Iowa-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(stateid('iowa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,lowest(A,(place(A),loc(A,B),const(B,stateid(iowa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="781">
<nl lang="en">
Where is the most populated area of New Mexico ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ populated)) (NN area)) (PP (IN of) (NP (NNP New) (NNP Mexico))))))
</syn>
<augsyn lang="en">
(S Where-[Query:0] is-[Query:0] the-[City:1] most-[City:1] populated-[City:1] area-[City:2] of-[City:3] New-[StateName:5] Mexico-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('new mexico'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(population(A,B),city(A),loc(A,C),const(C,stateid('new mexico')))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="782">
<nl lang="en">
Where is the smallest city ?
</nl>
<syn lang="en">
(SBARQ (WHADVP (WRB Where)) (SQ (VBZ is) (NP (DT the) (JJS smallest) (NN city))))
</syn>
<augsyn lang="en">
(S Where-[State:1] is-[State:1] the-[City:2] smallest-[City:2] city-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(loc_1(smallest(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(loc(B,A),smallest(B,city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ smallest ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="783">
<nl lang="en">
Which capitals are in the states that border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS capitals)) (SQ (VBP are) (PP (IN in) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NNP Texas)))))))))
</syn>
<augsyn lang="en">
(S Which-[City:1] capitals-[City:1] are-[City:2] in-[City:2] the-[State:3] states-[State:3] that-[State:4] border-[State:4] Texas-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(capital(loc_2(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),loc(A,B),state(B),next_to(B,C),const(C,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="2"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="784">
<nl lang="en">
Which capitals are not major cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS capitals)) (SQ (VBP are) (RB not) (NP (JJ major) (NNS cities))))
</syn>
<augsyn lang="en">
(S Which-[City:2] capitals-[City:2] are-[City:1] not-[City:1] major-[City:3] cities-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(capital(all), major(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(capital(A),not((major(A),city(A)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ exclude ( *n:City , *n:City ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
<node id="3"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="785">
<nl lang="en">
Which city in California has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WDT Which) (NN city)) (PP (IN in) (NP (NNP California)))) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S Which-[City:2] city-[City:2] in-[City:3] California-[StateName:5] has-[City:1] the-[City:1] largest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(city(loc_2(stateid('california'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),loc(A,C),const(C,stateid(california)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' california ' }) </node>
</mrl-parse>
</example>

<example id="786">
<nl lang="en">
Which is the density of the state that the largest river in the United States runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (NN density)) (PP (IN of) (NP (NP (DT the) (NN state)) (SBAR (WHNP (WDT that)) (S (NP (NP (DT the) (JJS largest) (NN river)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States)))) (VP (VBZ runs) (PP (IN through))))))))))
</syn>
<augsyn lang="en">
(S Which-[Query:0] is-[Query:0] the-[Num:1] density-[Num:1] of-[Num:1] the-[State:2] state-[State:2] that-[State:3] the-[River:4] largest-[River:4] river-[River:5] in-[River:6] the-[CountryName:8] United-[CountryName:8] States-[CountryName:8] runs-[State:3] through-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(density_1(state(traverse_1(longest(river(loc_2(countryid('usa'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(density(B,A),state(B),longest(C,(river(C),loc(C,D),const(D,countryid(usa)))),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Num ) }) </node>
<node id="1"> *n:Num -> ({ density_1 ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="7"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="8"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="787">
<nl lang="en">
Which is the highest peak not in Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (JJS highest) (NN peak)) (RB not) (PP (IN in) (NP (NNP Alaska))))))
</syn>
<augsyn lang="en">
(S Which-[Query:0] is-[Query:0] the-[Place:1] highest-[Place:1] peak-[Place:3] not-[Place:2] in-[Place:4] Alaska-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(highest(exclude(mountain(all),  loc_2(stateid('alaska')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,highest(A,(mountain(A),not((loc(A,B),const(B,stateid(alaska)))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ exclude ( *n:Place , *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ mountain ( all ) }) </node>
<node id="4"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="788">
<nl lang="en">
Which is the longest river in USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S Which-[Query:0] is-[Query:0] the-[River:1] longest-[River:1] river-[River:2] in-[River:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(longest(river(loc_2(countryid('usa')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,longest(A,(river(A),loc(A,B),const(B,countryid(usa)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="789">
<nl lang="en">
Which is the lowest point of the states that the Mississippi runs through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (NP (DT the) (JJS lowest) (NN point)) (PP (IN of) (NP (NP (DT the) (NNS states)) (SBAR (WHNP (WDT that)) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ runs) (PP (IN through))))))))))
</syn>
<augsyn lang="en">
(S Which-[Query:0] is-[Query:0] the-[Place:1] lowest-[Place:1] point-[Place:2] of-[Place:3] the-[State:4] states-[State:4] that-[State:5] the-[RiverName:7] Mississippi-[RiverName:7] runs-[State:5] through-[State:5])
</augsyn>
<mrl lang="geo-funql">
answer(lowest(place(loc_2(state(traverse_1(riverid('mississippi')))))))
</mrl>
<mrl lang="geo-prolog">
answer(B,lowest(B,(place(B),loc(B,A),state(A),const(C,riverid(mississippi)),traverse(C,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:Place ) }) </node>
<node id="1"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="2"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="6"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="7"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="790">
<nl lang="en">
Which is the shortest river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (DT the) (JJS shortest) (NN river))))
</syn>
<augsyn lang="en">
(S Which-[Query:0] is-[Query:0] the-[River:1] shortest-[River:1] river-[River:2])
</augsyn>
<mrl lang="geo-funql">
answer(shortest(river(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,shortest(A,river(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ shortest ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="791">
<nl lang="en">
Which is the smallest state ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which)) (SQ (VBZ is) (NP (DT the) (JJS smallest) (NN state))))
</syn>
<augsyn lang="en">
(S Which-[Query:0] is-[Query:0] the-[State:1] smallest-[State:1] state-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="792">
<nl lang="en">
Which of the states bordering Pennsylvania has the largest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WDT Which)) (PP (IN of) (NP (NP (DT the) (NNS states)) (VP (VBG bordering) (NP (NNP Pennsylvania)))))) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN population)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] of-[State:2] the-[State:2] states-[State:2] bordering-[State:3] Pennsylvania-[StateName:5] has-[State:1] the-[State:1] largest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(next_to_2(stateid('pennsylvania'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),next_to(A,C),const(C,stateid(pennsylvania)),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' pennsylvania ' }) </node>
</mrl-parse>
</example>

<example id="793">
<nl lang="en">
Which river goes through the most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ goes) (PP (IN through) (NP (DT the) (JJS most) (NNS states))))))
</syn>
<augsyn lang="en">
(S Which-[River:2] river-[River:2] goes-[River:3] through-[River:3] the-[River:1] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="794">
<nl lang="en">
Which river runs through most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ runs) (PP (IN through) (NP (JJS most) (NNS states))))))
</syn>
<augsyn lang="en">
(S Which-[River:2] river-[River:2] runs-[River:3] through-[River:3] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="795">
<nl lang="en">
Which river runs through the most states ?
</nl>
<nl lang="es">
cual rio corre por mas estados ?
</nl>
<nl lang="ja">
donna kawa ga mottomo ooku no kawa wo nagarete imasu ka ?
</nl>
<nl lang="tr">
hangi nehir en cok eyaletten gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ runs) (PP (IN through) (NP (DT the) (JJS most) (NNS states))))))
</syn>
<syn lang="es">
(S cual rio corre por mas estados)
</syn>
<syn lang="ja">
(S donna kawa ga mottomo ooku no kawa wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S hangi nehir en cok eyaletten gecer)
</syn>
<augsyn lang="en">
(S Which-[River:2] river-[River:2] runs-[River:3] through-[River:3] the-[River:1] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="796">
<nl lang="en">
Which river traverses most states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN river)) (SQ (VP (VBZ traverses) (NP (JJS most) (NNS states)))))
</syn>
<augsyn lang="en">
(S Which-[River:2] river-[River:2] traverses-[River:3] most-[River:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(river(traverse_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(river(A),traverse(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ most ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="797">
<nl lang="en">
Which rivers are in Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VBP are) (PP (IN in) (NP (NNP Alaska)))))
</syn>
<augsyn lang="en">
(S Which-[River:1] rivers-[River:1] are-[River:2] in-[River:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(loc_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),loc(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ loc_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="798">
<nl lang="en">
Which rivers do not run through Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VBP do) (RB not) (VP (VB run) (PP (IN through) (NP (NNP Texas))))))
</syn>
<augsyn lang="en">
(S Which-[River:2] rivers-[River:2] do-[River:1] not-[River:1] run-[River:3] through-[River:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(river(all), traverse_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),not((traverse(A,B),const(B,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="799">
<nl lang="en">
Which rivers do not run through USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VBP do) (RB not) (VP (VB run) (PP (IN through) (NP (NNP USA))))))
</syn>
<augsyn lang="en">
(S Which-[River:2] rivers-[River:2] do-[River:1] not-[River:1] run-[River:3] through-[River:3] USA-[CountryName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(river(all), traverse_2(countryid('usa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),not((traverse(A,B),const(B,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ exclude ( *n:River , *n:River ) }) </node>
<node id="2"> *n:River -> ({ river ( all ) }) </node>
<node id="3"> *n:River -> ({ traverse_2 ( *n:Country ) }) </node>
<node id="4"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="5"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="800">
<nl lang="en">
Which rivers flow through Alaska ?
</nl>
<nl lang="es">
cuales rios corren por alaska ?
</nl>
<nl lang="ja">
dono kawa wa arasuka wo nagarete imasu ka ?
</nl>
<nl lang="tr">
hangi nehirler alaska nin icinden akar ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP flow) (PP (IN through) (NP (NNP Alaska))))))
</syn>
<syn lang="es">
(S cuales rios corren por alaska)
</syn>
<syn lang="ja">
(S dono kawa wa arasuka wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S hangi nehirler alaska nin icinden akar)
</syn>
<augsyn lang="en">
(S Which-[River:1] rivers-[River:1] flow-[River:2] through-[River:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="801">
<nl lang="en">
Which rivers run through states bordering New Mexico ?
</nl>
<nl lang="es">
cuales rios corren por estados bordeando a new mexico ?
</nl>
<nl lang="ja">
donna kawa wa nyuu mekishiko ni rinsetsu suru shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
hangi nehirler new mexico ya siniri olan eyaletlerden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (NNS states)) (VP (VBG bordering) (NP (NNP New) (NNP Mexico))))))))
</syn>
<syn lang="es">
(S cuales rios corren por estados bordeando a new_mexico)
</syn>
<syn lang="ja">
(S donna kawa wa nyuu_mekishiko ni rinsetsu suru shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S hangi nehirler new_mexico ya siniri olan eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Which-[River:1] rivers-[River:1] run-[River:2] through-[River:2] states-[State:3] bordering-[State:4] New-[StateName:6] Mexico-[StateName:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(stateid('new mexico'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),const(C,stateid('new mexico'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="6"> *n:StateName -> ({ ' new mexico ' }) </node>
</mrl-parse>
</example>

<example id="802">
<nl lang="en">
Which rivers run through states that border the state with the capital Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (NNS states)) (SBAR (WHNP (WDT that)) (S (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (NN capital)) (NP (NNP Austin)))))))))))))
</syn>
<augsyn lang="en">
(S Which-[River:1] rivers-[River:1] run-[River:2] through-[River:2] states-[State:3] that-[State:4] border-[State:4] the-[State:5] state-[State:5] with-[State:6] the-[City:7] capital-[City:7] Austin-[CityName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(next_to_2(state(loc_1(capital(cityid('austin', _)))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),next_to(B,C),state(C),loc(D,C),capital(D),const(D,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ capital ( *n:City ) }) </node>
<node id="8"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="9"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="803">
<nl lang="en">
Which rivers run through states with fewest cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (NNS states)) (PP (IN with) (NP (JJS fewest) (NNS cities))))))))
</syn>
<augsyn lang="en">
(S Which-[River:1] rivers-[River:1] run-[River:2] through-[River:2] states-[State:4] with-[State:5] fewest-[State:3] cities-[City:6])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(fewest(state(loc_1(city(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),fewest(B,C,(state(B),loc(C,B),city(C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ fewest ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="5"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="804">
<nl lang="en">
Which rivers run through the state with the largest city in the US ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (DT the) (NNP US))))))))))
</syn>
<augsyn lang="en">
(S Which-[River:1] rivers-[River:1] run-[River:2] through-[River:2] the-[State:3] state-[State:3] with-[State:4] the-[City:5] largest-[City:5] city-[City:6] in-[City:7] the-[CountryName:9] US-[CountryName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(loc_1(largest(city(loc_2(countryid('usa')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),loc(C,B),largest(C,(city(C),loc(C,D),const(D,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="6"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="7"> *n:City -> ({ loc_2 ( *n:Country ) }) </node>
<node id="8"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="9"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="805">
<nl lang="en">
Which rivers run through the state with the lowest elevation in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS rivers)) (SQ (VP (VBP run) (PP (IN through) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (NP (DT the) (JJS lowest) (NN elevation)) (PP (IN in) (NP (DT the) (NNP USA))))))))))
</syn>
<augsyn lang="en">
(S Which-[River:1] rivers-[River:1] run-[River:2] through-[River:2] the-[State:3] state-[State:3] with-[State:4] the-[Place:5] lowest-[Place:5] elevation-[Place:6] in-[Place:7] the-[CountryName:9] USA-[CountryName:9])
</augsyn>
<mrl lang="geo-funql">
answer(river(traverse_2(state(loc_1(lowest(place(loc_2(countryid('usa')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(river(A),traverse(A,B),state(B),loc(C,B),lowest(C,(place(C),loc(C,D),const(D,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:River ) }) </node>
<node id="1"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="2"> *n:River -> ({ traverse_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:Country ) }) </node>
<node id="8"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="9"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="806">
<nl lang="en">
Which state border Kentucky ?
</nl>
<nl lang="es">
cual estado bordean a kentucky ?
</nl>
<nl lang="ja">
kentakkii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin kentucky ye siniri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBP border) (NP (NNP Kentucky)))))
</syn>
<syn lang="es">
(S cual estado bordean a kentucky)
</syn>
<syn lang="ja">
(S kentakkii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin kentucky ye siniri vardir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] border-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="807">
<nl lang="en">
Which state borders Florida ?
</nl>
<nl lang="es">
cual estado bordea a florida ?
</nl>
<nl lang="ja">
furorida ni rinsetsu suru shuu wa dochira desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin florida ya siniri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ borders) (NP (NNP Florida)))))
</syn>
<syn lang="es">
(S cual estado bordea a florida)
</syn>
<syn lang="ja">
(S furorida ni rinsetsu suru shuu wa dochira desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin florida ya siniri vardir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] borders-[State:2] Florida-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('florida'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(florida))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' florida ' }) </node>
</mrl-parse>
</example>

<example id="808">
<nl lang="en">
Which state borders Hawaii ?
</nl>
<nl lang="es">
cual estado bordea a hawaii ?
</nl>
<nl lang="ja">
hawai ni rinsetsu suru shuu wa dochira desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin hawaii ya siniri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ borders) (NP (NNP Hawaii)))))
</syn>
<syn lang="es">
(S cual estado bordea a hawaii)
</syn>
<syn lang="ja">
(S hawai ni rinsetsu suru shuu wa dochira desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin hawaii ya siniri vardir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] borders-[State:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="809">
<nl lang="en">
Which state borders most states ?
</nl>
<nl lang="es">
cual estado bordea a los mas estados ?
</nl>
<nl lang="ja">
donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka ?
</nl>
<nl lang="tr">
hangi eyaletin en cok eyalete siniri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ borders) (NP (JJS most) (NNS states)))))
</syn>
<syn lang="es">
(S cual estado bordea a los mas estados)
</syn>
<syn lang="ja">
(S donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin en cok eyalete siniri vardir)
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] borders-[State:3] most-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="810">
<nl lang="en">
Which state borders the most states ?
</nl>
<nl lang="es">
cual estado bordea a mas estados ?
</nl>
<nl lang="ja">
donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka ?
</nl>
<nl lang="tr">
hangi eyaletin en cok eyalete siniri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ borders) (NP (DT the) (JJS most) (NNS states)))))
</syn>
<syn lang="es">
(S cual estado bordea a mas estados)
</syn>
<syn lang="ja">
(S donna shuu ga mottomo ooku no shuu ni rinsetsu shite imasu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin en cok eyalete siniri vardir)
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] borders-[State:3] the-[State:1] most-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(next_to_2(state(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),next_to(A,B),state(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="811">
<nl lang="en">
Which state capital has the smallest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state) (NN capital)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (NN population)))))
</syn>
<augsyn lang="en">
(S Which-[City:2] state-[City:2] capital-[City:2] has-[City:1] the-[City:1] smallest-[City:1] population-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(population_1(capital(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(capital(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ smallest_one ( population_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ capital ( all ) }) </node>
</mrl-parse>
</example>

<example id="812">
<nl lang="en">
Which state contains most rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ contains) (NP (JJS most) (NNS rivers)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] contains-[State:3] most-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="813">
<nl lang="en">
Which state has the biggest population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS biggest) (NN population)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] biggest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="814">
<nl lang="en">
Which state has the greatest density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS greatest) (NN density)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] greatest-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="815">
<nl lang="en">
Which state has the greatest population ?
</nl>
<nl lang="es">
cual estado tiene la poblacion mas grande ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii jinkou ga ariumasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk nufusa sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS greatest) (NN population)))))
</syn>
<syn lang="es">
(S cual estado tiene la poblacion mas grande)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii jinkou ga ariumasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk nufusa sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] greatest-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="816">
<nl lang="en">
Which state has the highest elevation ?
</nl>
<nl lang="es">
cual estado tiene la elevacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai kaibatsu ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek yukseltiye sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN elevation)))))
</syn>
<syn lang="es">
(S cual estado tiene la elevacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai kaibatsu ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek yukseltiye sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[Place:3] highest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A), loc(B,A), highest(B,(place(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="817">
<nl lang="en">
Which state has the highest peak in the country ?
</nl>
<nl lang="es">
cual estado tiene el pico mas alto en el pais ?
</nl>
<nl lang="ja">
dono shuu wa kuni no mottomo takai choujou ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet ulkedeki en yuksek zirveye sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (JJS highest) (NN peak)) (PP (IN in) (NP (DT the) (NN country)))))))
</syn>
<syn lang="es">
(S cual estado tiene el pico mas alto en el pais)
</syn>
<syn lang="ja">
(S dono shuu wa kuni no mottomo takai choujou ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet ulkedeki en yuksek zirveye sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[Place:3] highest-[Place:3] peak-[Place:4] in-[Place:3] the-[Place:3] country-[Place:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,(mountain(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="818">
<nl lang="en">
Which state has the highest point ?
</nl>
<nl lang="es">
cual estado tiene el punto mas alto ?
</nl>
<nl lang="ja">
dono shuu wa mottomo takai chiten ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek noktaya sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN point)))))
</syn>
<syn lang="es">
(S cual estado tiene el punto mas alto)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo takai chiten ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek noktaya sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[Place:3] highest-[Place:3] point-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(highest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),highest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="819">
<nl lang="en">
Which state has the highest population density ?
</nl>
<nl lang="es">
cual estado tiene la densidad de poblacion mas alta ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii jinkou no mitsudo ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en yuksek nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN population) (NN density)))))
</syn>
<syn lang="es">
(S cual estado tiene la densidad de poblacion mas alta)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii jinkou no mitsudo ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en yuksek nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] highest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="820">
<nl lang="en">
Which state has the largest city ?
</nl>
<nl lang="es">
cual estado tiene la ciudad mas grande ?
</nl>
<nl lang="ja">
dono shuu wa mottomo ookii toshi ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en buyuk sehre sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN city)))))
</syn>
<syn lang="es">
(S cual estado tiene la ciudad mas grande)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo ookii toshi ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en buyuk sehre sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[City:3] largest-[City:3] city-[City:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),largest(B,(city(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="821">
<nl lang="en">
Which state has the largest density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS largest) (NN density)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] largest-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="822">
<nl lang="en">
Which state has the least population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS least) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] least-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="823">
<nl lang="en">
Which state has the longest river ?
</nl>
<nl lang="es">
cual estado tiene el rio mas largo ?
</nl>
<nl lang="ja">
dono shuu wa mottomo nagai kawa ga arimasu ka ?
</nl>
<nl lang="tr">
hangi eyalet en uzun nehre sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS longest) (NN river)))))
</syn>
<syn lang="es">
(S cual estado tiene el rio mas largo)
</syn>
<syn lang="ja">
(S dono shuu wa mottomo nagai kawa ga arimasu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en uzun nehre sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[River:3] longest-[River:3] river-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),longest(B,(river(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="824">
<nl lang="en">
Which state has the lowest elevation ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS lowest) (NN elevation)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[Place:3] lowest-[Place:3] elevation-[Place:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),lowest(B,place(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( all ) }) </node>
</mrl-parse>
</example>

<example id="825">
<nl lang="en">
Which state has the lowest point that borders Idaho ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (JJS lowest) (NN point)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Idaho)))))))))
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[Place:3] lowest-[Place:3] point-[Place:4] that-[Place:5] borders-[State:6] Idaho-[StateName:8])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(lowest(place(loc_2(next_to_2(stateid('idaho'))))))))
</mrl>
<mrl lang="geo-prolog">
answer(D,(state(D),loc(B,D),lowest(B,(place(B), state(A), loc(B,A), next_to(A,C),const(C,stateid(idaho))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ lowest ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="7"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="8"> *n:StateName -> ({ ' idaho ' }) </node>
</mrl-parse>
</example>

<example id="826">
<nl lang="en">
Which state has the lowest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS lowest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] lowest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="827">
<nl lang="en">
Which state has the most major cities ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (JJ major) (NNS cities)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] major-[City:4] cities-[City:5])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(major(city(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),major(B),city(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

<example id="828">
<nl lang="en">
Which state has the most major rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (JJ major) (NNS rivers)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] major-[River:4] rivers-[River:5])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),major(B),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="829">
<nl lang="en">
Which state has the most major rivers running through it ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (JJS most) (JJ major) (NNS rivers)) (VP (VBG running) (PP (IN through) (NP (PRP it))))))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] major-[River:4] rivers-[River:5] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(major(river(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),major(B),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ major ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="830">
<nl lang="en">
Which state has the most people ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (NNS people)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] most-[State:1] people-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="831">
<nl lang="en">
Which state has the most population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (NN population)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] most-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(population_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(state(A),population(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ largest_one ( population_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="832">
<nl lang="en">
Which state has the most rivers ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS most) (NNS rivers)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] rivers-[River:4])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(loc_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),loc(B,A),river(B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="833">
<nl lang="en">
Which state has the most rivers running through it ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (JJS most) (NNS rivers)) (VP (VBG running) (PP (IN through) (NP (PRP it))))))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:3] the-[State:1] most-[State:1] rivers-[River:4] running-[State:3] through-[State:3] it-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(most(state(traverse_1(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,most(A,B,(state(A),river(B),traverse(B,A))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ most ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="834">
<nl lang="en">
Which state has the Red river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJ Red) (NN river)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] has-[State:2] the-[River:3] Red-[RiverName:5] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(river(riverid('red')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),const(B,riverid(red)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' red ' }) </node>
</mrl-parse>
</example>

<example id="835">
<nl lang="en">
Which state has the smallest area that borders Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (NP (DT the) (JJS smallest) (NN area)) (SBAR (WHNP (WDT that)) (S (VP (VBZ borders) (NP (NNP Texas)))))))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] smallest-[State:1] area-[State:1] that-[State:3] borders-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(area_1(state(next_to_2(stateid('texas'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),area(A,B),next_to(A,C),const(C,stateid(texas)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="836">
<nl lang="en">
Which state has the smallest average urban population ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (JJ average) (JJ urban) (NN population)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] smallest-[State:1] average-[State:1] urban-[State:1] population-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="837">
<nl lang="en">
Which state has the smallest population density ?
</nl>
<nl lang="es">
cual estado tiene la densidad de poblacion mas pequena ?
</nl>
<nl lang="ja">
mottomo chiisai jinkou no mitsudo ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en kucuk nufus yogunluguna sahiptir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJS smallest) (NN population) (NN density)))))
</syn>
<syn lang="es">
(S cual estado tiene la densidad de poblacion mas pequena)
</syn>
<syn lang="ja">
(S mottomo chiisai jinkou no mitsudo ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en kucuk nufus yogunluguna sahiptir)
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] smallest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="838">
<nl lang="en">
Which state has the sparsest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VP (VBZ has) (NP (DT the) (JJ sparsest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] has-[State:1] the-[State:1] sparsest-[State:1] population-[State:1] density-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest_one(density_1(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(B,(state(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest_one ( density_1 ( *n:State ) ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="839">
<nl lang="en">
Which state is Kalamazoo in ?
</nl>
<nl lang="es">
en que estado esta kalamazoo ?
</nl>
<nl lang="ja">
dono shuu ni wa karamazuu kawa desu ka ?
</nl>
<nl lang="tr">
kalamazoo hangi eyalettedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ is) (NP (NNP Kalamazoo)) (PP (IN in))))
</syn>
<syn lang="es">
(S en que estado esta kalamazoo)
</syn>
<syn lang="ja">
(S dono shuu ni wa karamazuu kawa desu ka)
</syn>
<syn lang="tr">
(S kalamazoo hangi eyalettedir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] is-[State:2] Kalamazoo-[CityName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(cityid('kalamazoo', _))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,cityid(kalamazoo,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="4"> *n:CityName -> ({ ' kalamazoo ' }) </node>
</mrl-parse>
</example>

<example id="840">
<nl lang="en">
Which state is Mount McKinley in ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ is) (NP (NNP Mount) (NNP McKinley)) (PP (IN in))))
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] is-[State:2] Mount-[PlaceName:4] McKinley-[PlaceName:4] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(placeid('mount mckinley'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,placeid('mount mckinley')),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ placeid ( *n:PlaceName ) }) </node>
<node id="4"> *n:PlaceName -> ({ ' mount mckinley ' }) </node>
</mrl-parse>
</example>

<example id="841">
<nl lang="en">
Which state is the city Denver located in ?
</nl>
<nl lang="es">
en cual estado se encuentra la ciudad denver ?
</nl>
<nl lang="ja">
dono shuu ni wa denbaru toshi ga arimasu ka ?
</nl>
<nl lang="tr">
denver sehri hangi eyalettedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ is) (NP (NP (DT the) (NN city)) (NP (NNP Denver))) (VP (VBN located) (PP (IN in)))))
</syn>
<syn lang="es">
(S en cual estado se encuentra la ciudad denver)
</syn>
<syn lang="ja">
(S dono shuu ni wa denbaru toshi ga arimasu ka)
</syn>
<syn lang="tr">
(S denver sehri hangi eyalettedir)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] is-[State:2] the-[City:3] city-[City:3] Denver-[CityName:5] located-[State:2] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('denver', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),city(B),const(B,cityid(denver,_)),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' denver ' }) </node>
</mrl-parse>
</example>

<example id="842">
<nl lang="en">
Which state is the largest city in Montana in ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ is) (NP (NP (DT the) (JJS largest) (NN city)) (PP (IN in) (NP (NNP Montana)))) (PP (IN in))))
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] is-[State:2] the-[City:3] largest-[City:3] city-[City:4] in-[City:5] Montana-[StateName:7] in-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(loc_2(stateid('montana')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),largest(B,(city(B),loc(B,C),const(C,stateid(montana)))),loc(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ loc_2 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="7"> *n:StateName -> ({ ' montana ' }) </node>
</mrl-parse>
</example>

<example id="843">
<nl lang="en">
Which state is the smallest ?
</nl>
<nl lang="es">
cual estado es el mas pequeno ?
</nl>
<nl lang="ja">
mottomo chiisai shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyalet en kucuktur ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NN state)) (SQ (VBZ is) (NP (DT the) (JJS smallest))))
</syn>
<syn lang="es">
(S cual estado es el mas pequeno)
</syn>
<syn lang="ja">
(S mottomo chiisai shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyalet en kucuktur)
</syn>
<augsyn lang="en">
(S Which-[State:2] state-[State:2] is-[State:1] the-[State:1] smallest-[State:1])
</augsyn>
<mrl lang="geo-funql">
answer(smallest(state(all)))
</mrl>
<mrl lang="geo-prolog">
answer(A,smallest(A,state(A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ smallest ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="844">
<nl lang="en">
Which states adjoin Alabama ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP adjoin) (NP (NNP Alabama)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] adjoin-[State:2] Alabama-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alabama'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="845">
<nl lang="en">
Which states border Alabama ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Alabama)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Alabama-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alabama'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alabama))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alabama ' }) </node>
</mrl-parse>
</example>

<example id="846">
<nl lang="en">
Which states border Alaska ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Alaska)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Alaska-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('alaska'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(alaska))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' alaska ' }) </node>
</mrl-parse>
</example>

<example id="847">
<nl lang="en">
Which states border Arizona ?
</nl>
<nl lang="es">
cuales estados bordean a arizona ?
</nl>
<nl lang="ja">
arizona ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
arizona a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Arizona)))))
</syn>
<syn lang="es">
(S cuales estados bordean a arizona)
</syn>
<syn lang="ja">
(S arizona ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S arizona a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Arizona-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('arizona'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(arizona))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' arizona ' }) </node>
</mrl-parse>
</example>

<example id="848">
<nl lang="en">
Which states border Colorado ?
</nl>
<nl lang="es">
cuales estados bordean a colorado ?
</nl>
<nl lang="ja">
kororado ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
colorado a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Colorado)))))
</syn>
<syn lang="es">
(S cuales estados bordean a colorado)
</syn>
<syn lang="ja">
(S kororado ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S colorado a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Colorado-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('colorado'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(colorado))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="849">
<nl lang="en">
Which states border Hawaii ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Hawaii)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Hawaii-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('hawaii'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(hawaii))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' hawaii ' }) </node>
</mrl-parse>
</example>

<example id="850">
<nl lang="en">
Which states border Illinois ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Illinois)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Illinois-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('illinois'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(illinois))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' illinois ' }) </node>
</mrl-parse>
</example>

<example id="851">
<nl lang="en">
Which states border Iowa ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Iowa)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Iowa-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('iowa'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(iowa))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' iowa ' }) </node>
</mrl-parse>
</example>

<example id="852">
<nl lang="en">
Which states border Kentucky ?
</nl>
<nl lang="es">
cuales estados bordean a kentucky ?
</nl>
<nl lang="ja">
kentakkii ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
kentucky a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Kentucky)))))
</syn>
<syn lang="es">
(S cuales estados bordean a kentucky)
</syn>
<syn lang="ja">
(S kentakkii ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S kentucky a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Kentucky-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('kentucky'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(kentucky))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' kentucky ' }) </node>
</mrl-parse>
</example>

<example id="853">
<nl lang="en">
Which states border Michigan ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Michigan)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Michigan-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('michigan'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(michigan))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' michigan ' }) </node>
</mrl-parse>
</example>

<example id="854">
<nl lang="en">
Which states border New York ?
</nl>
<nl lang="es">
cuales estados bordean a new york ?
</nl>
<nl lang="ja">
nyuu yooku ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
new york a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP New) (NNP York)))))
</syn>
<syn lang="es">
(S cuales estados bordean a new_york)
</syn>
<syn lang="ja">
(S nyuu_yooku ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S new_york a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] New-[StateName:4] York-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('new york'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('new york'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' new york ' }) </node>
</mrl-parse>
</example>

<example id="855">
<nl lang="en">
Which states border no other states ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (DT no) (JJ other) (NNS states)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] states-[State:2] border-[State:3] no-[State:1] other-[State:1] states-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(state(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),state(B)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="856">
<nl lang="en">
Which states border South Dakota ?
</nl>
<nl lang="es">
cuales estados bordean a south dakota ?
</nl>
<nl lang="ja">
sausu dakota ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
south dakota a siniri olan eyaletler nelerdir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP South) (NNP Dakota)))))
</syn>
<syn lang="es">
(S cuales estados bordean a south_dakota)
</syn>
<syn lang="ja">
(S sausu_dakota ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S south_dakota a siniri olan eyaletler nelerdir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] South-[StateName:4] Dakota-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('south dakota'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid('south dakota'))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' south dakota ' }) </node>
</mrl-parse>
</example>

<example id="857">
<nl lang="en">
Which states border states through which the Mississippi traverses ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NP (NNS states)) (SBAR (WHPP (IN through) (WHNP (WDT which))) (S (NP (DT the) (NNP Mississippi)) (VP (VBZ traverses))))))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] states-[State:3] through-[State:4] which-[State:4] the-[RiverName:6] Mississippi-[RiverName:6] traverses-[State:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(state(traverse_1(riverid('mississippi'))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),state(B),const(C,riverid(mississippi)),traverse(C,B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="6"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="858">
<nl lang="en">
Which states border Texas ?
</nl>
<nl lang="es">
cuales estados bordean a texas ?
</nl>
<nl lang="ja">
tekisasu ni rinsetsu suru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin texas ye siniri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NNP Texas)))))
</syn>
<syn lang="es">
(S cuales estados bordean a texas)
</syn>
<syn lang="ja">
(S tekisasu ni rinsetsu suru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin texas ye siniri vardir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] Texas-[StateName:4])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,stateid(texas))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="4"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="859">
<nl lang="en">
Which states border the longest river in the USA ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (JJS longest) (NN river)) (PP (IN in) (NP (DT the) (NNP USA)))))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] the-[River:3] longest-[River:3] river-[River:4] in-[River:5] the-[CountryName:7] USA-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(longest(river(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="860">
<nl lang="en">
Which states border the Missouri river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (DT the) (NNP Missouri) (NN river)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] the-[River:3] Missouri-[RiverName:5] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),const(B,riverid(missouri)),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="861">
<nl lang="en">
Which states border the state with the smallest area ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP border) (NP (NP (DT the) (NN state)) (PP (IN with) (NP (DT the) (JJS smallest) (NN area)))))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] border-[State:2] the-[State:4] state-[State:4] with-[State:3] the-[State:3] smallest-[State:3] area-[State:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(next_to_2(smallest_one(area_1(state(all))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),next_to(A,B),smallest(C,(state(B),area(B,C)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="3"> *n:State -> ({ smallest_one ( area_1 ( *n:State ) ) }) </node>
<node id="4"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="862">
<nl lang="en">
Which state 's capital city is the largest ?
</nl>
<nl lang="es">
cual estado tiene la ciudad capital mas grande ?
</nl>
<nl lang="ja">
dono shuu no shuto wa mottomo ookii desu ka ?
</nl>
<nl lang="tr">
hangi eyaletin baskenti en buyuktur ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WHNP (WDT Which) (NN state) (POS 's)) (NN capital) (NN city)) (SQ (VBZ is) (NP (DT the) (JJS largest))))
</syn>
<syn lang="es">
(S cual estado tiene la ciudad capital mas grande)
</syn>
<syn lang="ja">
(S dono shuu no shuto wa mottomo ookii desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletin baskenti en buyuktur)
</syn>
<augsyn lang="en">
(S Which-[State:1] state-[State:1] 's-[State:2] capital-[City:5] city-[City:4] is-[City:3] the-[City:3] largest-[City:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(largest(city(capital_1(state(all)))))))
</mrl>
<mrl lang="geo-prolog">
answer(C,(state(C),loc(B,C), largest(B,(capital(A,B),city(B),state(A)))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ largest ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ capital_1 ( *n:State ) }) </node>
<node id="6"> *n:State -> ({ state ( all ) }) </node>
</mrl-parse>
</example>

<example id="863">
<nl lang="en">
Which states do Colorado river flow through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBP do) (NP (NNP Colorado) (NN river)) (VP (VB flow) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] do-[State:2] Colorado-[RiverName:5] river-[River:3] flow-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(colorado)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="864">
<nl lang="en">
Which states does not border Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (RB not) (VP (VB border) (NP (NNP Texas)))))
</syn>
<augsyn lang="en">
(S Which-[State:2] states-[State:2] does-[State:1] not-[State:1] border-[State:3] Texas-[StateName:5])
</augsyn>
<mrl lang="geo-funql">
answer(exclude(state(all), next_to_2(stateid('texas'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),not((next_to(A,B),const(B,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ exclude ( *n:State , *n:State ) }) </node>
<node id="2"> *n:State -> ({ state ( all ) }) </node>
<node id="3"> *n:State -> ({ next_to_2 ( *n:State ) }) </node>
<node id="4"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="5"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="865">
<nl lang="en">
Which states does the Chattahoochee river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Chattahoochee) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[River:3] Chattahoochee-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('chattahoochee')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(chattahoochee)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' chattahoochee ' }) </node>
</mrl-parse>
</example>

<example id="866">
<nl lang="en">
Which states does the Colorado river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Colorado) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[River:3] Colorado-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('colorado')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(colorado)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="867">
<nl lang="en">
Which states does the longest river cross ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (JJS longest) (NN river)) (VP (VB cross))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[River:3] longest-[River:3] river-[River:4] cross-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),longest(B,river(B)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="868">
<nl lang="en">
Which states does the longest river run through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (JJS longest) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[River:3] longest-[River:3] river-[River:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(all)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),longest(B,river(B)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="869">
<nl lang="en">
Which states does the Mississippi river run through ?
</nl>
<nl lang="es">
por cuales estados corre el rio mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa donna shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi nehri hangi eyaletlerden gecmektedir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Mississippi) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuales estados corre el rio mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa donna shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi nehri hangi eyaletlerden gecmektedir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[River:3] Mississippi-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('mississippi')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="870">
<nl lang="en">
Which states does the Mississippi run through ?
</nl>
<nl lang="es">
por cuales estados corre el mississippi ?
</nl>
<nl lang="ja">
mishishippi kawa wa dono shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
mississippi hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Mississippi)) (VP (VB run) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuales estados corre el mississippi)
</syn>
<syn lang="ja">
(S mishishippi kawa wa dono shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S mississippi hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[RiverName:4] Mississippi-[RiverName:4] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(riverid('mississippi'))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(mississippi)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="4"> *n:RiverName -> ({ ' mississippi ' }) </node>
</mrl-parse>
</example>

<example id="871">
<nl lang="en">
Which states does the Missouri river pass through ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Missouri) (NN river)) (VP (VB pass) (PP (IN through)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[River:3] Missouri-[RiverName:5] river-[River:3] pass-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="872">
<nl lang="en">
Which states does the Missouri river run through ?
</nl>
<nl lang="es">
por cuales estados corre el rio missouri ?
</nl>
<nl lang="ja">
mizuuri kawa wa donna shuu wo nagarete imasu ka ?
</nl>
<nl lang="tr">
missouri nehri hangi eyaletlerden gecer ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VBZ does) (NP (DT the) (NNP Missouri) (NN river)) (VP (VB run) (PP (IN through)))))
</syn>
<syn lang="es">
(S por cuales estados corre el rio missouri)
</syn>
<syn lang="ja">
(S mizuuri kawa wa donna shuu wo nagarete imasu ka)
</syn>
<syn lang="tr">
(S missouri nehri hangi eyaletlerden gecer)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] does-[State:2] the-[River:3] Missouri-[RiverName:5] river-[River:3] run-[State:2] through-[State:2])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(river(riverid('missouri')))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),const(B,riverid(missouri)),river(B),traverse(B,A)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ riverid ( *n:RiverName ) }) </node>
<node id="5"> *n:RiverName -> ({ ' missouri ' }) </node>
</mrl-parse>
</example>

<example id="873">
<nl lang="en">
Which states have a major city named Austin ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP have) (NP (NP (DT a) (JJ major) (NN city)) (VP (VBN named) (NP (NNP Austin)))))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] have-[State:2] a-[City:3] major-[City:3] city-[City:4] named-[City:4] Austin-[CityName:6])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(major(city(cityid('austin', _))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),major(B),city(B),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ major ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="5"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="6"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="874">
<nl lang="en">
Which states have a river ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP have) (NP (DT a) (NN river)))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] have-[State:2] a-[River:3] river-[River:3])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(river(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),river(B)))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ river ( all ) }) </node>
</mrl-parse>
</example>

<example id="875">
<nl lang="en">
Which states have cities named Austin ?
</nl>
<nl lang="es">
cuales estados tienen ciudades con el nombre austin ?
</nl>
<nl lang="ja">
ausuchin to iu toshi ga aru shuu dono desu ka ?
</nl>
<nl lang="tr">
hangi eyaletlerde austin sehri vardir ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS cities)) (VP (VBN named) (NP (NNP Austin)))))))
</syn>
<syn lang="es">
(S cuales estados tienen ciudades con el nombre austin)
</syn>
<syn lang="ja">
(S ausuchin to iu toshi ga aru shuu dono desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletlerde austin sehri vardir)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] have-[State:2] cities-[City:3] named-[City:3] Austin-[CityName:5])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(city(cityid('austin', _)))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),city(B),const(B,cityid(austin,_))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:City ) }) </node>
<node id="3"> *n:City -> ({ city ( *n:City ) }) </node>
<node id="4"> *n:City -> ({ cityid ( *n:CityName , _ ) }) </node>
<node id="5"> *n:CityName -> ({ ' austin ' }) </node>
</mrl-parse>
</example>

<example id="876">
<nl lang="en">
Which states have points higher than the highest point in Colorado ?
</nl>
<nl lang="es">
cuales estados tienen puntos mas alto que el punto mas alto en colorado ?
</nl>
<nl lang="ja">
kororado no mottomo takai chiten yori motto takai chiten ga aru shuu wa nan desu ka ?
</nl>
<nl lang="tr">
hangi eyaletler colorado nun en yuksek noktasindan daha yuksek noktaya sahiptirler ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS points)) (ADJP (ADJP (JJR higher)) (PP (IN than) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Colorado))))))))))
</syn>
<syn lang="es">
(S cuales estados tienen puntos mas alto que el punto mas alto en colorado)
</syn>
<syn lang="ja">
(S kororado no mottomo takai chiten yori motto takai chiten ga aru shuu wa nan desu ka)
</syn>
<syn lang="tr">
(S hangi eyaletler colorado nun en yuksek noktasindan daha yuksek noktaya sahiptirler)
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] have-[State:2] points-[Place:3] higher-[Place:4] than-[Place:4] the-[Place:5] highest-[Place:5] point-[Place:6] in-[Place:7] Colorado-[StateName:9])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(place(higher_2(highest(place(loc_2(stateid('colorado')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),place(B),higher(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(colorado))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="9"> *n:StateName -> ({ ' colorado ' }) </node>
</mrl-parse>
</example>

<example id="877">
<nl lang="en">
Which states have points that are higher than the highest point in Texas ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP have) (NP (NP (NNS points)) (SBAR (WHNP (WDT that)) (S (VBP are) (ADJP (ADJP (JJR higher)) (PP (IN than) (NP (NP (DT the) (JJS highest) (NN point)) (PP (IN in) (NP (NNP Texas))))))))))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] have-[State:2] points-[Place:3] that-[Place:4] are-[Place:4] higher-[Place:4] than-[Place:4] the-[Place:5] highest-[Place:5] point-[Place:6] in-[Place:7] Texas-[StateName:9])
</augsyn>
<mrl lang="geo-funql">
answer(state(loc_1(place(higher_2(highest(place(loc_2(stateid('texas')))))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),loc(B,A),higher(B,C),highest(C,(place(C),loc(C,D),const(D,stateid(texas))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ loc_1 ( *n:Place ) }) </node>
<node id="3"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="4"> *n:Place -> ({ higher_2 ( *n:Place ) }) </node>
<node id="5"> *n:Place -> ({ highest ( *n:Place ) }) </node>
<node id="6"> *n:Place -> ({ place ( *n:Place ) }) </node>
<node id="7"> *n:Place -> ({ loc_2 ( *n:State ) }) </node>
<node id="8"> *n:State -> ({ stateid ( *n:StateName ) }) </node>
<node id="9"> *n:StateName -> ({ ' texas ' }) </node>
</mrl-parse>
</example>

<example id="878">
<nl lang="en">
Which states lie on the largest river in the United States ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNS states)) (SQ (VP (VBP lie) (PP (IN on) (NP (NP (DT the) (JJS largest) (NN river)) (PP (IN in) (NP (DT the) (NNP United) (NNPS States))))))))
</syn>
<augsyn lang="en">
(S Which-[State:1] states-[State:1] lie-[State:2] on-[State:2] the-[River:3] largest-[River:3] river-[River:4] in-[River:5] the-[CountryName:7] United-[CountryName:7] States-[CountryName:7])
</augsyn>
<mrl lang="geo-funql">
answer(state(traverse_1(longest(river(loc_2(countryid('usa')))))))
</mrl>
<mrl lang="geo-prolog">
answer(A,(state(A),traverse(B,A),longest(B,(river(B),loc(B,C),const(C,countryid(usa))))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:State ) }) </node>
<node id="1"> *n:State -> ({ state ( *n:State ) }) </node>
<node id="2"> *n:State -> ({ traverse_1 ( *n:River ) }) </node>
<node id="3"> *n:River -> ({ longest ( *n:River ) }) </node>
<node id="4"> *n:River -> ({ river ( *n:River ) }) </node>
<node id="5"> *n:River -> ({ loc_2 ( *n:Country ) }) </node>
<node id="6"> *n:Country -> ({ countryid ( *n:CountryName ) }) </node>
<node id="7"> *n:CountryName -> ({ ' usa ' }) </node>
</mrl-parse>
</example>

<example id="879">
<nl lang="en">
Which US city has the highest population density ?
</nl>
<syn lang="en">
(SBARQ (WHNP (WDT Which) (NNP US) (NN city)) (SQ (VP (VBZ has) (NP (DT the) (JJS highest) (NN population) (NN density)))))
</syn>
<augsyn lang="en">
(S Which-[City:2] US-[City:2] city-[City:2] has-[City:1] the-[City:1] highest-[City:1] population-[City:1] density-[City:1])
</augsyn>
<mrl lang="geo-funql">
answer(largest_one(density_1(city(all))))
</mrl>
<mrl lang="geo-prolog">
answer(A,largest(B,(city(A),density(A,B))))
</mrl>
<mrl-parse>
<node id="0"> *n:Query -> ({ answer ( *n:City ) }) </node>
<node id="1"> *n:City -> ({ largest_one ( density_1 ( *n:City ) ) }) </node>
<node id="2"> *n:City -> ({ city ( all ) }) </node>
</mrl-parse>
</example>

</examples>
