what players made less than three assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had at least as many blocks in the season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of points over a season of player kobe bryant from season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )	overnight-basketball
how many blocks did kobe bryant make during seasons where he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
what player had 3 or less blocks this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers does kobe bryant average over a reason	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )	overnight-basketball
player with smallest number of assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has the fewest allseason turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position diddoes kobe bryant play for the la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )	overnight-basketball
player who does not play point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has no more than three steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more fouls than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with less blocks than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
note the player with the highest number of rebounds to their credit in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player did not play point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what year did kobe bryant have three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )	overnight-basketball
which players played more games than kobe bryant the seasons he played	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of seasons where kobe bryant had three fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )	overnight-basketball
which position has kobe made more than 3 steals from	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
what was the total number of rebounds for kobe bryant in season where he only had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )	overnight-basketball
how many fouls were played by kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )	overnight-basketball
season of player kobe bryant who has 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )	overnight-basketball
name a player with at least three rebounds in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whos got the lead for most turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have had the same number of turnovers as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players played in the 2004 or 2010 seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which team did kobe bryant play on in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
who has played less than 4 games per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which season was kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )	overnight-basketball
how many blocks were made by  kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )	overnight-basketball
what team did kobe bryant play 3 games for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
what player had the same or fewer steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the same amount of steals in a season or less than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the total number of rebounds of kobe bryant in season where he only had three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )	overnight-basketball
players with more than 2 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant play with three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
how many blocks did kobe bryant have during the 04 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )	overnight-basketball
name the player with the most blocks during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have had 3 or more rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games has kobe bryant made more than 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )	overnight-basketball
position of player kobe bryant who has played 3 games over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )	overnight-basketball
name a player with less than 3 assists per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player gets as many assists as kobe bryant if not more	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with not more than 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player whose number of steals over a season is less than that of  of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had more or less than 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks kob bryant made in the season he made 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )	overnight-basketball
player with less than 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant have in three games of the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
how many fouls did kobe have last season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )	overnight-basketball
how many points did kobe bryant have when he had 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )	overnight-basketball
name players with turnover amounts in any one season that are less than the turnover amounts attributable to kobe bryant in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had the same number of turnovers as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has had the most rebounds in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that have more and less than 3 steals over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has the same amount of turnovers as kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant play when he had 3 blocks in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )	overnight-basketball
what seasons did kobe bryant have only three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )	overnight-basketball
which players are on the same team as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks in a season did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )	overnight-basketball
what position did kobe bryant play in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )	overnight-basketball
how many steals per season does kobe bryant average when hes also got 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )	overnight-basketball
what player has played more or less than 3 games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who has maximum two team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find those players committing a total number of steals that is larger than the total number of steals committed by kobe bryant in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players have played two or fewer positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player scored more points than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant play in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )	overnight-basketball
in how many games has kobe bryant made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
what player has as much steals as most number of steals kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who did kobe bryant play for when he had 3 all season rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
what players have made at least as many blocks as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with more than 3 points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which team was kobe bryant on when he had 3 blocks in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
how many rebounds did kobe have in 04	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
number of fouls kobe bryant  who has 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )	overnight-basketball
player with smallest number of fouls over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which team did kobe bryant make three blocks for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
what player had the least fouls this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers has kobe bryant had over all seasons	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )	overnight-basketball
how many rebounds did kobe bryant make in seasons where he made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )	overnight-basketball
what player has fewer blocks per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name the player with the total number of assists equalling less than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has made more than 3 points this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many teams are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )	overnight-basketball
which player had no more turnovers in a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that had the lowest number of assists in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have played less than two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played the same or less games than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player whose number of fouls over a season is less than that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player whose number of turnovers over a season is same as that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have after 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )	overnight-basketball
who has had more or less than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )	overnight-basketball
what players have as many rebounds as kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more than 3 blocks this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the season in which he had 3 turnovers what team was kobe bryant on	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )	overnight-basketball
what other players play the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
turnovers of kob bryant over a season in which he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
how long has kobe bryant played with more than 3 assists per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )	overnight-basketball
player whose steals over a season are not more than steals player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists has kobe bryant had with three steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )	overnight-basketball
players that had the least amount of turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with fewer than three steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have played less than 3 games over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the number of positions	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )	overnight-basketball
what position did kobe bryant get 3 steals as	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
how many blocks has kobe bryant achieved in seasons with at least 3 games played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
which player had the fewest rebounds in one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find a player with 3 or more steals in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had more fouls than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
either kobe bryant or lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )	overnight-basketball
which player is it kobe bryant or lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )	overnight-basketball
number of rebounds over a season of player kobe bryant with 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )	overnight-basketball
name the position of kobe bryant when he made three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )	overnight-basketball
how many steals in a season did kobe bryant have for the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )	overnight-basketball
which player doesnt have 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant have three assists in over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )	overnight-basketball
how many blocks kob bryant made in the season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
name the number of turnovers achieved by kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )	overnight-basketball
in which season did kobe bryant score 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )	overnight-basketball
how many rebounds did kobe get after playing 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )	overnight-basketball
what player has had more or less fouls than 3 over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the same amount of rebounds as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players play no more than two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more than 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
team of player kobe bryant 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
teams kobe bryant plays for	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )	overnight-basketball
during which seasons did kobe bryant make 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )	overnight-basketball
how many games did kobe bryant play where he had more than 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )	overnight-basketball
what players had same or more rebounds than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the least amount of blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had as many rebounds as kobe bryant in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with not more than 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how  many rebounds in a season did kobe bryant have in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
which player gives up te same number of turnovers as kobe bryant each season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played less games than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players made more rebounds than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player consistently has more steals per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games has kobe bryant played each season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )	overnight-basketball
player with more than 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more blocks than kobe bryant whose number of blocks is 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )	overnight-basketball
steals by kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
what was the total number of season where kobe bryant had just three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_rebounds ) ) )	overnight-basketball
how many turnovers has kobe bryant lost in seasons with at least 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
how many games has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
how many blocks did kobe bryant have over the season he also had three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )	overnight-basketball
how many fouls were played by kobe bryant after having 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )	overnight-basketball
name the number of total turnovers of kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )	overnight-basketball
how many blocks as point guard kobe bryant made	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )	overnight-basketball
how many fouls did kobe bryant have with three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )	overnight-basketball
find players whose total number of rebounds in a given season is more than the number of rebounds made in a season by kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player scored fewer than 3 points in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player who did not have three assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players made less than 4 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players are not point guards	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had fewer rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists did player kobe bryant have over this season to get 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )	overnight-basketball
players that have fewer fouls over a season than that of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name those players who have a total number of fouls in any one season equal to or more than that of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with smaller turnovers over a season than player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which year did kobe bryant play for the la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )	overnight-basketball
which team did kobe bryant play for in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
what season did kobe bryant only have 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )	overnight-basketball
who many rebounds in the season did point guard kobe bryant make	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )	overnight-basketball
which players have at most 2 positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has less than 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe have during his three point total game	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )	overnight-basketball
name those players with scored assists in any one season tallying at least 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has scored the minimum number of points 	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe score while playing for the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
player who made less than 4 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did la laker player kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
how many fouls did kobe bryant have when he had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )	overnight-basketball
what player played 3 or more games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the same or more turnovers than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has gotten more than 3 points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find those players with turnover amounts in a given season equalling at most 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals does kobe get in seasons where hes got more than 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )	overnight-basketball
what player has lesser assists than kob bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant make after getting 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )	overnight-basketball
how many games did kobe bryant play where he made three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )	overnight-basketball
player who has not played 3 games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has a total foul count under 3 for the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many all season rebounds did kobe bryant have when his turnovers equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )	overnight-basketball
number of turnovers over a season of player kobe bryant who has 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )	overnight-basketball
what player has fewer per season assists than  point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in 2004 how many allseason blocks did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )	overnight-basketball
players who had an equal amount of assists in a season to that of kobe bryants lowest assists total	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player played more games than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls does kobe bryant have in a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )	overnight-basketball
what player had 3 or more blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the same number of rebounds in any one season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had more assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
how many points kob bryant made in the season in which he played for los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
what players had less blocks than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the maximum number of steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the same amount or less of assists as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find those players who have a total number of steals in a given season that is less than the total number of steals acquired by kobe bryant in a given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
team of player kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )	overnight-basketball
in what position did kobe bryant get 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )	overnight-basketball
which player has played the most positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had equal or more fouls as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
this is considered the season of player kobe bryant with 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )	overnight-basketball
number of played games over a season of player kobe bryant with 3 points over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
find those players responsible for less than 3 points in any given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )	overnight-basketball
what team did kobe bryant have 3 steals on	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )	overnight-basketball
how many positions	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )	overnight-basketball
how many turnovers did kobe bryant have when he had three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )	overnight-basketball
how many turnovers does kobe bryant make when hes got 3 assists in the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
what players had more than 3 turnovers over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in which season did kobe bryant get 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )	overnight-basketball
players who do not have three steals over the course of a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
player from los angeles lakers or cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player played in more games over a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had 3 or less assists this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many allseason assists did kobe bryant have along with 3 allseason blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )	overnight-basketball
which player has the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds were  got by kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
who gets 3 or more turnovers each season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who leads the points race so far this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that have more points than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers kob bryant made in the season he played for los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )	overnight-basketball
what team did kobe play for during his three steam season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )	overnight-basketball
which player made as many blocks over the season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player who had a point score that was not three	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks were made by kobe bryant who belonged to the los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )	overnight-basketball
number of blocks over a season of player kobe bryant who has 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )	overnight-basketball
either 2004 or 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )	overnight-basketball
players that player more games in a season than that of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player from player kobe bryants team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has less rebound over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players have made the same number of fouls as kobe bryant in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with fewer than three fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists does kobe bryant have over all seasons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )	overnight-basketball
in which season was it that kobe bryant participated in 3 games total	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )	overnight-basketball
what team did kobe bryant get 3 rebounds in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
name a player with at least three played games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )	overnight-basketball
how many rebounds has kobe bryant made so far this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
number of fouls over a season of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
in which season kobe has scored  3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )	overnight-basketball
name players other than point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of steals over a season of player kobe bryant with 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )	overnight-basketball
player with fouls over a season not more than fouls over a season of player kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many all season fouls did kobe bryant have as an la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )	overnight-basketball
what players had less than 3 games played over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with no more than three points per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has no less than 3 all season assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of steals over a season of player kobe bryant with 3 points over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )	overnight-basketball
which players have committed 3 or more fouls in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many career turnovers has kobe bryant has	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )	overnight-basketball
name the player with lesser steals than player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had no more than three turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
98019705layers with the fewest turnovers per game during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many all season rebounds did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
what position did kobe bryant play for the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )	overnight-basketball
player who has played more games over a season player kobe bryant has played over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the same number or less rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has had more turnovers than kobe bryant during a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has more than 3 rebounds in every season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
kobe bryants number of games played the season he had 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )	overnight-basketball
what teams has kobe played for in his career	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )	overnight-basketball
what player had more than 3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has a maximum of 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many all season steals did kobe bryant have in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
who has had less turnovers than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player belongs to kobe bryant  steam	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in which year did kobe bryant have three steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
who gets no more fouls each year than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
either 2004 or 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )	overnight-basketball
how many turnovers does kobe bryant have in seasons with over 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )	overnight-basketball
fouls by kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )	overnight-basketball
which player had three or more blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had 3 or more assists over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who has played more games over a season than player kobe bryan over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who had more points than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have had the same or more blocks than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team is kobe bryant on	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
which players play for the lakers or cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a point guard or a forward	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )	overnight-basketball
which player has played for the fewest teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant have over  the season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )	overnight-basketball
what player made 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did player kobe bryant have during the season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
how many turnovers kob bryant made in the season he made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )	overnight-basketball
during 2004 how many fouls did kobe get against him	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )	overnight-basketball
what was the total number of blocks for kobe bryant in seasons where he had just three fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )	overnight-basketball
in the season he had 3 blocks kobe bryant was playing for what team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )	overnight-basketball
players who are forwards or point guards	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )	overnight-basketball
how many rebounds did kobe bryant have when he made three fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )	overnight-basketball
for which team kob bryant made 3 assists over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )	overnight-basketball
number of points over a season of player kobe bryant who has 3 assists over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )	overnight-basketball
how many turnovers does kobe bryant give up as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )	overnight-basketball
for which team did kobe bryant play three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
how many blocks were made by kobe bryant in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
who has had the least rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
name a player with the fewest turnovers during a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whos made the most assists from the start of the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which team did kobe bryant play as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )	overnight-basketball
how many steals has kobe bryant got in his career	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
how many games has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )	overnight-basketball
how many blocks did kobe bryant have in a game where he had three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )	overnight-basketball
player who scored the least on the team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in the season in which he made 3 steals how many games was kobe bryant in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )	overnight-basketball
how many turnovers did kobe bryant ahve when he had 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )	overnight-basketball
how many points does  kobe bryant have for the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
which player has  played lesser than 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has lesser number of turnovers than kobebryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which team does kobe bryant play point guard for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )	overnight-basketball
how many games did kobe have three steals in over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )	overnight-basketball
what is the number of rebounds by kobe bryant over the season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
during the season in which kobe bryants total number of assists was 3 what team was he on	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )	overnight-basketball
how many blocks does kobe bryant average in a given season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )	overnight-basketball
how many rebounds has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
in which season did kobe bryant have 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )	overnight-basketball
in the season in which kobe bryant played 3 games how many turnovers did he have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )	overnight-basketball
how many rebounds did kobe have in games where he scored three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )	overnight-basketball
during the season in which he scored 3 points name the number of rebounds he was responsible for kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )	overnight-basketball
players that had the same number of turnovers in a season as kobe byrant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the most points this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with a total number of rebounds in a season no greater than three	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player played in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during his season with the los angeles lakers how many points did kobe bryant acquire	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
in how many games did kobe bryant get 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )	overnight-basketball
which player had more rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the player with the highest number of blocks to his credit in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the season in which kobe bryant had a total number of 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )	overnight-basketball
over a season which player has the largest number of rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have played during the same seasons as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks does kobe bryant make in seasons with only 3 fouls against him	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )	overnight-basketball
how many fouls will kobe bryant have in seasons when hes got 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )	overnight-basketball
which player has scored at least as many points as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played more games in a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with the most steals in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have had more than 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe bryant score in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )	overnight-basketball
name a player who did not have three turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points does kobe bryant have on average by game 3 in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )	overnight-basketball
how many rebounds kob bryant made over a season in which he made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )	overnight-basketball
which player has had the most steals per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has as many allseason steals as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
did kobe bryant play in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )	overnight-basketball
season of player kobe bryant whose has 3 points over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )	overnight-basketball
how many assists did kobe bryant get after playing 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )	overnight-basketball
how many turnovers did kobe bryant have during the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )	overnight-basketball
who has had the most blocks in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had more than 3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls in a season did the los angeles lakers kobe bryant commit	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )	overnight-basketball
how many blocks were made by kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )	overnight-basketball
which player has the minimum number of blocks of kobebryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players play point guard or forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobebryant play making 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )	overnight-basketball
what team did kobe bryant play for in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
what player did not score 3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant make in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_fouls ) ) )	overnight-basketball
how many assists were got by kobe bryant who belonged to the los angeles team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )	overnight-basketball
how many steals did kobe bryant have with three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )	overnight-basketball
how many steals did kobe have from point guards from any team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )	overnight-basketball
how many points did kobe bryant score after 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )	overnight-basketball
a player with at least 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of assists over a season of player kobe bryant whoplayed 3 games over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )	overnight-basketball
during the season in which he was responsible for 3 steals what was the name of the team kobe bryant was on	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )	overnight-basketball
how many season games did kobe bryant play as an la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )	overnight-basketball
name the number of assists attributable to kobe bryant during a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )	overnight-basketball
how many allseason rebounds did kobe bryant have as a los angeles laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
in which season did kobe bryant participate in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )	overnight-basketball
which player has played the fewest positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many teams are in the nba	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )	overnight-basketball
what season did kobe bryant get 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )	overnight-basketball
find those players who have game time in no more than 3 games in a given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with more steals over a season than that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points has kobe bryant scored in each season with the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
find the season in which kobe bryant committed 3 fouls and note the number of turnovers in the same period	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )	overnight-basketball
which player is not in the position of point guard	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player plays the position of point guard or forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe get in 04	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
which player has no more played games than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players made more points than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant have three turnovers over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )	overnight-basketball
what position did kobe bryant have 3 assists as	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
number of rebounds over a season of player kobe bryant from los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
how many rebounds in a season did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
how many assists did kobe bryant have when he had 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )	overnight-basketball
how many blocks did player kobe bryant have with 3 assists over this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
which players have been on less than two teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with more rebounds over a season than that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
kobe bryant got 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )	overnight-basketball
players that did no play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has 3 or more steals in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had more or less than 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the same season that he acquired 3 points how many turnovers did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
which team did kobe bryant have 3 steals for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )	overnight-basketball
players that played on the same team as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has gotten 3 or less blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played at least 3 games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has the most assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had 3 or more steals this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant have when he had 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
who has the record for steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with assists over a season not less than that of player kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls does kobe bryant have at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
which player averages more turnovers each season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
2004 season of kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )	overnight-basketball
what players are point guards or forwards	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has as many fouls as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has the most blocks in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
when did kobe bryant have 3 all season assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )	overnight-basketball
which players have as many rebounds as kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of turnovers over a season of player kobe bryant from season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )	overnight-basketball
what position is kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )	overnight-basketball
player that has the least fouls over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points has kobe bryant gotten in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )	overnight-basketball
how many games did kobe bryant play in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )	overnight-basketball
what team did kobe bryant score 3 points for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )	overnight-basketball
what season did kobe bryant have 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )	overnight-basketball
what was the total number of games played by kobe bryant in season where he had only three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )	overnight-basketball
what is the number of the position	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )	overnight-basketball
how many steals did kobe bryant have when he scored three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )	overnight-basketball
player who has same rebounds over a season as that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which year 2004 or 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )	overnight-basketball
who has more than 3 turnovers this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find those players responsible for 3 or less fouls in any one given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the year he played for the los angeles lakers how many fouls did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )	overnight-basketball
how many fouls did kobe bryant have in the season in which he played point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
for the season in which he was responsible for 3 blocks how many fouls did kobe bryant commit	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )	overnight-basketball
how many assists did kobe bryant make in a season with steals over 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )	overnight-basketball
how many blocks has kobe bryant made in seasons with exactly 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
in which season did kobe bryant commit 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )	overnight-basketball
rebounds by kobe bryant over all seasons as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )	overnight-basketball
which player has more than 3 turnovers in each season theyve played	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with maximum 3 steals over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have had more blocks than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant play for only three games during the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )	overnight-basketball
team of player kobe bryant who has 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )	overnight-basketball
player whose fouls are not 3 over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has 3 or less fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players number of games played allseason equaled no less than kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has more blocks per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of rebounds over a season of player kobe bryant with 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )	overnight-basketball
players that have the same or fewer total fouls as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant who had three rebounds have during the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )	overnight-basketball
which player is at point guard or forward position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had a maximum of 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team did kobe bryant play for while making 3 assists per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )	overnight-basketball
player who never played 3 games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team did kobe bryant have 3 turnovers on	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )	overnight-basketball
how many turnoves has kobe bryant given up in seasons with more than 3 on duty games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )	overnight-basketball
kobe bryant ended up with how many assists last season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )	overnight-basketball
how many games as kobe bryant played for the la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )	overnight-basketball
which player has the fewest fouls per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player played in the most games this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant have for the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
how many points did kobe bryant aquire over the entire season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )	overnight-basketball
how many games has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
kobe bryant play point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string position ) ) )	overnight-basketball
what player made more than 3 block over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has as much steals as kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of blocks over a season of player kobe bryant who has 3 points over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )	overnight-basketball
which player leads kobe bryant for rebounds per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists did kobe byrant have during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )	overnight-basketball
how many blocks did kobe bryant have when he had three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
who has at most 3 assists total in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players who had a greater number of assists in a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with not less than 3 points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals does kobe bryant get in a season when hes got 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )	overnight-basketball
how many rebounds did kobe bryant get in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
who has played fewer than 3 games so far this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the team of kobe bryant  in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
what players had equal or more assists than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
kobe bryants rebounds for the season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
how many all season points did kobe bryant have as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
player who plays the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name those players responsible for less than 3 blocks in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant have this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
in which season did kobe bryant average 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )	overnight-basketball
how any steals did kobe bryant get	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
how many fouls were played by kobe bryant after getting 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )	overnight-basketball
in what position was kobe able to get 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
player whose number of blocks over a season is less than that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players all season assists totaled over 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
are there players whose total number of assists in any one given season equals at most 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has more allseason steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played the same number of games as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played less than 3 games this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that have more steals than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players had 3 or fewer steals over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe when playing with three fouls over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )	overnight-basketball
name players who did not play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant get after getting 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )	overnight-basketball
players that plat one or two different positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of points over a season of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
what year did kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )	overnight-basketball
whats the name of a player with less turnovers per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
for the period of time in which kobe bryant was point guard name the amount of rebounds he had in that season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )	overnight-basketball
player with not more blocks over a season than player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many seasons have kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )	overnight-basketball
season of player kobe bryant who has 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )	overnight-basketball
how many rebounds did kobe bryant have when he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )	overnight-basketball
how many rebounds did kobe bryant have who played in three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
in what year did kobe bryant play three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )	overnight-basketball
what player is the most versatile and plays the most number of positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has played the minimum number of games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has got a maximum of 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have when he had 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )	overnight-basketball
player who has one team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in which season did kobe bryant have three steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
what player had less turnovers than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has made the minimum number of turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the player who made the same or a lesser number of assists in the same season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the number of turnovers by kobe bryant who made 3 points over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
in how many games did kobe bryant make 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )	overnight-basketball
how many points has kobe bryant made in a season when he made 3 plus rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )	overnight-basketball
what player had the same amount of assists as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe have during the season he averaged three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
how many steals did kobe bryant have when he had 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )	overnight-basketball
how many assists has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )	overnight-basketball
has kobe bryant averaged 3 fouls and 3 blocks per game over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )	overnight-basketball
how many blocks has kobe bryant made playing point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )	overnight-basketball
what player had the fewest turnovers this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )	overnight-basketball
what team did kobe bryant play for while having only 3 fouls in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )	overnight-basketball
how many blocks did kobe bryant have when he had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )	overnight-basketball
which players made at 13 rebounds over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the number of games played by kobe bryant who made 3 rebounds over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )	overnight-basketball
what was the total number of assists over a season for kobe bryant playing point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )	overnight-basketball
how many games has kobe given up exactly 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )	overnight-basketball
how many blocks does kobe bryant usually make if hes already got 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )	overnight-basketball
how many players acquired less or more that 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has played in the most games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had more that three steals over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with number of blocks over a season as that of player kobe bryantis	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of assists over a season of player kobe bryant whose team is los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )	overnight-basketball
which is the team of kobe bryant who has played 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
player with less than 3 points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has scored less than three points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
for the season who played the same number of games as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name the player that represented most teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
note those players who accrued a total of points in any one season totalling more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
kobe bryant had3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )	overnight-basketball
which player has more rebounds per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has had points more or less than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players who played 2004 to 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player that had more rebounds than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which year did kobe bryant play point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )	overnight-basketball
who has had less fouls than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
mention the points scored by player kobe bryant who has had 3 rebounds over this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )	overnight-basketball
how many turnovers has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )	overnight-basketball
how many steals did kobe get after 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )	overnight-basketball
how many rebounds has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )	overnight-basketball
how many assists did kobe bryant make during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )	overnight-basketball
which season did kobe bryant have 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )	overnight-basketball
how many points did kobe bryant score when he had three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )	overnight-basketball
what player played less than 4 games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of teams	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )	overnight-basketball
what players made more than 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
the player with least blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points does kobe bryant get in seasons with 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )	overnight-basketball
which player has a minimum of three steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that have the same number of rebounds as kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the same or more rebounds as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the most fouls this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had got less than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had the fewest assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position kob bryant played in the season he made 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )	overnight-basketball
which players have had the least amount of turnovers in any one particular season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has the least fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find those players who made more than 3 steals in a given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player not with 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who has most rebounds over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position is kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
which player makes less than 3 rebounds per career average season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with the same assist per game average as kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has the lowest average blocks per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has the most rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player whose number of assists over a season is same as that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which team did kobe bryant play for when he had only three rebounds in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
players with less and more than 3 rebounds over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
team of player kobe bryant who has 3 assists over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )	overnight-basketball
during the season in which he played in 3 games total what position was kobe bryant playing	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )	overnight-basketball
how many points did kobe bryant score during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )	overnight-basketball
players that played for either one or two nba teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant have for the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )	overnight-basketball
player with most points scored over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe bryant have when he had 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )	overnight-basketball
which player doesnt average over 3 assists per game	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player didnt have 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player not with 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the complete number of steals in season where kobe bryant had only three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )	overnight-basketball
who has had more steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had less than 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
note those players with a total number of blocks in any one season that is more than the total number of blocks in any one season acquired by kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with no more than 3 steals a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers  did kobe bryant get after he made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )	overnight-basketball
number of fouls over a season of player kobe bryant with 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )	overnight-basketball
number of turnovers over a season of player kobe bryant who has 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )	overnight-basketball
what player had more blocks than kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who made the most turnovers over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has had the most fouls in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player kobe bryant has given 3 fouls over this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )	overnight-basketball
name the total points of kobe bryant over the season and note the comparisonn to the player whose total number of blocks throughout the season was 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )	overnight-basketball
what players did not score more than three points in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has had as many fouls or more as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with fewer turnovers during the season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
steals by kobe bryant over all seasons with 3 or more points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )	overnight-basketball
name a player with no more blocks in a season that kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant play during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
how many rebounds kob bryant made in the season he played for los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
which players dont play for the la lakers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which year did kobe bryant play in three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )	overnight-basketball
number of steals over a season of player kobe bryant with 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )	overnight-basketball
which player had no more than three blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players have at least 3 turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant have 3 steals in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )	overnight-basketball
number of blocks over a season of player kobe bryant from team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )	overnight-basketball
how many fouls did kobe bryant commit during the same season in which his total number of assists was 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )	overnight-basketball
how many steals did kobe bryant have in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
number of fouls over a season of player kobe bryant who has played 3 games over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )	overnight-basketball
which player had no more than the number of steals by kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant make when he had three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )	overnight-basketball
what player has 3 allseason rebounds maximum	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player who had the same number of steals as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the largest number of assists over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the players number for a certain team	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )	overnight-basketball
how many rebounds did kobe bryant have when he had 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )	overnight-basketball
what was the total number of assist for kobe bryant over a season where he had three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )	overnight-basketball
what players have gotten time in at least 3 games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had less than 3 points in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with fewer blocks than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of steals over a season of player kobe bryant who has 3 played games over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
who is someone with less than 3 blocks in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position does kobe bryant play when hes got exactly 3 assists in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
for which team kob bryant made 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
how many points did kobe bryant score in three played games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )	overnight-basketball
who had the most steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant get in the seasons he scored 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )	overnight-basketball
how many games did kobe bryant play where he made three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )	overnight-basketball
what player had 3 or less turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had as many blocks as kobe bryant over as season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more than 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
this is the season of player kobe bryant who has played 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )	overnight-basketball
what team did kobe bryant play for when he had 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
how many points did kobe bryant have over all seasons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
how many points did kobe bryant score as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
how many assists did kobe get after scoring 3 points 	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )	overnight-basketball
how many turn overs kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )	overnight-basketball
how many all season steals did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
what player had the same or less blocks as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant make during a season while playing for the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )	overnight-basketball
what player has no more than three allseason blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who matches or beats kobe bryant in steals per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player whose number of turnovers over a season is more than that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that did not play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with greater than three blocks in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant play when making 3 allseason steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
which player has played the most positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the same or less steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls has kobe bryant averaged per season as a laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )	overnight-basketball
name the season in which kobe bryant performed 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )	overnight-basketball
what player had less fouls than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position was kobe player when he had three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
what is the points kob bryant scored in season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )	overnight-basketball
how many assists did kobe bryant have while playing point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )	overnight-basketball
how many games has kobe bryant had more than 3 turnovers in all seasons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )	overnight-basketball
name a player who had at least as many assists as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who has at least 3 assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what seasons did kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )	overnight-basketball
what players made number of rebounds same as  kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobebryant get in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
who has the same per season blocks as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe bryant have on the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
what was the number of turnovers for player kobe bryant when he had just three steals in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )	overnight-basketball
how many points were scored by kobe bryant when he made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )	overnight-basketball
which player has not had three rebounds in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who is a player with fewer rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the total number of fouls in a season for kobe bryant when he had only three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )	overnight-basketball
which player had fewer points in the season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has not made3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant make in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
total points of kob bryant over a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )	overnight-basketball
who has played the least amount of games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe bryant have when he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )	overnight-basketball
how many fouls did kobe average in his three point total games over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )	overnight-basketball
which player has played no more than three games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has the most turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
kobe bryant belongs to the los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )	overnight-basketball
number of played games over a season of player kobe bryant who has played 3 games over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )	overnight-basketball
name a player with no more points per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who is not a los angleles laker	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the number of blocks by kobe bryant who made 3 rebounds over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )	overnight-basketball
number of blocks over a season of player kobe bryant with 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )	overnight-basketball
stats of kobe bryant during 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )	overnight-basketball
what number is kobe bryant and how many assists does he have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )	overnight-basketball
how many fouls does kobe bryant have in seasons when he makes a total of 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )	overnight-basketball
what player plays point guard or forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the number of assists by player kobe bryant over the season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )	overnight-basketball
which player has had the most  turnovers in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the player with a total number of blocks less than the total number of blocks performed by kobe bryant in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who committed more fouls than kob bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant play when he had three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )	overnight-basketball
who is better kobe bryant or lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )	overnight-basketball
which played has played on the most teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what seasons did kobe bryant only have three steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
who had the least steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team is kobe bryant on	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
how many different positions are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )	overnight-basketball
what position did kobe bryant play when he got 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )	overnight-basketball
what position did kobe bryant play on the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )	overnight-basketball
which player did not play in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name players who are not in los angeles lakers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had 3 or less points this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team did kobe bryant play on when he had 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )	overnight-basketball
what seasons did kobe bryant play point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )	overnight-basketball
what players have had less than or equal the number of rebounds as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant have in season where he had only three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )	overnight-basketball
are there players whose total tally of assists is less than the tallly of assists acquired by kobe bryant in the same season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the player with assists to his credit for any one season  tallying more than the total number of assists performed by kobe bryant in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find players who have point scores for any one season of no more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many players have less than 3 steals on them in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with most number of blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who are the players with foul totals equivalent in any one season to that of kobe bryant in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant make in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
how many steals did kobe bryant have in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
which player had at least three assists last season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players are point guard or forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who made turnovers same as the least turnovers made by kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more all season points than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the season in which his point tally was 3 how many games was kobe bryant in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
which players have 3 or more assists over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players arent point guards	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had more than three fouls per game over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many allseason blocks did kobe bryant have as an la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )	overnight-basketball
how many allseason points did kobe bryant score when rebounds equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )	overnight-basketball
how many points kob bryant made over a season in which he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )	overnight-basketball
to which team does kobe bryant belong who scored 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )	overnight-basketball
how many steals did kobe get after getting 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )	overnight-basketball
how many seasons has kobe bryant scored more than 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )	overnight-basketball
player whose number of fouls over a season is same as that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has no fewer allseason steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the same season that he participated in 3 games name the number of fouls committed by kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )	overnight-basketball
which players plays in two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant make over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
player that plays in two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with more than three rebounds this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position does kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )	overnight-basketball
how many games did kobe bryant play during the season his total number of blocks equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
are there players whose point scores in any one season are less than the total point scores of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that had the least amount of rebounds in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant have when he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )	overnight-basketball
number of steals over a season of player kobe bryant wit 3 steals over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_steals ) ) )	overnight-basketball
how many players are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )	overnight-basketball
player whoplayed less games over a season than player kobe bryant has played over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games in a season did kobe bryant have 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )	overnight-basketball
what player has the largest number of all season fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played more than 3 games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players who played more than 3 games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players made more than 3 assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls kob bryant made in the season in which he made 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )	overnight-basketball
which player takes more fouls than kobe bryant or the same per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player does not belong to the los angeles lakers team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string ! = ) en.team.lakers ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has more assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have when he made three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )	overnight-basketball
how man fouls did kobe bryant have in all seasons where he had three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )	overnight-basketball
how many turnovers did kobe bryant have when he played in three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )	overnight-basketball
during his season playing point guard how many assists was bryant kobe responsible for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )	overnight-basketball
player who plays position point guard or forward	( call SW.listValue ( call SW.concat en.position.point_guard en.position.forward ) )	overnight-basketball
player with less points over a season than that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with fewer than three blocks per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games has kobe been in since he went pro	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )	overnight-basketball
name a player who had at least three fouls in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player does not have3 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of fouls of kobe bryant who has 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )	overnight-basketball
how many threepoint turnovers did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
what season did kobe bryant play point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )	overnight-basketball
how many points did kobe bryant score in the position of point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
which player has the fewest rebounds ever	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls were played by kobebryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )	overnight-basketball
how many steals kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
how many seasons has kobe bryant played for the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )	overnight-basketball
what position was kobe playing when he blocked three shots	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )	overnight-basketball
which player has more points per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player made more than 3 blocks over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant have after 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
what player plays the most positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players who had the same number of fouls in a season that kobe bryant had	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have on the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )	overnight-basketball
which player has the fewest allseason blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant make in seasons where he made 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )	overnight-basketball
how many steals did kobe bryant have in the game in which he had three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )	overnight-basketball
player with minimum 3 steals over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player scored equal or less points as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players have made fewer assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has had at least as many games played as kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player does not have 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had fewer turnovers than three	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the total number of turnovers in a season for kobe bryant at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )	overnight-basketball
how many rebounds can kobe bryant make in one season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )	overnight-basketball
who is a player that doesnt make even 3 steals per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whos got the lead for fouls in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with not less than 3 fouls over a season is at least 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe bryant score this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )	overnight-basketball
is there a player with the same per season point average as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had the same or more steals kobe over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players played in the same season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what season did kobe bryant have 3 allseason assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )	overnight-basketball
which player has played for only one team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had less assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds made by kob bryant over a season in which he played 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
how many assists did kobe bryant have when he had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )	overnight-basketball
how many points did kobe bryant score in a single season where he had exactly three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )	overnight-basketball
what player had the same number of fouls as kobe bryant allseason	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers does kobe bryant average in games with more than 3 rebounds for him	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )	overnight-basketball
what players played games same as the least number of games played by kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player scored less points than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had more or equal number of rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has as much fouls as maximum fouls kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in how many games during a single season did kobe bryant have more than three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
what player did not have 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string ! = ) ( number 3 steal ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kboe bryant have when he had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )	overnight-basketball
which team does kobe bryant play for which has less than 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )	overnight-basketball
who plays for the los angeles lakers or cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player made as much points as kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had the most career blocks per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which position did kobe bryant play in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )	overnight-basketball
how many blocks did kobe bryant make during the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
name the player with fewer than three assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
team of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )	overnight-basketball
what position does kobe bryant play in his best scoring seasons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )	overnight-basketball
when kobe bryant had 3 allseason assists how many rebounds did he have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )	overnight-basketball
what player had more blocks than kobe bryant whose number of assists is 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
the total number of steals in all seasons for point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )	overnight-basketball
player with less than 3 turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls in a season has point guard kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
how many steals did kobe bryant have in three played games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
how many steals kob bryant made in the season in which he played in los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )	overnight-basketball
how many assists kob bryant made in the season in which he made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )	overnight-basketball
how many points did kobe bryant score when he averaged 3 assists per game over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )	overnight-basketball
what team did kobe bryant play for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
how many games has kobe bryant played in the last 3 seasons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )	overnight-basketball
how many rebounds did kobe get after he made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )	overnight-basketball
what position did kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )	overnight-basketball
what players did not play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the minimum number of turnovers of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player did not score 3 points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks kob bryant made in the season in which he played 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
how many games did kobe bryant play in the year he had three fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )	overnight-basketball
when kobe bryant has given up 3 turnovers in a season how many fouls has he typically given	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )	overnight-basketball
how many fouls in a single season did kobe bryant have that is greater than three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )	overnight-basketball
what season did kobe bryant score 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )	overnight-basketball
what players scored as many points as kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant get called for the season he had 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )	overnight-basketball
what is the number of the team	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )	overnight-basketball
which players have had fewer turnovers per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players whose number of points is less than 3 over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had less than 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what point guard players had more points than kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
how many rebounds did kobe bryant have after 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
find those players who have participated in less or more than 3 games in a given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the same or more turnovers as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the team of kobe  bryant who played 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )	overnight-basketball
which player has played in the fewest games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player plays either point guard or forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player belongs to the los angeles lakers team or cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has more rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
season of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )	overnight-basketball
player with lowest jersey number	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how any blocks did kobe make after getting 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )	overnight-basketball
how many points kob bryant made in the season he made 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )	overnight-basketball
in what season did kobe bryant score a total of 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )	overnight-basketball
player with more points over a season than that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in how many games did kobebryant get3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )	overnight-basketball
name the season during which kobe bryant committed 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )	overnight-basketball
what season did kobe bryant have 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )	overnight-basketball
in which position did kobe score 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )	overnight-basketball
how many players had game time in at least 3 games over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with a total number of steals in a season that is equal to the lowest number of steals in a season for kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
when kobe bryant had 3 assists in a season what was his position	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
points of kob bryant over a season in which he made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )	overnight-basketball
what player had the same or less fouls as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players made more than 2 points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player made least points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the least assists this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who were kobe bryants team mates	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
kobe bryant made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_blocks ) ) )	overnight-basketball
what player has no more turnovers per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of turnovers over a season of player kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )	overnight-basketball
how many fouls did kobe bryant score during the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )	overnight-basketball
how many points did kobe bryant score in the season that he had three steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )	overnight-basketball
during his season as point guard how many blocks did kobe bryant perform	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )	overnight-basketball
players that overall outrebounded kobe bryant during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )	overnight-basketball
which player has the minimum number of fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have a total number of fouls over a season that is not 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the minimum number of steals of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more blocks than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant have over the season in which he played 3 games 	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
which season did kobe bryant average over 3 steals a game	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
what player had more steals than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has been in the least number of games in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player was on the most teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
the player who made most fouls over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had more than three fouls in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with at least as many turnover as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in what position was kobe able  to make 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )	overnight-basketball
how many assists did kobebryant get  after getting 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )	overnight-basketball
what is the number of assists by kobe bryant who made 3 assists over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )	overnight-basketball
how many rebounds did kobe bryant get as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )	overnight-basketball
number of played games over a season of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )	overnight-basketball
which player has made a minimum of 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players scored more or less than 3 points in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of played games over a season of player kobe bryant whose team is los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )	overnight-basketball
player who made lesser steals than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
as a laker how many steals has kobe bryant averaged per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )	overnight-basketball
who has fewer steals per season on average than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the most fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
for the season in which he had 3 blocks to his credit how many steals were attributable to kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )	overnight-basketball
what player has been in for only 1 or 2 games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant make over a season when played as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )	overnight-basketball
how many fouls were played by kobe bryant after getting 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )	overnight-basketball
how many steals kob bryant made in the season he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )	overnight-basketball
how many turnovers did kobe bryant give up during the 2004 regular season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )	overnight-basketball
what player has the fewest all season fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
season of player kobe bryant from los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )	overnight-basketball
what position did kobe bryant play for the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )	overnight-basketball
how many games did kobe bryant play in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )	overnight-basketball
how many steals did kobe bryant have when he had 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )	overnight-basketball
what was the position of kobe bryant when he played 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )	overnight-basketball
how many seasons has kobe played more than 3 games and whats his career rebound total	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
what player had at most 3 games allseason	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in seasons with more than 3 steals how many blocks did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )	overnight-basketball
name a player with no more than three rebounds in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobebryant get	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )	overnight-basketball
what team will kobe bryant be on this year	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
how many turnovers did kobebryant get in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )	overnight-basketball
what position did kobe bryant have 3 turnovers as	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )	overnight-basketball
how many rebounds did kobe bryant who had three blocks have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )	overnight-basketball
which player has played for the most teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player kobe bryants number of rebounds over a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
which player has more points than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of steals over a season of player kobe bryant from team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )	overnight-basketball
what player has more than 3 allseason blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds does kobe bryant make by the time hes got 3 points in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )	overnight-basketball
number of steals over a season of player kobe bryant with 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )	overnight-basketball
how many assists did kobe bryant get after 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )	overnight-basketball
whos a player with less games played than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the least position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the 2004 season how many turnovers did kobe bryant acquire	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )	overnight-basketball
what position did kobe play when her had three turnover this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )	overnight-basketball
what seasons did kobe bryant play for the la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )	overnight-basketball
what is the position of kobe bryant in los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )	overnight-basketball
what players have less than 3 turnovers this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has made the maximum number of blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant have when he had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
how many positions are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )	overnight-basketball
players who had no more rebounds over a season than that of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
position of player kobe bryant from 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )	overnight-basketball
how many rebounds has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
team of player kobe bryant who has 3 steals over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )	overnight-basketball
name a player who did not play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player who assists over a single season is at least the same as kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team does kobe bryant play for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )	overnight-basketball
whos averaged no more than 3 rebounds each season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points does kobe bryant average in seasons with 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )	overnight-basketball
what is kobe bryants team	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )	overnight-basketball
name those players with rebounds in any one season equalling less than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players hold two or less positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team did kobe play for during the season he average three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
what was the total number of assist in a season for kobe bryant when he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )	overnight-basketball
kobe bryans assists for the season he had 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )	overnight-basketball
who has had less than or the same number of turnovers as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the season in which kobe bryant managed 3 assists how many games did he play in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )	overnight-basketball
what player had the fewest steals all season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name those players with total foul tallies of less than 3 in any one particular season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant have when he had 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
who has had the same or more steals as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
points of kob bryant over a season in which he played in point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
what players have played in the same amount or more games than kobe this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
has kobe bryant averaged 3 rebounds a season while playing for any team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
when kobe bryant has had 2 blocks in a season how many turnovers had he made	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )	overnight-basketball
what players did not play in the 2004 season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with most turnovers over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with most number of steals over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of points over a season of player kobe bryant who has 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )	overnight-basketball
players that scored the same or fewer points than kobe during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant play 3 games as	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )	overnight-basketball
how many steals did kobe bryant make	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
which team did kobe bryant play for with three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string team ) ) )	overnight-basketball
players that have more than 3 turnovers over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the position of kob bryant in the season he played 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )	overnight-basketball
which is the season kob bryant made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )	overnight-basketball
how many turnovers kob bryant made in season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )	overnight-basketball
how many assists did kobe bryant have who had three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )	overnight-basketball
in which seson did kobe get 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
player who has not played more games than player kobe bryantover a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player played in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whats the per season average for points scored while kobe bryant was at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
how many blocks kob bryant made over a season in which he made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )	overnight-basketball
what is number of the player	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )	overnight-basketball
whos got the same number of fouls as kobe each season theyve played	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the minimum number of points of kobebryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name those players with point tallies in any one season either less than or more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists did kobe bryant get when he was in the position of point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )	overnight-basketball
who has had the same or less points this season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player tied kobe bryants highest seasonal point score in a single season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find players who have performed blocks in any one season tallying to the same amount as those blocks performed by kobe bryant in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers kob bryant made in the season he made 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
how many points had kobe bryant scored after 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )	overnight-basketball
which player had the same number of points in the season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds does kobe bryant have a season with 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )	overnight-basketball
how many fouls in a single season did kobe bryant have that is greater than three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )	overnight-basketball
which player has had more points in a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant make	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )	overnight-basketball
players with the same number of played games as kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the position of kob bryant in the season he made 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )	overnight-basketball
which player played more than 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had more than three fouls over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )	overnight-basketball
how many turnovers has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
which player had no more than three assists during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played the record number of games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team was kobe bryant on when he played less than three games in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
how many games did kobe bryant play for the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )	overnight-basketball
during the season in which kobe bryant had game time in 3 games how many assists was he responsible for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )	overnight-basketball
whats kobe bryants season turnover average	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) )	overnight-basketball
what player has the most steals during a single season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what year did kobe bryants points total three	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )	overnight-basketball
find those players whose tally of games participated in is smaller than the number of games in which kobe bryant has had game time in	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls were played by kobe bryant when he scored 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )	overnight-basketball
how many steals did point guard kobe bryant have over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )	overnight-basketball
name a player who has had more blocks than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
position of player kobe bryant who has 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )	overnight-basketball
what player had more blocks than kobe bryant whose number of points is 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )	overnight-basketball
team of player kobe bryant with 3 points over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )	overnight-basketball
kobe bryants team when he had 3 rebounds for the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
how many three point assists does kobe bryant have in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )	overnight-basketball
how many assists kob bryant made in season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )	overnight-basketball
what player has played the least number of positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has under 3 assists all season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant play when he made three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
in which seasons kob bryant made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )	overnight-basketball
who has had less than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points has kobe bryant gotten this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )	overnight-basketball
what position did kobe bryant play when his all season points equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )	overnight-basketball
who has had the most turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players scored less points over the season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find a player with 3 or less blocks in any given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
the number of turnovers of player kobe bryant over this season is 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )	overnight-basketball
what player has at least as many all season points as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played 3 or less games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player whose assists over a season is at most 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players who have less than three steals in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games kob bryant played in point guard position over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )	overnight-basketball
how many games kob bryant played over a season in which he made 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
what players had more points than kobe bryant in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )	overnight-basketball
how many rebounds did kobe bryant get after 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )	overnight-basketball
player whose number of blocks over a season is not less than that ofplayer kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant make over the season when made only 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )	overnight-basketball
what is kobe bryants allseason point total	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )	overnight-basketball
which plater made the least amount of blocks during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player didnt play 3 games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player made less than 4 points in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers has kobe bryant made in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )	overnight-basketball
name the player with more turnovers per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers does kobe bryant have in a season he has 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )	overnight-basketball
how many assists did kobe bryant have allseason when had also had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )	overnight-basketball
during his los angeles lakers season how many rebounds did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
how many steals did kobe bryant have during the season when averaging three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )	overnight-basketball
in which seasons kob bryant made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )	overnight-basketball
player whose number of points over a season is same as that of player kobe bryantcover a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with the same number of blocks as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant have over the season for the la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )	overnight-basketball
what players have played at most two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had less than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whos got more than 3 assists each season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of turnovers over a season of player kobe bryant from team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )	overnight-basketball
what was the total number of assists in seasons where kobe bryant had just three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )	overnight-basketball
what is the number of the player kobe bryant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )	overnight-basketball
how many asists kob bryant made over a season in which he made 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )	overnight-basketball
how many assists did kobe bryant have after 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )	overnight-basketball
who has equal to or more than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant have as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )	overnight-basketball
what position did kobe bryant play when his allseason turnovers equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )	overnight-basketball
who has had more than 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had a total number of rebounds in a season not equal to three	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many teams are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )	overnight-basketball
who has played more than 3 games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player played in the same season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
kobe bryant played three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_games_played ) ) )	overnight-basketball
who has played 3 or more games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who have played fewer than 3 games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the smallest number on the team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player played fewer than three games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists did kobe bryant have when he made three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )	overnight-basketball
who has had more or equal to 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant play who had turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )	overnight-basketball
which season did kobe bryant play 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )	overnight-basketball
what year did kobe bryant have exactly 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
player with at most 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had the same number of fouls as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
either los angeles lakers or cleveland cavaliers	( call SW.listValue ( call SW.concat en.team.lakers en.team.cavaliers ) )	overnight-basketball
whos got the record for most rebounds in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )	overnight-basketball
when did kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )	overnight-basketball
what players have had less steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position was kobe bryant in when he made 3 fouls in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )	overnight-basketball
how many players have been on the lakers or cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the minimum number of steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had the same games played than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in which team did kobe bryant play in season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
what player plays the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have when he had 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )	overnight-basketball
how many turnovers did kobe bryant have on the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )	overnight-basketball
how many turnovers did kobe bryant have in a season he had 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
which player has got a minimum of 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists has kobe bryant got for this season so far	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )	overnight-basketball
how many season did kobe bryant have no more than three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )	overnight-basketball
how many assists did kobe bryant have with three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )	overnight-basketball
how many blocks kob bryant made over a season in which he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
players whose number of turnovers in a season is no more than that of kobe byrant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the maximum points of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many players	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )	overnight-basketball
what was the total number of steals in seasons where kobe bryant had only played three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
what player had 3 or more assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has played the greatest number of positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the number of games played by kobe bryant whose team is los angeles lakers over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )	overnight-basketball
players that have more and less than 3 blocks over seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players committed more fouls that kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position does kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )	overnight-basketball
what position did kobe bryant play in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )	overnight-basketball
how many turnovers does kobe bryant have over all seasons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
what players have less fouls than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player gets more blocks than  kobe bryant or at least the same	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has played for no more than two teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games was kobe bryant in during the season that he played with the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )	overnight-basketball
how many fouls were played by kobe bryant when he was at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
how many points did kobe bryant score over the season in which he played 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )	overnight-basketball
how many games did kobe bryant play in during the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )	overnight-basketball
find those players with a total number of turnovers in any one specific season that is less than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the total number of blocks in a season for kobe bryant when he had three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )	overnight-basketball
how many rebounds has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )	overnight-basketball
how many assists did kobe bryant of the lakers have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )	overnight-basketball
what player has no less than 3 allseason rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played the most games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds has players that are not the 3 had	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player played more than 3 games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had the fewest rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has more than 3 assists to their credit per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the least points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whats the number of assists kobe bryant gets in a season when hes got 3 or more blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )	overnight-basketball
which season kob bryant made 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )	overnight-basketball
what was the position of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player plays fewer than two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the least points this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in how many games did kobe score 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
what player played the fewest positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the same amount of turnovers as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has held the most positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points does kobe bryant have allseason when he also has 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_points ) ) )	overnight-basketball
player with the same or fewer blocks per season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players played the most games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has played with at most two teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had more steals than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many all season rebounds did kobe bryant have as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )	overnight-basketball
name a player with at least as many steals as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant play in a season where his number of blocks were over 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
how many points did kobe bryant score in the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )	overnight-basketball
name the season in which kobe bryants total point score was 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )	overnight-basketball
what players have at least as many turnovers that kobe bryant has during a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position did kobe bryant get 3 points as	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )	overnight-basketball
players with assists not equal to three in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists did kobe bryant make in the season in which he scored three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )	overnight-basketball
how many fouls does kobe bryant average over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )	overnight-basketball
what players made less than 4 assists in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the position of kobe bryant in season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )	overnight-basketball
what team did kobe bryant play for in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
name kobe bryants position when he had three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string position ) ) )	overnight-basketball
player with more fouls over a season than player kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who has minimum number of teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the least number of points in this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of blocks over a season of player kobe bryant who has played 3 games over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
what position was kobe bryant playing when he had the season in which he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
who has had less points than kobe bryant in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the season he scored he 3 points what was the number of fouls kobe bryant was responsible for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )	overnight-basketball
players that have the same number of fouls as kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls does kobe bryant average in seasons limited to 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )	overnight-basketball
which is the team of kobebryant who had 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string team ) ) )	overnight-basketball
who has had the same amount of assists as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
when kobe bryant had 3 allseason turnovers how many allseason points did he have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )	overnight-basketball
what players have had 3 or less rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of points over a season of player kobe bryant who has 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )	overnight-basketball
what players made more steals than kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who had few steals over the season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had less than 3 points this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with a total amount of blocks in a season equal to the most blocks in a season for kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe bryant score in the game that he had three steals last season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )	overnight-basketball
how many assists did kboe bryant have when he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_assists ) ) )	overnight-basketball
how many steals did kobe bryant have in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
who has the most points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that had were outrebounded by	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what is the position of player kobe bryant with 3 rebounds over this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )	overnight-basketball
players with less than three fould per game over the season players with the fewers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with the least played games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers does point guard kobe bryant have in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )	overnight-basketball
find the number of blocks in the season in which kobe bryant  also acquired 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )	overnight-basketball
how many rebounds and assists does kobe bryant have over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )	overnight-basketball
how many allseason blocks did kobe bryant have in 3 allseason games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
how many points did kobe bryant who had three turnovers have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )	overnight-basketball
players with less than 3 blocks over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had less than 3 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that average at least three assists per game over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the least steals this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who plays for either la lakers or cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players made less points than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant have in a season he had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )	overnight-basketball
kobe bryant played in the season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string season ) ) )	overnight-basketball
name a player who has played as many games as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with less than three fouls in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )	overnight-basketball
what season did kobe bryant score 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )	overnight-basketball
how many points were scored by kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )	overnight-basketball
in what season did kobe only give up 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )	overnight-basketball
what was the total number of assists in all seasons for player kobe bryant when he was with the lose angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )	overnight-basketball
who has had the same or more fouls as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has the same number of all season assists as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had more than 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has scored lesser points than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with three or more fouls in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had less than 3 blocks allseason	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the most twos by position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant have during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )	overnight-basketball
which team did kobe bryant play for when he had 3 fouls in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )	overnight-basketball
what players allseason blocks are no more than kobe bryants allseason blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
name players with a single position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of fouls over a season of player kobe bryant with 3 assists over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )	overnight-basketball
what was the total number of blocks for kobe bryant in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )	overnight-basketball
how many blocks with steal over 3 did kobe bryant play in one season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_blocks ) ) )	overnight-basketball
during the season in which he had 3 turnovers name the number of games in which kobe bryant participated in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )	overnight-basketball
are there players who have scored a total number of points in one season  larger than the total number of points scored in the same seaon by kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name the player who has scored the most points in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many seasons has kobe bryant played for the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )	overnight-basketball
kobe bryant with three assists had how many rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )	overnight-basketball
kobe bryant playing position	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )	overnight-basketball
how many fouls does kobe bryant average when hes played at least 3 games in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )	overnight-basketball
name of a player with no more rebounds each season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has a maximum of 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
for season 2004 note the number of total assists of kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )	overnight-basketball
how many rebounds does kobe bryant make per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )	overnight-basketball
what player scored 3 or less points during a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whos got the least turnovers so far this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
note the players whose total number of rebounds in any one given season is more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
how many blocks does kobe bryant average in a season with 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )	overnight-basketball
what players have the points same as kob bryants highest points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has fewer turnovers than kobe bryant in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds does kobe bryant have each season as a laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
name a player who has had fewer steals this season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has had the fewest fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name the other players in kobe bryants team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position is kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )	overnight-basketball
how many points does kobe bryant get per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )	overnight-basketball
player who has maximum number of teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists were made by kob bryant over a season in which he made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )	overnight-basketball
does kobe bryant have more fouls or rebounds per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_fouls ) ) )	overnight-basketball
kobe bryant had 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_rebounds ) ) )	overnight-basketball
what is the number of the player in this position	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )	overnight-basketball
who has more rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in the season in which he had 3 turnovers find the number of  point for which kobe bryant was responsible	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )	overnight-basketball
who else plays the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had the fewest blocks in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who played the fewest games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had at least three points during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the player responsible for the biggest number of steals in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )	overnight-basketball
during the season in which kobe bryant had 3 turnovers how many blocks was responsible for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )	overnight-basketball
how many turnovers did kobe bryant make in an allseason total of 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )	overnight-basketball
player that scored three or more points per game last season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with least number of blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had less than 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
whos got the fewest points in a year	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of played games over a season of player kobe bryant who has 3 steals over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )	overnight-basketball
how many points has kobe bryant scored this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )	overnight-basketball
players who made less than 4 steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many seasons has kobe bryant been starting point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )	overnight-basketball
during the season in which he scored 3 assists what position was kobe bryant playing	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
how many fouls does kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_fouls ) ) )	overnight-basketball
which player has played as any fouls as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists did kobe have this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )	overnight-basketball
what position does kobe bryant play who had three fouls in the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )	overnight-basketball
name a player with more than three played games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has less rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during  season 2004 note the total number of points scored by kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )	overnight-basketball
how many turnovers did kobe bryant have when his all season steals equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )	overnight-basketball
what player had did not have 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player played less than three games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games in a season did kobe bryant play where he had 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )	overnight-basketball
what player scored more than 3 points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals did kobe bryant have in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
which player as less than 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had less than 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have more than 3 turnovers over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player does not have 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had played more fouls than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have no more than three assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has not played 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals does kobe bryant get in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )	overnight-basketball
which players score at least 3 points per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in how many games has kobe bryant made 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )	overnight-basketball
fouls by kobe bryant over all seasons with 3 games played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )	overnight-basketball
which was the season kob bryant made 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
a player that has played for no more than two teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant play as point guart during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )	overnight-basketball
what team did kobe bryant have 3 fouls for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )	overnight-basketball
who has the record for fewest steals in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has most allseason points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player equal or more assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had more than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant get 3 fouls in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )	overnight-basketball
how many assists does kobe bryant usually make in a season after hes made at least 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_assists ) ) )	overnight-basketball
which player has made the least number of blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find players with assist scores over any given season that tally more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player had at least 3 turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers in the season did kobe bryant have for the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )	overnight-basketball
what position did kobe bryant play when he had 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )	overnight-basketball
number of turnovers over a season of player kobe bryant who has assists over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
how many turnovers did kobe bryant have when he had 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )	overnight-basketball
how many points did kobe bryant make in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )	overnight-basketball
what players played less games than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players all season blocks were no less than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has more or less than 3 all season rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players played in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who has played minimum 3 games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has been apart of the most teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the number of points acquired by kobe bryant over the entire season in which his number of fouls was 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )	overnight-basketball
who has the same number of rebounds as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games kob bryant played in the season in which he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )	overnight-basketball
what teams did kobe bryant play on as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )	overnight-basketball
which player has the minimum number of fouls of kobebryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant who had three steals have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )	overnight-basketball
what season did kobe bryant have 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )	overnight-basketball
number of assists over a season of player kobe bryant with 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )	overnight-basketball
player who has less than 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the least assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has no less than 3 allseason steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points kob bryant made over a season in which he made 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )	overnight-basketball
in which season did kobe bryant play in point guard position	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )	overnight-basketball
players that have more and less than 3 fouls over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant have when he made three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_turnovers ) ) )	overnight-basketball
players that never made 3 blocks in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the most assists over a season other than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team does kobe bryant play on	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )	overnight-basketball
koby bryant position	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )	overnight-basketball
how many steals did kobe bryant get in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )	overnight-basketball
how many turnovers did kobe get after scoring 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )	overnight-basketball
what player had 3 or less steals this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that have the same number of points in a season as kobe bryants lowest amount	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player has the lowest amount of rebounds in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds did kobe bryant make in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )	overnight-basketball
what players scored at least three points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in the same season in which kobe bryant had 3 rebounds what was the number of turnovers that he had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )	overnight-basketball
player who has played largest numbergames over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks did kobe bryant have all season when he had 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )	overnight-basketball
which player has less then two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players has the most points over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name the player who has played at most 3 games over this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant make over the season where he made 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )	overnight-basketball
who has played the fewest games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has the highest number of assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals does kobe bryant have over all seasons	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )	overnight-basketball
players that had three or fewer assists over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of assists over a season of player kobe bryant with 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )	overnight-basketball
players that have no more than 3 fouls over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many seasons has kobe bryant broken 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )	overnight-basketball
how blocks did  did kobe bryant make after playing 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )	overnight-basketball
for which team did kobe bryant make three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
who has the fewest assists per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many blocks does kobe bryant have in a season with at least 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )	overnight-basketball
find those players with point totals in any one season equalling at least 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had equal or fewer assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players all season assists totaled at least as many as kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games has kobe bryant played and hasnt scored a 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has less than 3 fouls total in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with most points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player played more number of games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player who played at least as many games as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the season kobe bryant committed 3 steals how many fouls did he have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )	overnight-basketball
how many assists can kobe bryant make in seasons with only 3 games played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )	overnight-basketball
what players have played for fewer than two teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find the player with the highest score of assists performed in any one given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name the player who did not have three fouls in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
team of player kobe bryant who has 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
players that have more than three steals over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
in which position did kobe bryant get 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
how many rebounds did kobe bryant make when his total blocks over a season was 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_rebounds ) ) )	overnight-basketball
player who has played same number of games over a season as by player kobe bryantover a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many players have had more turnovers in a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have allseason	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )	overnight-basketball
number of played games over a season of player kobe bryant with 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )	overnight-basketball
how many fouls did kobe bryant make allseason playing 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )	overnight-basketball
how many points did kobe bryant score during the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )	overnight-basketball
player with not more than 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls were played by kobe bryant after 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )	overnight-basketball
players that played in the most games during a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of blocks over a season of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_blocks ) ) )	overnight-basketball
which player has a similar per season rebound average as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many steals has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_steals ) ) )	overnight-basketball
how many points did kobe bryant score allseason when his steals equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )	overnight-basketball
which player had at least three steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team did kobe bryant play 3 games for allseason	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string team ) ) )	overnight-basketball
number of points over a season of player kobe bryant who has 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )	overnight-basketball
how many did kobe bryant play so far this year	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )	overnight-basketball
which player has played less games than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points in a season did kobe bryant have when he had only three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )	overnight-basketball
player with most number of fouls over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player played the fewest games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which players did not play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player who did not have exactly three assists in any given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who had at least as many fouls as kobe bryant in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe bryant have when he had 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )	overnight-basketball
how many blocks did kobe bryant have this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )	overnight-basketball
how many total points did kobe bryant have in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )	overnight-basketball
how many assists did kobe bryant have in the games where he had three fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )	overnight-basketball
what player played less than 3 games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the season in which kobe bryant had 3 turnovers how many assists were attributable to him	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )	overnight-basketball
how many assists did kobe get after making 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_assists ) ) )	overnight-basketball
what position is kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )	overnight-basketball
players who had more than three assists in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had 3 or more turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what seasons did kobe bryant play in	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player who has less than 3 assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with more than 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls in a season did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
player with not more turnovers over a season than player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with more than three turnovers in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has played for the least number of teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
are there players who have a gamesparticipated in tally equalling that of kobe bryant in any one specific season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team has kobe bryant played point guard for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )	overnight-basketball
how many blocks has kobe bryant had as an la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )	overnight-basketball
how many blocks did kobe bryant have after 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )	overnight-basketball
what players has less than 3 allseason fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
while he was point guard find the number of games played by kobe bryant in the same season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )	overnight-basketball
which players had fewer than 3 turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has as many blocks as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls did kobe have in the season he played point gaurd	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )	overnight-basketball
player whose number of rebounds over a season are not more than rebounds over a season of player kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has been in fewer games than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that have the least amount of fouls in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player whose number of assists over a season is more than that of  of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
mention the number of turnovers of player kobe bryant in 3 games played over this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_turnovers ) ) )	overnight-basketball
number of fouls over a season of player kobe bryant who has 3 steals over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )	overnight-basketball
what team did kobe bryant play when he made 3 rebounds over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )	overnight-basketball
players whose total number of points in a season is not 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more blocks all season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists does kobe bryant manage in seasons limited to 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_assists ) ) )	overnight-basketball
what player has a maximum of 3 allseason turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players made less turnovers than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of assists over a season of player kobe bryant from season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_assists ) ) )	overnight-basketball
who has had 3 or more assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players with a total number of rebounds in a season greater than three	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player got lesser number of assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers did kobe bryant get after the 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )	overnight-basketball
whos a player with less points per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players had more 3 or more turnovers in a game	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players played most games over a season same as kob bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have been on the most teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
is there a player with the same number of turnovers in a specific season as kobe bryant has in a specific season as well	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players are associated with one or no team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what players have the same number of turnovers over all their seasons equal to or worse than that of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who had the least rebounds this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many rebounds  kob bryant made in the season he made 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )	overnight-basketball
who has more or less than 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player is on either the los angeles lakers or the cleveland cavaliers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.concat en.team.lakers en.team.cavaliers ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which season did kobe bryant have only 3 rebounds in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )	overnight-basketball
los angeles lakers roster	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )	overnight-basketball
which player had no more rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_games_played ) ) )	overnight-basketball
in which season did kobe bryant play 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )	overnight-basketball
how many points does kobe bryant average over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during kobe bryants time with the lakers how many assists has he averaged per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )	overnight-basketball
name those players with blocks to their credit that tally less than 3 or more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_blocks ) ( string ! = ) ( number 3 block ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name the player with fewer than three points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who plays on the same team as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that play the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find players responsible for the same amount of assists in any one specific season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what team did kobe bryant play for when he had three blocks during a single season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
whats the position of kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )	overnight-basketball
who had less than or equal to 3 points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player with the most played games over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position does kobe bryant who has three steals play	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
how many steals has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_steals ) ) )	overnight-basketball
how many assists did kobe bryant have as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )	overnight-basketball
position of player kobe bryant who has 3 points over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )	overnight-basketball
player with at least 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the most turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many turnovers were got by kobe bryant who belonged to the los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )	overnight-basketball
in how many seasons has kobe bryant given up exactly 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_turnovers ) ) )	overnight-basketball
number of fouls over a season of player kobe bryant from los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_fouls ) ) )	overnight-basketball
who has had the same or more assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had more assists than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with more than three assists during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games will kobe bryant play this coming season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
how many rebounds did kobe bryant have over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )	overnight-basketball
player whose number of points over a season is not less  than that of player kobe bryantover a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name someone with more games per season played than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did la laker kobe bryant score	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )	overnight-basketball
whats  kobe bryants average steals per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )	overnight-basketball
what player had the same or more number of blocks as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
players that have at least 3 blocks a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has had the same number of turnovers as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what was the total number of games played by kobe bryant in a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) )	overnight-basketball
how many turnovers has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )	overnight-basketball
how many rebounds did kobe bryant have this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )	overnight-basketball
what player played in the same or less games as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
player having not less than 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player has at least as many points in a season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what position was kobe bryant playing when he has 3 rebounds over a full season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string position ) ) )	overnight-basketball
what player had over 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
name a player with no more than three fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player gets more assists every season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
which player scored less than 3 points in a full season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many assists did kobe bryant make in a season of 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )	overnight-basketball
in what year did kobe bryant have three fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string season ) ) )	overnight-basketball
are there players who have participated in more than 3 games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
find players who have committed a higher amount of fouls in a given season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many points did kobe bryant who had three fouls have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_points ) ) )	overnight-basketball
how many turnovers did kobe bryant have in a game where he had three fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )	overnight-basketball
how many fouls were committed by kob bryant over a season in which he made 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )	overnight-basketball
what team does kobe bryant play for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string team ) ) )	overnight-basketball
what player had less than 3 points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many seasons has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string season ) ) )	overnight-basketball
how many points did kobe bryant score as the point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )	overnight-basketball
player with more played games in a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
who has at least as many assists as kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of turnovers of kobe bryant who has 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )	overnight-basketball
player with less than 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
position of player kobe bryant from los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string position ) ) )	overnight-basketball
how many 3point games did kobe bryant play allseason	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
position of player kobe bryant with 3 steals over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )	overnight-basketball
how many blocks did kobe have in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )	overnight-basketball
which player matches the season average steal rate of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_steals ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
what player had the most blocks this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many games did kobe bryant get 3 points in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )	overnight-basketball
how many games has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )	overnight-basketball
which players have the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
how many fouls does kobe bryant take in an average season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_fouls ) ) )	overnight-basketball
number of steals of point guard kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )	overnight-basketball
how many players are there total	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )	overnight-basketball
which players have been on two or less teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
during the season in which he had 3 steals how many rebounds was kobe bryant responsible for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )	overnight-basketball
how many fouls did kobe bryant have during the season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )	overnight-basketball
what team does kobe bryant play for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string team ) ) )	overnight-basketball
what players made blocks same as maximum blocks by kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )	overnight-basketball
number of rebounds over a season of player kobe bryant who has played 3 games over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )	overnight-basketball
what team did kobe bryant play for in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )	overnight-basketball
what block is to the right of block 1 and has a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
choose the block that has the same width as block 1 has height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
3 inch block right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block above the least blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a block thats the same width as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
select blocks that have a length of 3 icnhes and are to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose length is at most height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
block to the left of block 1 thats 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all the blocks with a smaller width than the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block whose height is smaller than length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find a block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what pyramidshaped block is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks shorter than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find a block at most as tall as block 1s width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
above and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block that is on the left side of two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block to the right and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
not more than 3 inches wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
select the block that is to the right of a block with a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find a block with a width that is less than the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all 3 or 6 inch wide blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
3 inch block near top	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
locate block one or block 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )	overnight-blocks
left of special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me the block that has a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what pyramidshaped block is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
what block is unique and shaped like a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me the block that is to the right of two or more blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the longest brick	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-blocks
find a block to the right of a block 3 in height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what block is two blocks to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the blocks that are 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks longer than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block that is below block whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the block with the same length as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
find me all blocks with more than 2 blocks to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
block above and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block to the right of the block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
how wide is block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )	overnight-blocks
select the blocks to the right and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
are there any 3inch long blocks to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
are there any blocks whose height is that of either 3 inches or 6 inches at most	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
select the brick that is to the furthest left	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block that block 1 is above with a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all 3 inch tall blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks that is above 3 inch tall blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
which brick is shorter than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find the block that has a shape of a pyramid and is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
left of block 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
block above special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find a block below and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find the 3 inch long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block below three inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
3 inches tall block at the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me any pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
which brick is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block has the largest number of blocks to its left	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks that block 1 is right and below of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block with the most shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )	overnight-blocks
block right of block 1 which is 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block whose length is length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
find me all the 3 inch long bricks left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block to the left of the special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
what block is block 1 or 2 to the right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
a pyramid shaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all blocks that above and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick has a length shorter than the length of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
name a block that has two or more shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string >= ) ( number 2 ) ) )	overnight-blocks
which brick is left of brick 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
which brick is above less than two bricks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks with the same shape as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )	overnight-blocks
block that has block 1 in the right and left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is above a block that is three inches in height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select all blocks that are in the shape of a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find the block that is the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
find me a block to the right of either block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
block taller or same height as the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
select a brick that is at least as wide as brick 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
get the second block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks with at most 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )	overnight-blocks
block which does not have block 1 above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find me all the bricks with 2 blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that more than two block is right of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what brick is as wide as brick 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
find me all blocks with less than 2 blocks to the right of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what color is block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )	overnight-blocks
find the block located on top of the block that is 3 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks 2 below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block below two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find blocks wider than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block that is left of block whose height is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what brick is below a brick that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
2 blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks underneath at least 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks at least 3 inches in width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is to the right of block 1 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block more wider than length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me the 3 inch wide pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
which special brick is pyramidshaped	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )	overnight-blocks
find me all the blocks left and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks that block 1 is below and above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is 3 or less inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks that is above and right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all pyramid blocks that is left or right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
what color is brick 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )	overnight-blocks
what block is to the left of the 3 inch tall block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find all blocks that are below blocks with height equal to 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks not right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )	overnight-blocks
block whose height is at least height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
what block has the most blocks above it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the 3 inch long block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
what block has block 1 left and right	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what shape is block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )	overnight-blocks
a brick which length is between 3 and 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
locate a block that is on the left side of the smallest number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the 3 or 6 inch wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
block whose width is at least height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
which block is below block 1 that is at least 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is left and right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what special blocks are above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
select the brick below and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
3 inches long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
choose the brick with the smallest width	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
which special brick is to the right of brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks left of more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose the brick to the right of the 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block whose length is width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
what is the blocks height	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
block to left of two or more blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose brick 1 or brick 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )	overnight-blocks
find me all blocks at most 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what blocks are special and are below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks not below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find me all blocks not left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )	overnight-blocks
select the shortest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-blocks
find me all special blocks that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
select the block that is to the right of block 1 and has a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me a block at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block is left and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find the total height of the blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
block to right of two or more blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block is the same color as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )	overnight-blocks
find me a block smaller than 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
which brick is to the left of the brick that is 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the special block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
choose a block that is bigger than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
3 inch block left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block has a width of less than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find a block whose width is three inches that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all special blocks that block 1 is under	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks right of 3 inch tall blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the special block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
which brick is no wider than brick 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block that is below block whose height is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
choose the block below block 1 that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
is there a block beneath two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
name a block that has block 1 on its left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is above two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that is right of at most one block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks that blocks 1 or 2 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me all the blocks that are special	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find the block to the left of the largest number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me the block that is to the left of the block that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks that is right of the block which block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block with the biggest width	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
which block is to the left of no more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that is below the least number of block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is above a brick that is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all 3 or 6 inch high blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
find me a block above at least two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block on the right side of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find those blocks with lengths that exceed either 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
height of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )	overnight-blocks
block that is shorter than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block that is shorter than block one	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
select blocks that are below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what brick has no more than two bricks to its left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block to the right of the least amount of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a block that is not 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
is there a block with a length whose measurement is equivalent to that of  block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
choose a block to the left of the special brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find the block that is on top of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks as tall as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
select a brick that is at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block has the greatest height	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
block within 2 blocks to the left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what brick has at least 2 bricks to its right	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is to the left of the special brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me a block with equal or less width than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
block right and up from block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
select a block that has the same width and height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
find me all the 3 inch wide blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that is left of block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me all blocks that block 1 is below and right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
locate the block with the least amount of blocks beside it on the left	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the brick that has the least blocks to the right of it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block with 3 inches of width	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is block 1 below and to the left of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the special 3 inch tall block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
find a block that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what brick is as long as brick 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
block whose height is 3 inches and whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is taller than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
choose block with pyramid shape under block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me the block that block 1 is to the right and above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks right of that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks as high as block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all the special blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find me all blocks below that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
get me a block to the right of a 3inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find a block at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
special block right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find a block at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
block that is above at most two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is no wider than 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block has the most blocks below it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me a block that is either 3 or 6 inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
find me all blocks above at most 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
2nd block right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block that is at most 2 block to the left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is below the 3 inch long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block whose length is 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
block whose length is minimum the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all the blocks right of the pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find me all blocks as wider than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block is to the right and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find a special block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that is to the right of the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that is left of block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find a block wider than block 1 is tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
which brick is no higher than 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me all blocks with at least 2 blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block is below the block below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the blocks with less than 2 blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is higher than 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block has height less than or equal to the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find blocks that are at least 3 inches wide or 6 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
locate the block that is special	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) )	overnight-blocks
is there a block with a width equal to either 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
find me all blocks as long as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block that is right of block that is special	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
choose a block that is the same width as block 1s length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
find the block underneath block 1 that is also 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the block that is 3 inches in length and is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks with the shape of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )	overnight-blocks
block whose length is at least width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
is there a block located to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find me the block that is below two or more blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is to the left of block 1 and has a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block is to the left of the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose the block beneath the 2 block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block whose width is smaller than length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me the block that block 1 is below and to the left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which brick has the most colors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string color ) ) )	overnight-blocks
block that is right of block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
a block that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks below the special blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
select the block that is special and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
block not right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
average height of block	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
which block is above and to left of block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks that block 1 is not right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
what block is above and to the left of block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
pyramid block right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
select a block with less than two colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )	overnight-blocks
block below 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block above a block which is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
the blocks under block 2 are smaller	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me the block that is above the block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is to the right of and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all 3 inch long blocks  that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block has at most two blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is as tall as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
block with more than two shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )	overnight-blocks
block above two or more blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks above pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
block whose height is at least 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block has the most blocks to the right of it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all 3 inch wide blocks that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block has the shortest length	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-blocks
find a block above at most two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all 3 inch tall blocks which block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
left of block below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block whose height is smaller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find blocks above block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me all blocks left and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
what brick is at least as high as brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
blocks of two or more colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )	overnight-blocks
what block three inches in width is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block that is right of block 1 and that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
above block at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block above and rigth from block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is to the right of the pyramidshaped brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
block above at leat two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select a block above block one that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the widest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
what block is to the right and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks that is at most below 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks shorter than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find a block that is below no more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that has block 1 at right and below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is to the left of more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block with height of either 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
find me all blocks at most as long as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block below block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
the 3x3 inch block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks below which block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block in block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
special block to right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks wider than the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
select the brick at the very left	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks right of pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
which block is at least as high as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
cannot paraphase	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the blocks below block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks with less than 2 shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )	overnight-blocks
select the blocks to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all special blocks  below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select block to the left of two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me the block that is to the left of block 1 whose shape is a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block below and two left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all 3 or 6 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
find me a special pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )	overnight-blocks
find me all the blocks as tall as block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
find me all blocks with the same width as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is below less than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks below pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
select all which is 3 inches in width and pyramid in shape	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find all blocks that are to the left of a pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
select the special block that is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find me a block that has a special block to its right	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
block that is below block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me the block that is to the right and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block that is 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
bock right of block that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the blocks with more than 2 blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
is there a block with a measurement of 3 inches or 6 inches	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )	overnight-blocks
3 inch long block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block taller than block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find the block located to the right of at least two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks with less than 2 blocks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me a special 3 inch long block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
special block to right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
3 inches high block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
what blocks are left of block 1 and 3 inches in height	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is special and that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is left of the block that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block wider than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
3 inch block right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block located on top of the highest number of other blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is below less than two bricks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block is longer than block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find me all blocks below 3 inch wide blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me the block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what blocks have a height not equal to 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me the block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block 3 inches high and long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
is there a block located to the left of another block that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the pyramidshaped block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block shorter than 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block is in the shape of a pyramid and is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me the block that has a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what block is above more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a block taller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block is less than 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find the block that is to the right of block 1 whose shape is also a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find the block that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick has a width smaller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select all bricks right of block 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me all blocks and and over block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what brick is 3 inches wide and 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me a block wider than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block that at most two block is right of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me a block that block 1 is to the left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks as wide or wider than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
choose a 3 inch block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a block that is below at most two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a brick that has more than 2 blocks to its left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the length of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )	overnight-blocks
select all blocks which has least number of shape	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )	overnight-blocks
which brick is wider than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me all 3 inch high special blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block below special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me the block that block 1 is below and that has a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
choose a block above a 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the single block that is located to the right of the largest number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block left and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
locate a 3inch lwide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is shaped like a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block two above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what blocks are to the left and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select the brick that has the least blocks to the left of it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is of 3 inches height and above block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is 3 inches or less long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
either block 1 or 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )	overnight-blocks
what brick is at least 3 or 6 inches	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )	overnight-blocks
find me all blocks right of block 1 that is above it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
choose a brick that is no higher than brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all 3 inch wide blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block two above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
see block above block 1 and get block left of that one	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what 3 inch brick is to the left of brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a block that is beneath either block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
which brick has a length smaller than 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
which is the block to the right of special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
what block is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
number of block	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block that is on the right side of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks 2 blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block that is at least 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
select the block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
3 inch block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
2nd block left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block has a width of 3 inches and is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is right of block 1 and whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
choose a block that is below a 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block with 3 inch height and 3 inch wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
locate the block that is no taller in inches than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
right and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block with two or less blocks to the left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block right of block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all the pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all the blocks below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me a block with the same width as block 1s length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
select the block that block 1 is not below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find me all pyramid blocks which is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks left of 3 inch blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block whose width is smaller than height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
what block has the shape of a pyramid and is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks below and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is below block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
3 inch block left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the brick that is above the least number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me either block 1 or block 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )	overnight-blocks
find the blocks to the right and left of block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block has block 1 at right and left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that is not less than 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is not longer than any other	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-blocks
choose the brick below brick 1 that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is to the left of less than two bricks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
a three inches block at the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
which special brick is above brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a block at most 6 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me a 3 inch long special block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
below and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
is there a block to the right of the block that is underneath block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what is the average width of the blocks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
find me all special blocks that block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block to the right of the 3 inch high block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the brick with the least number of blocks to the left of it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block above and to right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose width is at least the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
choose the special block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
what block is above the block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find the shortest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
find the block up 1 and right 1 of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which special block is to the left of brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the height of brick 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )	overnight-blocks
select the blocks that are to the right of pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
what block is not to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )	overnight-blocks
any block with width of either 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
what block is at least as tall as block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find the average height of a block	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
find me all blocks that have two shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )	overnight-blocks
find me all blocks whose width is smaller than 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
select the block that is to the left of the block that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is longer than brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all pyramid blocks which block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select blocks that have a height of 3 inches and are to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
3 inches long block and that is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that is left to the block of 3 inches 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all the blocks with the same width as the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
2 blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is to the right of more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
get me a block below and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
block two below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find the block that is shorer than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
which brick has no more than 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )	overnight-blocks
what block is 3 inches or taller	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find a block that is to the right of two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all the bricks  longer than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
what block below block 1 is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a block as wide as block 1 or wider	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
two blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
is there a block with the same color as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )	overnight-blocks
find the block that is right and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is to the left of the most blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the width of the block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
block whose length is at most length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
select a brick to the right of the brick directly below brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select a brick that is no bigger than 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is to the left of the block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
2nd left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which block is the tallest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
block that has the least number of color	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )	overnight-blocks
choose a block to the right of block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block at the left of pyramid shaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
right and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
how tall is block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )	overnight-blocks
which one is a 3 inch special block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me the block with the least number of blocks below it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks left of block 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me all pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
which is the 3 inches tall block at the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select a block with equivalent width to block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
block around block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
block above more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block to right of two others	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block without a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find the 3 inch wide special block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
find me all the 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block left of a block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks with 2 blocks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which special brick is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
find a block with the least blocks to the left of	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that is special and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
choose the block above the speciallooking block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
block whose width is smaller than 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block has two or less shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )	overnight-blocks
find a block with a length greater than block 1 is tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find a block with a pyramidshaped block below it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
which brick is at most 3 or 6 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
which brick has no more than two blocks to its left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the blocks that have a height less than or equal to block 1s length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me the block that block 1 is to ther right of and that has a shape of a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block left from two others	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block whose shape is a pyramid and whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what is the block above that has its length as 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks above and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is special and whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which blocks are right of blocks 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
what is the number of bricks	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the average width of the bricks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
is there a block to the left of more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
is there a block shorter in height than block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
which brick is below the brick to the right of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find a block that block 1 is longer than	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all the blocks that has at least 2 blocks to the left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the total length of the blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )	overnight-blocks
select the block below block 1 and block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
what block is longer than block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
block above pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find the block that has a width of 3 inches and is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is higher than brick 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
select the block that has a length of two inches above another block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block above least number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that is above block that is special	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me all blocks below 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me a block with a width of three inches that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is above brick 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
what blocks width is less than or equal to block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
3 inch long block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me a block with a pyramid shape and has a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is wider than brick 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find me all blocks below that block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block that is to the left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block buried under at least two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks as wide as block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
select the brick at the very right	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks shorter than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
what is the average length of the bricks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )	overnight-blocks
find me all blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks with less than 2 blocks to the left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks with at least 2 blocks below	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me a block that has less than two blocks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block which has block 1s below and right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
is there a block piled on any other block but only one	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select all blocks with height equal to the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
which brick is at least as long as brick 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
which block of 3 width is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a block that is is left of block two	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all the blocks left of 3 inch tall blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
right of block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose blocks wider than block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find a block with the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
select the block that is special and that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
block which is at the left of the block below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
look right of block 1 and find 3 inch block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is not right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find me a block with two blocks to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all the blocks taller than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
what block is to the left of block one	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
choose a block that is taller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block with pyramid shape at the right of block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
block that is right of at most two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
describe the shape of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )	overnight-blocks
what brick is both unique and 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
locate a block that is no wider than the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
what block is to the right of the block that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a brick that is at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
locate the pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
what block has two blocks or less below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block not to right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
look below and right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks 3 inch long right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
what block has a width of 3 inches and block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose length is smaller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what blocks length is smaller than block 1s width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
3 inch wide block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks taller than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
pyramid block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block whose height is at most 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is shorter than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find the block located beneath block 1 that has a 3 inch diameter	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a block with average length	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )	overnight-blocks
block that has the smallest width	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
block above 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks right of 3 inch high blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the block that is in the shape of a pyramid that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is left of and above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block whose height is height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
find me the block with the least blocks below it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block above the block at right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find a pyramidshaped block with a 3 inch height	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a block 6 inches or shorter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
choose a block that is as thick as block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
choose a block that looks just like block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )	overnight-blocks
find me all blocks below of which is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the 3 inch wide blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block whose length is at least length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find all pyramid blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
which brick is to the left of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
above and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that has the smallest height	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
what is the length of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )	overnight-blocks
find me all the blocks with at most 2 shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )	overnight-blocks
which block is wider than block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
which block has a width of either 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
select block of length 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
find the skinniest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
what is the width of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )	overnight-blocks
find me all special blocks that are below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that block 1 is to the left of and above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks right of 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
bloch longer than the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all blocks with 2 blocks left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all special blocks left of something	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me all blocks below 3 inch high blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the block that is shaped like a pyramid or a cube	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )	overnight-blocks
find me the special block on top of the block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
block a above block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find a block shorter than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
select the block that is above block 1 with a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
pyramid to right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
which block is the smallest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
which brick is furthest to the left	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
is there a block that is on top of the fewest number of other blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
3 inch wide block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is below the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that the most number of block is left of	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me a block with two or less colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )	overnight-blocks
what brick has more than 2 bricks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block that has the smallest length	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-blocks
block at the right of a special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
choose the block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks with less than 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )	overnight-blocks
find me the block that is above and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks that is left and right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the block above special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me all the blocks that is at least as long as block 1 is tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all 3 inch tall blocks left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block to the right of the block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block that is shape like a cube or pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )	overnight-blocks
block that has at most two shape	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )	overnight-blocks
block up and left from block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
pyramid block left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all the bricks at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
3 inch block to right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block of height not more than width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
what block is block 1 below and to the right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select brick whose length is more than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
select the block above the right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
second left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block above block one and to the right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the total width of the blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
block that at least two block is left of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a block with a length of 3 inches that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks below that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what 3 inch brick is to the right of brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick has two blocks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all the blocks two blocks left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks with at most 2 blocks to the right of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks that block 1 is right and below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
get a block above any pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
block that at most two block is left of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is shorter then block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block that is below the most number of block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block is above and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that is above less than two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block with the fewest blocks to the left of it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that block one isnt left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find a block that block 1 is above and to the left of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is left of the block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that has block 1 above and below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block that is below the block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block right of pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
block that is special and that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select all blocks whose length at a maximum of 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
below and right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block with a height that does not surpass either 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block is to the left of the least blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick has less than two shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )	overnight-blocks
find me all blocks with at least 2 blocks to the right of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a block with height equal to block 1s length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
block whose shape is a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me the pyramid block that is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
select the block that is two blocks above that block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is to the right of the special brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
two shape block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )	overnight-blocks
how many blocks are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick has no more than two bricks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a block beneath block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the color of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )	overnight-blocks
find me all blocks that is 2 blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all pyramid blocks that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
3 inches long block at the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block is above the brick that is 3 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find a block that is right of at least two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block has a width of 3 inches and is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select the brick two bricks left of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me the block that is to the left of the block that is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block below and to left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that less than two block is left of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the length of the block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )	overnight-blocks
find me all blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is to the left and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the blocks that is 3 inches wide and long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is to the right of the 3 inch wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the block that is on the left side of the block that is 3 inches in length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the block with a length shorter than that of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block above less than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose the brick shaped like a pyramid or a cube	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )	overnight-blocks
find the blocks that have two shapes or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )	overnight-blocks
what is the block below and left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block below 3 inches wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
locate the block beneath block 1 that also has a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
3 inch tall bock below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select me the block that is above block 1 and has a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all the blocks left of special blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
block below a special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
what block has a width of three inches and that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
locate the block with a height measurement that equals at minimum the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
choose a block that is the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find all special blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
select the lower block that is 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
which pyramid shaped block is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block that the least number of block is above	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block above the block to the right block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
gather all the blocks that are not 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks at block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all special blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a block below at least two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks above that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block that is to the right of more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block whose width is width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
find me all blocks above which block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
block above 3 inch tall block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
is it a pyramid or a cube	( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )	overnight-blocks
find a block that is at least the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all 3 inch long blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a block taller than block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find the block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks with a length longer than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find a block that is on top of two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select a block with two blocks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
pyramid shaped block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
choose the brick that is above the brick to the left of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose block underneath block under block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks at least 3 inch wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what is the left most block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the blocks that are under no more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is at the very top	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select block 1 or 2	( call SW.listValue ( call SW.concat en.block.block1 en.block.block2 ) )	overnight-blocks
block with one shape	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string < ) ( number 2 ) ) )	overnight-blocks
locate a block with a width that is more than either 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find the block that has a width of 3 inches and is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks which block 1 is right and left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the 3 inch wide special block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a block that is wider than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
special block left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
which brick is shorter than brick 1 is high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
block with same width that of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
block to the right of at least 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a block with a diameter that does not surpass the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what pyramid blocks are above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is below the special brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me all blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the total width of the brick	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
block that is above block which is right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block that is in the shape of a pyramid and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all pyramid blocks with height equal to 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a special block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string is_special ) ) )	overnight-blocks
block that has block 1 above and left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all special blocks that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find the block with the most shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )	overnight-blocks
locate the block that is on top of at least one other block and that has a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select all pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all the blocks at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me all the blocks at most as tall as 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
which brick has less than two bricks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is to the right of a pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find me all blocks left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that is to the right of block 1 with a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks that block 1 is left and above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
above and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is below block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find a block with equal height and width measurements specifically 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the pyramid shaped block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
select a block to the left of block 1 that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is special and that is special	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string is_special ) ) )	overnight-blocks
select the blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block is at the second left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which brick is 3 inches wide and to the right of brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find the blocks that have a width of 3 inches and are to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the 3 inch tall block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is to the right of the least blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me a block skinnier than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find the block whose length and height is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the block with a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find special blocks with block 1 above them	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks as tall as the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
choose a block between 3 or 6 inches	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )	overnight-blocks
find me the block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a pyramidshaped block 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block that is right of less than two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the height of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )	overnight-blocks
find me all blocks above and right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all pyramid blocks that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
the block that is equal to the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
what is the height of an average block	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
choose a block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the blocks as long as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
locate a block that is shorter than 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
block longer than width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
choose a block to the right of the most blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what 3 inches long block is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is 3 or less inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block that two block is right of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks at least 2 blocks below	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which blocks are left of singleorfewer blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is to the left of and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block that block 1 is to the left and below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find blocks that are at least as tall as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
blocks of more than two colours	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )	overnight-blocks
which brick has a width less than the length of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
which block is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string ! = ) en.block.block1 ) )	overnight-blocks
what block is to the right and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
pyramid block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find all blocks with height less than 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me all the blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
select the blocks that are 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block less than two blocks below	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block that is beneath the smallest number of other blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select a block longer than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
which 3 inches long block is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block taller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
select the block that has two shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )	overnight-blocks
3 inch block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks with 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )	overnight-blocks
select the block on the left side of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select a block with a height of 1 block width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
what is the special block in the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select all blocks of length 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )	overnight-blocks
what is the color of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )	overnight-blocks
find me all the blocks that is not 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
block at the left of least number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all special blocks that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find a block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
block as long as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
what block is above the block that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all 3 inch blocks left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what pyramidshaped brick is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
which brick has two bricks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is longer than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
select the pyramid shaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
select bricks that are at least 3 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
choose a block that is the right of the furthest block to the left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks front and left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks with a width shorter than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me all the bricks wider than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
the unique 3 inch wide block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
block two spaces above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that is taller than three inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
there is a block below block 1 and a block above that one find it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block that is on the right side of the block on the left side of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find the block that has a height that does not surpass the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
block at the right of 3 inches wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me a block that is to the left of two or less blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks shorter than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find the shortest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
find me all the blocks at most as long as the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
is there a block on the right side of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find blocks with the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
3 inch tall block right from block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
2 blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which brick has a length shorter than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find the special block that is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
select the 3 inch long block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks below and right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
choose a 3 inch block under block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all special pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all blocks to the right and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block with a width smaller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block to the right of block 1 and above it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me the block that is to the left of block 1 with a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is not below brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string ! = ) en.block.block1 ) )	overnight-blocks
get the blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks above 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block below a pyramid shaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find me the block that is to the right of the block that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block on bottom	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all 3 inch wide pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block below and left from block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block right of more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
a brick between 3 and 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
block that is right of block that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
3 inches long block which has block 1 at left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all special 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
the block beneath the block which is less than two	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block above and right from block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
select a special pyramid block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )	overnight-blocks
select the block that block 1 is to the left of and that has a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select all blocks with length greater than 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find the blocks that are above and left to the block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks 2 above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find the block whose height is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block left from 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks over and right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks left of 3 inch wide blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
block that the most number of block is below	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block whose height is larger than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is above the block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all 3 inch tall blocks that block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is above the pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
which brick is below the brick shaped like a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
what block is below the special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find a block 6 inches or less long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
pyramid block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks no bigger than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the blocks that has at most 2 blocks to the right of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what is the number of blocks	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block that has a width of 3 inches and is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block under and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is no higher than brick 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
choose a 3 inch tall brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block right of 3 inch wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
choose a special block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks which is left and above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which block is below block that is at the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
is there a block whose diameter and length is an equal 3 inches in both those directions	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select a block that has less than two colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )	overnight-blocks
which block is farthest to the left	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a block with a 3 inch long block below it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me the blocks that are more than two shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )	overnight-blocks
select the block that is in the shape of a pyramid and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
select all bricks with length of 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
what block is the block to the right and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks that block 1 is left and under	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is to the left of the 3 inch brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
is there a block to the right of block 1 and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
is there a block that is to the left of block 1 that is also 3 inches in length	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what blocks are both above and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block underneath block 1 that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block with same color as of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )	overnight-blocks
find the pyramidshaped block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all the bricks below block 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
get a block to the left of block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
multicolor block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )	overnight-blocks
select the block 3 inched high to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what blocks are below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block that is below the most populated bricks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is to the right of block 1 and is in the shape of a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find all blocks that are as long as or longer than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
which block is closest to the bottom	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
dual colored block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )	overnight-blocks
find me all blocks that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which block is only a single color	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )	overnight-blocks
find the block with 3 inches of height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is below a brick that is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
get a 3inch long block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the blocks that is not a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )	overnight-blocks
what block is to the right of block 1 and has a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block that is at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
the block below block one and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
select the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
choose a block that is the right of block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is higher than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is as long as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
find me all the blocks at most as tall as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
select the 3 inch wide block left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block that is left of a block that is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
choose the most colorful block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string color ) ) )	overnight-blocks
block whose length is not 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks with at least 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )	overnight-blocks
find a block the same color as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( call SW.getProperty en.block.block1 ( string color ) ) ) )	overnight-blocks
what block is to left of more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a block that is not more than 2 shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )	overnight-blocks
which brick is above the brick to the right of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that is below block whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all 3 inch tall blocks that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select a block that has a length of more than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find the block that is 3 inches in height and is on the right side of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me the block that is to the left and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all 3 inch long blocks that block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block with two colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )	overnight-blocks
select the blocks to the left of and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
block 3 inches long and below block one	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block below block 1 that is 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is special and has block 1 on its right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block to the left of two blocks or one but no more	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what blocks are above the block that is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select all blocks that are 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
choose block at right of block over block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select blocks that are two colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string = ) ( number 2 ) ) )	overnight-blocks
block left of 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block left of blocks 1 and 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me all 3 inch tall blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is above the 3 inch high block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the block on the left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
which block is the shortest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
block below and right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
locate the block to the right side of a block measuring 3 inches in width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks above a pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
select a brick whose length is at least the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find me all blocks  with at most two blocks left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the special block with block 1 below it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
which block is at least 3 or 6 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
choose every block measuring 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
a 3 inch block has a block on top of it find that block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the blocks that are above and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks below two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me the block with the least colors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )	overnight-blocks
select the block that is to the left of block 1 and has a total height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
how long is the block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )	overnight-blocks
which brick has the most shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )	overnight-blocks
3 inch tall block  above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me the block that is below the block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
below and right from block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block below block 1 which is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block whose height is at most 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me the special block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a special block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
is there a block with a width that equals 3 or 6 inches maximum	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me all blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block that has the most number of shape	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )	overnight-blocks
what block is at least as tall as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find a block 6 inches long or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
block above block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block to the left of pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
select all special blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
choose a block above the least populated bricks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block with the pyramidshaped block above it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
what blocks height is not 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all the blocks longer than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
gather all the blocks that are 3 inches or more	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all pyramid blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
what block is to the left of the block that is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block above 1 block and left of 1 block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what brick has at least two bricks to its left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
right of block 1 and block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
3 inch block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is 3 or 6 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
select the block whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
right of special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me all pyramid shaped blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
choose a block that is less thick than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find me all blocks below blocks 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
which pyramidshaped block is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
total length of block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )	overnight-blocks
block above pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
get the special block from right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find me all blocks left of that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block that is shorter than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all blocks that block 1 is right of and which is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block the same shape as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )	overnight-blocks
find me all blocks above and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block above two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all 3 inch wide blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block that has a length of less than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find a block between block 1 and a block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is below block 1 and has a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is left of block 1 and 3 inches in length	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose length is larger than 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
third block to the left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
is there a block on top of the pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
locate the block with a length that exceeds the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
block which is at the right of most number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a block that has block 1 to its right	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
block that more than two block is left of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select a block that has width and height of 3 inches each	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me a block that is not a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )	overnight-blocks
select the blocks to the right of greater that two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the 3 inch high block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what is the number of the block	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block with maximum two colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )	overnight-blocks
what block is below two blocks 	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that is at the right of most number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block is to the left of the 3inch high block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
3 inch block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which pyramid blocks are to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block two right from block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the blocks above 3 inch wide blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what block has less than two blocks to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block of 3 inches height and placed in left 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what block has block 1 above and left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
what block has width less than or equal to block 1s length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block above and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks below which block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block with a height less than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
select the 3 inch block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose length is 3 inches and whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is block 1 to the right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is two blocks to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
a special block whose shape is pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
what block is to the left of either block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find the block that is underneath block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose height is not 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all the blocks taller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what is the height of the block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
which brick is no wider than brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
which brick is 3 or 6 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
select the least colorful brick	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )	overnight-blocks
find me a pyramid or cube shaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )	overnight-blocks
what block has block 1 on the right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is above more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me the block that is below the block which block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is above the block of block1 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks over that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block whose length is larger than width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
what block is to the left of the 3 inch long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
name a block with block 1 below and to the right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks 2 blocks from the right	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block left of pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find the longest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-blocks
block above 3 inches long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block whose length is at least 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
what block is at right of 3 inches long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
which brick is not to the left of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string ! = ) en.block.block1 ) )	overnight-blocks
select the block that is above the smallest group of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a block left of and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
is there a block no wider than 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
block whose length is 3 inches and whose shape is a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block with lowest width	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
what is the length of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )	overnight-blocks
what block has block 1 on its right and is pyramidshaped	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
choose a block that is not pyramid shaped	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )	overnight-blocks
locate the block beneath the block that has a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block not to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
which brick is farthest to the left	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all 3 inch wide blocks that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a block shaped like a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me the block that is above the block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the bricks with a smaller width than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is 3 inches tall and pyramidshaped	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all 3 inch long blocks which block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block two above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks 2 below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all 3 inch wide and long blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which blocks exceed 3inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is below the most blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a block between 3 and 6 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me all special blocks left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find a block with a diameter that is wider than 3 inches total	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks that block 1 is left and below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
which block has the highest number of blocks below it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find blocks that are taller than block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block above 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
select the block below the one on the right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick has a width smaller than the height of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
what block has the fewest shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )	overnight-blocks
select the block that is to the left of block 1 and that has a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the block above the left one	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all 3 inch high blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks below block 1 which block 1 is also below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the bricks below at most 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks at least the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all blocks at most 6 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
which pyramidshaped brick is 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find all special blocks to the right of block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
which brick is below the brick that is above brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block that has less than 2 blocks to its left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the 3inch long block which is located to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the block to the left of the block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all pyramid blocks that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
block whose height is 3 inches and that is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all special blocks that are above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
select the blocks left of and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block that is one to the left of another block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks taller than the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find the block that is on the other side of a block located to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which brick is no longer than brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all blocks right and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the block above block 1 and on the left side	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
choose a block which is as long as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
select the bricks that are less than 6 inches tall then select the bricks that are less than 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find me all 3 inch tall special blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
find a block that is not above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find me all special blocks that is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
what special block is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is below block 1 and whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block that has block 1 or block 2 at right	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me a 3 inch tall pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the blocks below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the blocks that are to the left of block 1 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which brick is taller than brick 1 is high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
which type of block has the most shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )	overnight-blocks
find me all 3 inch tall blocks which block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the tallest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
select the block that block 1 is to the right and above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find blocks to the left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
choose a 3 inch block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the brick that is below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find a block that is at least 3 to 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
block whose length is larger than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me a 3 inch long block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block whose shape is a pyramid and that is special	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )	overnight-blocks
2 blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what special blocks have a length of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
which brick is at least as high as brick 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
which brick is above brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
find me a block with at most two blocks to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
pyramid block rght of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is above block 1 and has a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block that block 1 is above and below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which brick is at least 3 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what is the total height of the blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
is there a block to the right of either block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find the block that is right of block 1 and has a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block is at least as wide as block 1 is tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
3 inch wide block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block right of at least two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
width of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )	overnight-blocks
find pyramid shaped block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
which block is below a block that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that is above block whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me the block that is above the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block that the least number of block is right of	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all the bricks that have at most 2 blocks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what block is above block 2 or block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find me the block above the special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find a block with a length and width of 3 inches each side	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the blocks less than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
how tall is block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )	overnight-blocks
find me all 3 inch wide blocks that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me the block that is to the right of the special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
which brick is the same shape as brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )	overnight-blocks
choose a brick that is to the left of a brick that is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks with a length shorter than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find a block below the block on the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find a block whose height is smaller than the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all special blocks that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find me the block that block 1 is below and above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose height is 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )	overnight-blocks
what block is skinnier than the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
left of block over block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the blocks below at most 1 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all special blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
left of and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me a block with a height of 3 inches that block 1 is to the left of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks that is to the right of the least number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block below block right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
3 inch block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that has a width of 3 inches and is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block located beneath the second block that is located to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks with more than 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )	overnight-blocks
select the block above the right one	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
3 inch tall block at the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select a block with height less than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all blocks that block 1 is left and right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the 3 inch tall pyramid bricks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is on the left of block 1 and is 3 inches in width	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks that block 1 is above and right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
get me a block above and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the blocks who have a height of 3 inches are are to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block that block 1 is to the left and above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which block has a length smaller than block 1s width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find a block of 3 height above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block that left of block one and special	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find the block that has a height of 3 inches and that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block with a length of 3 inches that is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
what brick is no more than 3 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block below block one	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the special blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
what shape is brick 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )	overnight-blocks
what block is less than 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
right of 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
pyramid block 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block is 3 in height and has block 1 on its left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks at most 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks over that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is above block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the block to the right of the 3 inch tall block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what is the total width of the block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
find the block located on the left side of the special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
choose the brick that is 3 inches high below brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block that the least number of block is left of	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks whose width is shorter than the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
select the block to the right of the block left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which special block is 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string is_special ) ) )	overnight-blocks
what block is to the left of the 3 inch wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find a block with a height no more than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
block to the left of a block that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks with height and width equal to 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which block is the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
what block has a length of 3 inches and block 1 above it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find a block with less that two blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
pyramid right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
see block below block 1 and choose the one left of it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select the pyramidshape blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
block above most number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block has the largest height	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
which brick is 2 bricks to the right of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block has less than or equal length then block 1 has width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
block whose height is larger than width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
select the pyramidshaped blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
the third block to the right	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block right and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block left of more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the special block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
block whose length is at most either 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find a 3 inch wide pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me the block that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks below 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all the blocks shorter than block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
tell me the number of blocks	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks at most as tall as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
how wide is block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )	overnight-blocks
below and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks with at least 2 blocks to the right	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
locate the block with a diameter less than that of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find the 3 inch tall block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks not 3 inches high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
block above two others	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select block below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks below and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the height of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )	overnight-blocks
find all special blocks that are 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks that is left or right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find the block that has the most blocks to its right	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
pyramid block rght of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
which brick is closest to the top	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block has two blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all special blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
which block is the same length as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )	overnight-blocks
find the block below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block left of block one	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is 3 tall and has block 1 on its left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select all blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find a special block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
find a block with the least number of blocks below it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string below ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a block that is right of a 3 inch brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
locate the block that has a shape other than that of a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )	overnight-blocks
choose a block that is below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is closest to the bottom	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the pyramidshaped block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
what block is below the block that block 1 is to the left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block above and right from block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block no bigger than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me all the blocks that has at most 2 blocks to the left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block underneath the pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
block left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
left and below of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which brick is not 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
choose the most shapeless block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )	overnight-blocks
block left of block above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
select all 3 inch high blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me the block that is left of two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block above block 1 that is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
select all the pyramidshaped blocks above block1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
what is the average height of a brick	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
find the block with 3 inches in length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
what block is at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find the block below the block under block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block as long as the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
find me all blocks with at most two blocks to the left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block with the most blocks to the right of	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what blocks are left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
find all the blocks that are shorter or longer than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks that is right of more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is below brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string ! = ) en.block.block1 ) )	overnight-blocks
block that is above block whose shape is a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find me all blocks that is below which block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what 3 inch block is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find the 3 inch long pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block below two or more blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the special block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
name a block of 3inch width above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks with at least 2 shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )	overnight-blocks
block below block 1 and block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
block that at most two block is below	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks right of blocks 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
3 inches wide block at the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
choose a block to the left of block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that has the largest height	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-blocks
what block is thinner then block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
get the block that is 3 inches tall found left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the average block width	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
choose a block that is smaller than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me all blocks above that block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
a 3 inch brick that is shaped like a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is taller than brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
look right of block 1 and get the special block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block has the same width as block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
which brick is no wider than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
which block is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is longer than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is to the right of the block that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find blocks above block 1 and below block 1 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me the block with the smallest width	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
block two up from block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all 3 inch tall blocks that block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is the longest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-blocks
select a block that has a width that is the same width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find me all blocks that block 1 is left and right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block with two or less blocks to the right of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block with only one color	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )	overnight-blocks
select the blocks above block 1 and 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
select the blocks on the right of and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select the brick with the least blocks above it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
above block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
which block that is 3 in height has block 1 below it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the block that block 1 is not to the left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
which brick has no more than 2 bricks to its right	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
what block three inches in height is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
is there a block that is taller than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
select the 3 inch tall block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks not above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string ! = ) en.block.block1 ) )	overnight-blocks
select the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block not below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
find me all the blocks above block 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
find the block that is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all blocks that block 1 is not under	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )	overnight-blocks
block that is left of block whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
which brick is below brick 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
what block is block one above and to the right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block right of the block below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block whose shape is not a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )	overnight-blocks
find me all blocks with length less than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
which brick is furthest to the right	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which block has less than two blocks to its right	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
is there a block piled on top of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the average height of the blocks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
a pyramid or a cube	( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )	overnight-blocks
block above at most two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block whose length is larger than height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
what block is above the 3 inch wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks with 2 shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( number 2 ) ) )	overnight-blocks
choose a block that is not as thick as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
block aboe and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which blocks have a height equal to the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
select a block with a length larger than the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all 3 inch tall blocks that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is at least as long as block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
choose the brick that is the least thick	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )	overnight-blocks
find all the special blocks that are 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
select the block above on the left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the average height of the bricks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )	overnight-blocks
select the block right of block 1 that is 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block whose shape is a pyramid and whose shape is a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
select the blocks above and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all 3 inch wide blocks that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select a block who has width greater than or equal to block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
which brick is to the right of the brick to the left of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me the special blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
choose a block that is 3 inches and shaped like a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find me all blocks that is above and right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is between block 1 and a block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
choose a block that is under block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
block left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is above block whose height is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
which brick has at most two shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )	overnight-blocks
block whose width is smaller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block is to the left of the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all blocks left of 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose a block that is to the left of block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
what pyramidshaped block is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
find me all the pyramid or cube bricks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )	overnight-blocks
find me all blocks as tall as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
block above block one	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick has the least number of shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )	overnight-blocks
block right of a block which is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find all blocks above 2 or fewer blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the blocks on the right and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is above block whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
which brick is no longer than brick 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
find me all the blocks at least as long as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
which brick is as long as brick 1 is tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )	overnight-blocks
find the block with the most colors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string color ) ) )	overnight-blocks
what block is to the right of the block that is three inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find the blocks with length and height of 3 inches 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
which brick is to the right of brick 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
which brick has more than two bricks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
is there a block piled on top of either block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
choose a block below the 3 inch brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
above block 1 to the left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is left of a 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
block right of block which is left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )	overnight-blocks
block which has block 1 at left and above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
find a block shorter than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
what block has two or more shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string >= ) ( number 2 ) ) )	overnight-blocks
select all bricks that are not 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
find me the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
is  there a special block with a height that is only 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block has less than two blocks to the right of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block that is below the block with a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me a block that is to the left of the block with a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me a block below the 3 inch tall block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find that block that is to the left of just one other block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
select the block that is to the left of two or more blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what block has block 1 at its left and right	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
select a block below block 1 that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is below no more than two bricks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
choose the block below the special looking block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string is_special ) ) )	overnight-blocks
which special block is 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find me all blocks left of pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )	overnight-blocks
find the block below the special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )	overnight-blocks
find me all blocks above that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )	overnight-blocks
block below and to right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
3 inches long block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )	overnight-blocks
which brick is not 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )	overnight-blocks
choose the block that is below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me all the bricks at least as wide as block 1 is tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
is there a block that has only one block to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find the block with more than two blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find me all blocks below the smallest numbers of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
block that is left of block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )	overnight-blocks
what block is to the right of the 3 inch long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks at most as wide as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )	overnight-blocks
find me all the special pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )	overnight-blocks
find me all blocks right of the block that block 1 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find me the block in the shape of a pyramid above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
find the block with a maximum height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
choose a block that is taller than 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )	overnight-blocks
find a block that has at most two blocks to its left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
which brick is at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
find me all blocks that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
select the block which is right to block 1 with 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )	overnight-blocks
block that is left of block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )	overnight-blocks
block whose length is at most width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
what brick is to the right of the 3 inch brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
total width of blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )	overnight-blocks
find me all blocks right to whatever block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )	overnight-blocks
find the block that has a length of 3 inches and is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )	overnight-blocks
what is the width of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )	overnight-blocks
bricks that are the same size as brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )	overnight-blocks
find a block to the right and above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )	overnight-blocks
which block is at the very bottom	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string above ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
find a wider block than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )	overnight-blocks
which brick is 3 inches wide and 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
find the block with the same shape as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )	overnight-blocks
find me all pyramid blocks left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
which brick is longer than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
what special blocks are left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )	overnight-blocks
what block is shorter than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )	overnight-blocks
select the block that block 1 is not below it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string ! = ) en.block.block1 ) )	overnight-blocks
3 inches high block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
what block is left of the least number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )	overnight-blocks
pyramid block above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )	overnight-blocks
choose a brick that is wider than brick 1 is high	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )	overnight-blocks
find me a 3inch wide block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )	overnight-blocks
block that is right of block whose height is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )	overnight-blocks
meetings that start later than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
what date is the weekly standup meeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )	overnight-calendar
when is the weekly standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )	overnight-calendar
show me all meetings in greenberg cafe that alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me the meeting starting latest in the day	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
show me all meetings not ending at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings with at least two people attending	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )	overnight-calendar
show me all meetings lasting for three hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
meetings that start before 10am or before 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
which meetings dont start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
what meeting ends before the start of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me meetings after jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
what meeting has the earliest start time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
show me all meetings three hours long at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me all meetings ending no later than 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
important meeting on january 2nd	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all meetings that begin no later than the time the weekly standup meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
how long is the weekly standup meeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )	overnight-calendar
show me all 3 hour long meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
show me all meetings not beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
which meetings end when weekly standup is scheduled to start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )	overnight-calendar
show me all locations which have had at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me meetings that take 3 hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what meeting had the fewest people show up	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )	overnight-calendar
what time does the weekly stand up end	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )	overnight-calendar
what meeting ends at 10am and alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me average meeting length	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
person attending jan 2nd meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all meetings with either bob or alice attending	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-calendar
show me meetings that have two attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )	overnight-calendar
show me all meetings ending at the same time or earlier than the weekly standup begins	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings that have two attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )	overnight-calendar
show me all attendees of meetings on january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
meeting which starts at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what important meeting has a location at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me all three hour meetings on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
find all meetings which begin on january 2nd or january 3rd	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )	overnight-calendar
which meeting begins earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
show me all meetings ending after 10 am or 3 pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what meeting ends at most at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
location features the largest number of meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
what meetings have a start time of 10 am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )	overnight-calendar
meetings at greenberg cafe attended by alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me the dates of all weekly standup meetings	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )	overnight-calendar
what meeting has an end time the same as weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meetings end at the same time as the weekly roundup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
meeting in which alice is attending which starts at 1000 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings scheduled to be less than three hours or less than one hour	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
which meeting is scheduled on the earliest date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string date ) ) ) )	overnight-calendar
meetings held later than january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me meetings that take 3 hours and are with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
what person is attending weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
meeting starts before 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what meeting no later than that of weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
what meeting is longer than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
what meeting has a after jan 2 or 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
show me all meetings which begin after the weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
what is the start time for the weekly stand up meeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )	overnight-calendar
how long is the meeting	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
meetings that end after the weekly startup meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
meetings that are attended by alice and are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
who is at the weekly standup or annual review	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )	overnight-calendar
which meetings end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that end at 10am and start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meeting which is on jan 2 or jan 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )	overnight-calendar
show me the people attending the most meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
important meeting at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what meeting starts the earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
locations that do not house the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
show me important meetings that start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what is the length of weekly startup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )	overnight-calendar
show me all meeting that take place by jan 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
where is the weekly standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
show me all meetings lasting three hours beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me the dates of the weekly standup meetings	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )	overnight-calendar
meeting which ends at or after the end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
meetings that are not held at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )	overnight-calendar
what meeting has an end time no greater than the end of weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
meetings that start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that end before the weekly standup meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
meetings that end at the same as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
show me all meetings labeled as important that start at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )	overnight-calendar
show me all meetings ending later than the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
meeting that ends sooner than weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings happening before january 2nd or january 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
is the meeting at 10am or 3pm	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )	overnight-calendar
meeting which has minimum two attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )	overnight-calendar
show me the locations of all meetings beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
person who attends weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
meeting longer than one or three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
show me meetings at fewer than two locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string < ) ( number 2 ) ) )	overnight-calendar
select all important meetings	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )	overnight-calendar
what meeting starts before 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me all meetings that begin at the time the weekly standup meeting ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
what meeting has the same location as weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
what meetings have the same start time as the week startup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )	overnight-calendar
meetings held before january 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
show me all attendees of meetings beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
meetings on january 2 that end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings which begin at the same time or earlier than the weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
what meeting starts at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what meeting starts at least at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
how long is the weekly standup meeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )	overnight-calendar
what is the meeting that take place immediately before the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what is the location that more than two meetings will be held at	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me the locations of all meetings on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all attendees of meetings three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
show me meetings which do not conclude at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
meetings attended by people that attend the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )	overnight-calendar
what meetings take place on jan 2 in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
what meeting is the same length as that of weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )	overnight-calendar
what person is not attending the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
meetings at greenberg cafe that start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings held on the same day as or after the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
show me all meetings happening on the same day or before the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
show me all meetings attended by either alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-calendar
what meeting starts at least at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
find me a meeting shorter than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
what location is most meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
weekly startup attendee	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )	overnight-calendar
show me all meeting that begin at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me meetings that end before the weekly standup starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
meeting shares attendee with weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
show me meetings at 10am with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
meetings that do not end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
what meeting ends at 10am on january second	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
people that do not attend the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
meetings that are three hours or longer or an hour or longer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
meeting on january 2nd at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me meetings before jan 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
show me the meetings with the least number of different locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )	overnight-calendar
show me locations of all meetings which are marked as important	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
show me all meetings attended by people who have also attended the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )	overnight-calendar
people attending meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
show me who is attending three hour meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
what meeting has the least number of attendees	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )	overnight-calendar
show me all meetings marked important	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )	overnight-calendar
meetings attended by two or fewer people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )	overnight-calendar
what meeting had someone who went to weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )	overnight-calendar
show me who is not at the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
show me all meetings beginning and ending at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
important meetings attended by alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
meetings that start earlier than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting is being held at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
what three hour meeting has alice attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
show me the longest meetings	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-calendar
show me all locations which do not host the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
what is an important meeting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )	overnight-calendar
show me all meetings which begin at 10 am and end at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings scheduled to be three hours or one hour long	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )	overnight-calendar
three hour meeting at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
people attending meetings that alice attends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
show me the attendees for all meetings on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
show me everyone who attended meetings also attended by alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
who is the person attending the weekly stand up meeting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
what meeting has a length greater than weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
what person is an attendee of more than two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting before jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me any meetings alice has attended on january 2nd	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
what meeting has an end time earlier than weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me meetings that will end before weekly standup begins	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meetings on january 2 end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
what important meetings are attended by alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )	overnight-calendar
meetings that are the same length as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )	overnight-calendar
meeting ends after 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
meetings that start after the weekly standup meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting has the shortest time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
meeting that starts later than start of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings that have at most two locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )	overnight-calendar
what important meetings start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )	overnight-calendar
january 2nd meeting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
what meeting has an end time of at least 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
what meeting was shorter than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
what important meeting is located at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string is_important ) ) )	overnight-calendar
what meeting has an end time smaller than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all people who have attended more than two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meetings on or before january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
what location has more than two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meetings held in the most locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )	overnight-calendar
meetings at greenberg cafe that end a 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
three hour meeting with alice as attendee	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what meeting starts at the weekly standup average start time	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show meetings that start no earlier than the weekly startup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings alice is attending which are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me all meetings which end at the same time the weekly standup begins	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )	overnight-calendar
what meeting has a start time at the end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
locations of important meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
show me meetings starting at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what meeting starts before weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
locations that house at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me meetings not on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-calendar
meeting ends after end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me the location of all meetings attended by alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
show me all meetings on january 2nd which end at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all meetings at the greenberg cafe ending at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
three hours long important meeting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )	overnight-calendar
what meeting has alice attending and starts at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
important meetings that start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
how many meetings are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
weekly standup end time	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )	overnight-calendar
what location is the meeting who has alice attending	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
show me any meetings that alice has not attended	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )	overnight-calendar
how long does the average meeting last	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
show me all meetings on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
person is attendee of weekly standup or annual review	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )	overnight-calendar
meetings that are three hours or longer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
important meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )	overnight-calendar
show me all meetings on january 2nd ending at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that are shorter than three hours or shorter than one hour	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
meetings that end at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )	overnight-calendar
meeting does not start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
meetings starting later than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
show me all meetings at least three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
show me meetings happening after jan 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
what meeting has the smallest length	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-calendar
show me all meetings ending at 10am that alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
important meeting at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me all metings in greenberg cafe that end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
meetings that are shorter than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
show me all meetings marked as important	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )	overnight-calendar
show me all meetings on january 2nd beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings which has no more than two attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )	overnight-calendar
who will be attending important meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
meetings that end at the same time as or before the weekly standup meeting ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all attendees of meetings marked important	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
show me all meetings no longer than the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
what meeting starts when weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
show me all meetings between 10am and 3pm	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )	overnight-calendar
show me the meeting alice will attend which ends at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me all meetings beginning at 3 pm at latest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
which meeting has the earliest end time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
what important meeting started at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that end at or after 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
which location hosts the most meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings that start no earlier than when the weekly standup meeting ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings happening on or after the date of the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
show me all meetings that start later than 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
show me the meeting that starts at 10 am on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
is this meeting three hours long or an hour long	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )	overnight-calendar
show me all meetings alice has attended which begin at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
meeting held before the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
meetings ending at 10 am that are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings happening after the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
meeting ends no later than start time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me any meetings located at greenberg cafe or central office	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )	overnight-calendar
what meeting is one hour or longer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
three hour meeting that ends at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
meeting no longer than duration of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
show me all meetings with lengths that either less or more than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )	overnight-calendar
show me the meetings which end no later than the weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
when does the weekly standup meeting begin	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )	overnight-calendar
what meeting has an earlier date than jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all meetings beginning earlier than the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings that alice is not attending	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )	overnight-calendar
person who attends the meeting that ends at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
meetings attended by two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )	overnight-calendar
what person is an attendee of at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
what is the location of the meeting that alice is attending	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
show me all meetings in greenberg cafe or central office	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )	overnight-calendar
meeting whose start time is after end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show meetings that start at 10am in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
what meeting has the latest start time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
what meeting is located at greenberg cafe and alice will be attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
what is the shortest meeting	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-calendar
show me any meetings which end at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that are the same length or shorter than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
show me meetings that have the same location as weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )	overnight-calendar
show me all meetings three hours long which are marked as important	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )	overnight-calendar
what is the location that the most number of meetings will be held	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
what meeting has two locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )	overnight-calendar
show me meetings starting before 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me all meetings which end later than 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
who has attended the least number of meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings attended by people who have also attended the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
people that attend meetings at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )	overnight-calendar
meetings held before january 2 or january 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
two attendees are at the meeting	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )	overnight-calendar
show me any meetings that are either the weekly standup or annual review	( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )	overnight-calendar
what is the location of the meting with least number of attendees	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting occurs on later date than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
show all meetings that start ealier than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
important meetings that are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )	overnight-calendar
what location is the meeting that ends at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
meetings held at greenberg cafe or central office	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )	overnight-calendar
what meetings are the same day as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )	overnight-calendar
show me important meetings on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string is_important ) ) )	overnight-calendar
what is the location of the important meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
meetings that start at or before the time of the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
three or one hours	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )	overnight-calendar
what meeting has a later date than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
weekly standup duration	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )	overnight-calendar
what meeting is no greater than one to three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
show me all meetings happening on or after january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
location of at least two meetings is the location	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all 10am meetings that alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me all attendees of meetings at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )	overnight-calendar
which meetings have the same start time as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )	overnight-calendar
which meeting is attended by the most people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string attendee ) ) )	overnight-calendar
meetings that end before 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
show me all meetings that start earlier than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting has the later date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )	overnight-calendar
meetings held on or before the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
show me meetings before the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
meeting which has longest end time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
show me all meetings that end at the same time or earlier than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings which alice has attended that end at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
how many meetings are scheduled	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings that last longer than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
what meeting has an end time greater than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting ends at 10am in which alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me all meetings that start no later than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
what important meeting has a length of three hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )	overnight-calendar
what meeting starts earlier than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
what meetings date is earlier than jan 2 or 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
show me all meetings that start no earlier than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
show me all meetings that end after the weekly stand up meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what is the number of the meeting	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meetings with the latest end time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
locations of meetings attended by alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
three hour long meeting at greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
important meeting with alice as attendee	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
meeting of smallest duration	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
show me meetings on jan 2 with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
person that attends the fewest meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
january 2nd or 3rd	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )	overnight-calendar
show me the length of the weekly standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )	overnight-calendar
show me all meetings happening on or before january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all meetings marked as important happening at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
meeting which starts at 10 am at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meeting that starts at 10am or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
meetings that are three hours long or one hour long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) )	overnight-calendar
location where more than two meetings are held	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting with largest number of locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )	overnight-calendar
what meeting will take place no later than jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
where are the meetings ending at 10am going to be held	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
what meeting has a start time at 10am at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me meetings that share location with the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
what is the average length of a meeting	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
what time does the weekly standup meeting end	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )	overnight-calendar
what meeting is before weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
show me all meetings in greenber cafe that will run three hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
what meeting is on or before jan 2 or 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
which meeting has the fewest scheduled locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )	overnight-calendar
weekly standup start time	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )	overnight-calendar
meetings that are three hours long or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
meetings that are not three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )	overnight-calendar
what meeting has the length of most weekly startup meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
show me meetings that start before the weekly standup meeting ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
where is the weekly standup meeting located	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) )	overnight-calendar
schedule a meeting for 10am or 3pm	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )	overnight-calendar
show me all meetings that are either weekly standup or annual review	( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )	overnight-calendar
what meeting is not on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-calendar
meetings that start after 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
meetings attended by two or more people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )	overnight-calendar
is this meeting on january 2 or january 3	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )	overnight-calendar
meetings that start at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )	overnight-calendar
people that attend three hour long meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
which person is attending an important meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
show me the meetings which are latest in the month	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )	overnight-calendar
find me a meeting that is three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what person is attending weekly standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
meetings with the earliest start time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
what is the location of weekly startup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
how long is this meeting	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
show me all meetings beginning no later than 10 am or 3 pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what important meeting is alice attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )	overnight-calendar
show me all meetings not happening at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )	overnight-calendar
who attends the most meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
what meeting was shorter or longer than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )	overnight-calendar
show me all three hour meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings beginning at 10 am and all meetings ending at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what important meetings are scheduled for jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me meetings on jan 2 in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
meetings that do not start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
who attends weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
duration of meeting	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
show me all meetings beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me important meetings with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me the meetings that start later than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings scheduled to run for 3 hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
what meetings have the same date as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )	overnight-calendar
what is the length of the meeting	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
what person is attending the meeting at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )	overnight-calendar
show me all meetings happening on days before the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
who is attending weekly standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )	overnight-calendar
show me all meetings on january 2nd which are also 3 hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all meetings scheduled for three hourse	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
people that attend more than two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
what meeting has a start time earlier than the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting ending at 10am is alice attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
start time of the meeting is after the start time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
meeting on jan 2nd with alice as attendee	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all meetings starting at or before 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
show me all meetings marked important which end at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )	overnight-calendar
meetings on january 2 that are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
what is the number of the location	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ) )	overnight-calendar
what meeting has the same length as weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
show me meetings not at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )	overnight-calendar
important meeting alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )	overnight-calendar
three hour meeting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
show me meetings starting before 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
important meetings at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me any meetings on january 2 beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
who is attending the meeting on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
what time does the weekly standup meeting start	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )	overnight-calendar
meetings held on or after january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all meetings happening at the same location as the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
show me all meetings which begin earlier than 10 am or 3 pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what meeting ends at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me the people who attend the most meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting which is on the date of first weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )	overnight-calendar
what is the number of the person	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-calendar
who is attending the greenberg cafe for the meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )	overnight-calendar
meeting starts at 700 am and ends at 000 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what meeting has a start time no later than 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
who is attending the 10 am meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
show me meetings before january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all metings that take place jan 2 or jan 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )	overnight-calendar
show me all meetings that share an attendee with the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
show me all meetings that start at 10am on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all meetings which end earlier than the weekly standup begins	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting is alice attending at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings with the latest start time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
show me any meetings which alice has attended and take place at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me all meetings that end at 10am and start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what meeting has a date of jan 2 and has alice attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me meetings at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
what meeting has the most amount of locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )	overnight-calendar
meeting at location of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )	overnight-calendar
meeting that starts and ends at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me the meetings with the latest end times	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
what meeting ends earlier than 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me meetings that end before the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
what meeting has the longest time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
meetings that are attended by people that also attend the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
what important meeting has alice attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
which meetings are held at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me all meetings which happened at the same location as the least number of meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting ends at least at start time of weekly roundup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings on the same day as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )	overnight-calendar
what meeting ended after 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
which meetings are significant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )	overnight-calendar
show me all meetings happening later than 10 am or 3 pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me all people attending either the weekly standup meeting or annual review	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )	overnight-calendar
show me meetings at greenberg cafe on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me the locations which have the most number of meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting starts later than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
which meeting is scheduled on the latest date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )	overnight-calendar
meetings that are three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
show me all meetings three hours long happening at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what location is not the same as weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
meeting which starts at 10 am on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings on january 2 that alice attends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
what meeting has a location at greenberg cafe and starts at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
which meetings are scheduled to end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me meetings that start and end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what is the location of the jan 2 meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
what meeting starts at 10am on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
important meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )	overnight-calendar
meetings that start after 10am or after 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
meetings that end later than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
people attending meetings that start at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
meeting which starts at 1000 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what is the average length of all the meetings	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )	overnight-calendar
what meeting has two attendees or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )	overnight-calendar
show me all meetings shorter than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
what meeting ends at the start or after the start of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what person attended weekly standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )	overnight-calendar
what meeting has an end time of 10am on jan2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
meetings that are not on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-calendar
meetings that are three hours long and end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what meeting ends no later than 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
meetings that are three hours long that start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
meeting at greenberg cafe which ends at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
what meeting is at least three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
where is the important meeting being held	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
what meeting start time is at the end of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
which meetings will take as much time as weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
meeting which starts before the start time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings that alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
meeting is at least 3 hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
meeting starts no later than start time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
meetings attended by the smallest number of people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )	overnight-calendar
location is same as the location of three hours long meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
meetings held before january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all attendees of meetings ending at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
show me meetings that start before the weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
what meeting is on jan 2 at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
person who attends important meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
show me all meetings which begin at the same time the weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
what meeting is not three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )	overnight-calendar
person attending the most meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting that ends at end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
where will weekly standup and annual review take place	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )	overnight-calendar
show me three hour meetings on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
meetings that start at or before 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
what meeting is at greenberg cafe and alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
what meeting ends ealiest in the day	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
location different from location of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
show me all meetings ending before 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
meetings held in two or fewer locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )	overnight-calendar
what meetings are imporant and start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string is_important ) ) )	overnight-calendar
meetings that are three hours or less or one hour or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
locations that house meetings on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
show me all meetings starting earlier than 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
meetings that end at the same time as or later than the start of the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
which meetings in greenberg cafe will last three hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
location is greenberg cafe or central office	( call SW.listValue ( call SW.concat en.location.greenberg_cafe en.location.central_office ) )	overnight-calendar
people that attend at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
places that house at least one meeting	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meeting which starts at 1000 am at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
meeting at a single location	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string < ) ( number 2 ) ) )	overnight-calendar
meetings that end at or before 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
show me all meetings located at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
meetings that end at the time when the weekly standup meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )	overnight-calendar
what meetings run for the shortest length of time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-calendar
she me all meetings with a duration between 1 and 3 hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
what meeting has fan end time after 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me all meetings three hours long which end at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
locations of meetings that are three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
what person attends most meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meetings that end before 10 am or before 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me all important meetings that alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )	overnight-calendar
what location is weekly standup and annual review	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )	overnight-calendar
person attending same meeting as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
who is attending the meeting that ends at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
show me all meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meeting that does not end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings ending at the same time or later than the weekly standup meeting ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings which end later than the weekly standup begins	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
meeting that starts no later than end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
what meeting ends 10am or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what is the most recent meeting	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string date ) ) ) )	overnight-calendar
what meeting has a date after jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
show me where the weekly standup and annual review is happening	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )	overnight-calendar
person attending three hour meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
what meeting has a date of jan 2 at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
which meetings will be longer than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
show me all meetings on january 2nd at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
shortest meeting	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-calendar
meetings held in the same place as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
what meeting did alice attend at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
what meeting has a location at greeberg cafe on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me the meetings which have lasted the longest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-calendar
show me all meetings that end by 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
what meetings have the same duration as the weekly stand up meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )	overnight-calendar
meeting share attendee with weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) ) )	overnight-calendar
weekly standup date	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )	overnight-calendar
what meetings are scheduled to run for 3 hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
show me all meetings at least one hour or three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
what three hour meeting is on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what location does not hold the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
meeting that starts at 10am and ends at 1pm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
how many attendees are there for this meeting	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-calendar
what is the meeting that starts at 10 am in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that end at or after 10 am or at or after 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what meeting is at the same location as weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )	overnight-calendar
meeting which has shortest start time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )	overnight-calendar
what meeting is on jan 2 or 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )	overnight-calendar
meetings that end earlier than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings ending at 10 am or 3 pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )	overnight-calendar
show me all of the people who did not attend the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
meetings that are the same length as or longer than the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
show me all meetings which are exactly one hour or exactly three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) )	overnight-calendar
what is the location of the important meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ) )	overnight-calendar
which meetings end later in the day than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings which end at the same time as the weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )	overnight-calendar
what location are the fewest meetings held	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings happening after january 2nd or january 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
meetings that end later than 10am or later than 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
meetings that start before the weekly standup meeting ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
show me all meetings with two attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )	overnight-calendar
which meetings are important	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )	overnight-calendar
who is attending weekly standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string attendee ) ) )	overnight-calendar
show me meetings ending at 10am in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )	overnight-calendar
show me all important meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
location is same as location of meeting ends at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
meetings attended by alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-calendar
show me meetings for jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me the meeting which has happened at the most locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )	overnight-calendar
show me meeting locations with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
show me all three hour meetings that are important	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string is_important ) ) )	overnight-calendar
meeting with least attendees	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )	overnight-calendar
show me all meetings attended by alice which are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what person is attending the meeting that starts at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
what three hour meeting starts at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
when is weekly standup or annual review	( call SW.listValue ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) )	overnight-calendar
who is attending the same meeting as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )	overnight-calendar
show me important meetings	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )	overnight-calendar
meeting ends no later than 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me meetings with the most locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )	overnight-calendar
meeting that has maximum 2 attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string <= ) ( number 2 ) ) )	overnight-calendar
person attending at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
what important meeting has a length of three hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
show me all meetings that start at 10am and last three hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
where is my jan 2 meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-calendar
meeting starts at 10am or 3pm at the earliest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
what time does the weekly standup meeting end	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )	overnight-calendar
jan 2nd meeting with alice as attendee	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
who has attended the least meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string attendee ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings that start no earlier than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )	overnight-calendar
what is the location of the meeting that will have two or more attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings on january 2nd happening at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
meeting held in the fewest number of locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )	overnight-calendar
meeting in greenberg cafe or central office	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )	overnight-calendar
meeting featuring alice as attendee starting at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me any meetings scheduled to be longer than one hour or three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )	overnight-calendar
show me any meetings that alice or bob have attended	( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )	overnight-calendar
what meeting is as long or longer than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
meeting with largest number of attendees	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string attendee ) ) )	overnight-calendar
what meeting has the same date as weekly startup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )	overnight-calendar
meeting later than january 2nd or 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
meeting that ends at start time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )	overnight-calendar
show me all meetings that end at 10am on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
what meeting did alice not attend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string ! = ) en.person.alice ) )	overnight-calendar
what meeting is not located at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string ! = ) en.location.greenberg_cafe ) )	overnight-calendar
show me all meetings beginning later than the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting does not start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )	overnight-calendar
important meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )	overnight-calendar
show all meetings that end at 10am on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
meetings that start later than or at the same time as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
show me all meetings ending at 10 am which are scheduled to be three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
meeting starts before weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
what meeting has a date no later than jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
which meeting is the shortest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )	overnight-calendar
where is the threehour long meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
show me meetings starting later than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )	overnight-calendar
show me all meetings the same length of the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) )	overnight-calendar
show me meeting which end before weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )	overnight-calendar
meetings attended by alice that start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
what meetings end at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )	overnight-calendar
show me all locations that are used for more than two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings alice has attended which have ended at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )	overnight-calendar
show me all meetings less than three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )	overnight-calendar
show the meeting on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all 3 hour meetings with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )	overnight-calendar
show me all meetings starting at the same time as the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )	overnight-calendar
show me all meetings the same length or longer than the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) ) ) )	overnight-calendar
show me the locations of all meetings three hours in length	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )	overnight-calendar
who are the attendees for fo the meetings in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )	overnight-calendar
show me all meetings with two or more people attending	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )	overnight-calendar
what meeting starts earlier than the end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
meetings that end the earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )	overnight-calendar
show me all meetings alice attended on january 2nd	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
meetings on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-calendar
which people will attend two or more meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show meetings that end at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )	overnight-calendar
show me all meetings happening on january 2nd or january 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )	overnight-calendar
show me all meetings beginning on or after january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )	overnight-calendar
meeting whose location is same as the  location of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )	overnight-calendar
show me the meetings scheduled earliest in the month	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string date ) ) ) )	overnight-calendar
who is not an attendee of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string ! = ) en.meeting.weekly_standup ) )	overnight-calendar
what meeting is on jan 2 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-calendar
what location is the meeting that starts at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
locations of the weekly standup meeting or annual review meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )	overnight-calendar
meetings attended by alice that are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
what are the areas where two or more meetings take place	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
show me all meetings that fall before or after jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all meetings at the same location as the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )	overnight-calendar
show me meetings that last three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )	overnight-calendar
show me meeting locations that start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )	overnight-calendar
show me locations with the fewest meetings	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string location ) ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
how many people attended meetings	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-calendar
show me meetings with alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-calendar
show me all meetings happening on days other than january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-calendar
show me all people who have attended at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )	overnight-calendar
meetings that end at or after the weekly standup meeting ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )	overnight-calendar
housing that is bigger than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
show me housing that is the same type as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
which housing unit has a  minimum  rent of 1500 dollars per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
housing posted before or on the same day as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
neighborhood with the fewest amount of housing units	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
find housing units with rental charges lesser than 2000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
which housing unit has more than two kinds of houses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
how much is 123 sesame street per month	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )	overnight-housing
find the largest housing unit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
what housing is priced at 1500 or 2000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
housing with a master bedroom and private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )	overnight-housing
housing unit with a private bath and 1500 dollar rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
which housing unit permits cats and had a private bath in it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )	overnight-housing
find a housing unit posted on january 2 and that allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )	overnight-housing
units with larger rent than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
what housing unit is priced at 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
find housing units with private room near midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )	overnight-housing
housing with private bath that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )	overnight-housing
which housing unit resembles 123 sesame street in size	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )	overnight-housing
apartments with a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
housing that is 800 square feet with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what housing units in the midtown east area also allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
apartment type housing unit that has private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
what kind of housing is 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )	overnight-housing
which housing unit has a lesser monthly rent than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
find a housing unit posted on january 2 with the same rent price as 123 sesame st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
apartment with a private room that rents for 1500 a month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )	overnight-housing
housing the same size as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
800 square feet housing unit with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )	overnight-housing
housing units that have a private room that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
which housing unit has houses of apartment kind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing that has at least two types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )	overnight-housing
find housing units that are same as or lesser than the size of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
which housing unit has the highest rent per month	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )	overnight-housing
housing that was posted on january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
what is the 123 sesame street housing type	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )	overnight-housing
which housing unit offers a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )	overnight-housing
housing that is 800 square feet with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )	overnight-housing
neighborhood with the most housing units	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing type of more than two available housings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing unit that both have a private room and allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_dogs ) ) )	overnight-housing
area around 123sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )	overnight-housing
which housing unit has a monthly rent of less than 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
show me housing where dogs are allowed	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )	overnight-housing
housing of two types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
apartments with rent between 1500 and 2000	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
apartments with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )	overnight-housing
housing units with 2 neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-housing
what apartment costs 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
apartments with the same rent as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
which housing units permit dogs and cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )	overnight-housing
housing that is at least as expensive as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
private room in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )	overnight-housing
housing units outsizing 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
apartments in the midtown west or chelsea neighborhoods	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )	overnight-housing
housing types like 123 sesame street or 900 mission avenue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )	overnight-housing
housing that ranges between 800 and 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
what housing units are the same size as those in 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
find housing units that is not an apartment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )	overnight-housing
which area has a minimum of two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing near 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )	overnight-housing
what housing unit contains a private room and allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )	overnight-housing
find housing units posted before january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
find housings unit posted on other dates except for january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-housing
find housing units that are pet friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )	overnight-housing
housing found in the most neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )	overnight-housing
apartments renting for 1500 a month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
which neighborhoods have housing with a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
housing that was posted on february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
housing unit that is 800 or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )	overnight-housing
housing with fewer than two units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
specify the housing type of the housing unit that has a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
housing posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
units larger than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
what is the type of housing that has a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
housing units that have more than two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )	overnight-housing
which housing unit has an area of 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
show me housing which posted on or before the day 123 sesame street did	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
apartments with a rent below 1500 a month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )	overnight-housing
which housing unit around midtown west has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
what is the housing type number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )	overnight-housing
which housing unit has  the variety of houses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )	overnight-housing
housing that is not the same kind as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )	overnight-housing
name the neighborhood of the housing unit with private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
which area has the most number of housing units	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )	overnight-housing
housing kind of 123 sesame street that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
apartment with a private bathroom for rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )	overnight-housing
housing in midtown west that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing that is more than 1500month or more than 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
housing units posted after january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
neighborhood of 123 sesame street or 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )	overnight-housing
what housing unit with a private bath was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )	overnight-housing
a housing unit on 123 sesame street that posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing that posted on the same day at 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
housing that is 1500month with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
apartments that allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string allows_dogs ) ) )	overnight-housing
apartment with private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
what neighborhood was the housing unit posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
looking for housing that is either an apartment or condo	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )	overnight-housing
seeking houses in quiet neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )	overnight-housing
what housing costs 1500 dollars and is 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
how big is the housing unit	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )	overnight-housing
800 square foot unit with rent of 1500 monthly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing units in midtown west that allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )	overnight-housing
neighborhoods with housing that is 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )	overnight-housing
housing that has more than two neighborhood	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )	overnight-housing
find housing larger than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
what neighborhood has the least amount of housing	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which housing unit in the midtown west area has a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
what housing unit has the same rent as the unit posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
find apartments with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )	overnight-housing
apartments in midtown west with rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
which housing type allows pets	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )	overnight-housing
cheapest housing	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )	overnight-housing
find housing units with 1500 dollars to 2000 as rent	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
find all detached housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
find housing units posted before 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
housing that is 800 square feet or bigger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
housing unit in midtown west that has monthly rent of 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
which housing unit is available for a price of less than 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )	overnight-housing
apartments with rent between 1500 to 2000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
housing unit with the largest posting date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
which housing unit has a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )	overnight-housing
housing in the neighborhood of 123 sesame street or 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )	overnight-housing
housing in midtown west that posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
what housing unit posted was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what kinds of housing has a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
which neighborhood is 123 sesame street in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
find housing that allows cats	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )	overnight-housing
which housing unit has the most kind of houses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing that allows cats and includes a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )	overnight-housing
looking for apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )	overnight-housing
name neighborhoods with two or more housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which housing unit with an area of 800 square feet has a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
which housing unit resembles that of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )	overnight-housing
find housing units with size greater than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
which housing posted on a date other than january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-housing
what neighborhoods have units with 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )	overnight-housing
what housing unit has two or more neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )	overnight-housing
what kind of housing type is the only of its kind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
what kind of housing offers 800 square feet and allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )	overnight-housing
apartment in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing 800 sq in size posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing types in the midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
where are 800 square fee housing units that allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )	overnight-housing
what housing unit was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
apartment for rent at 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
what kind of housing is available for 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )	overnight-housing
housing unit that allows cats with midtown west as neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing posted after 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
housing with a private room and bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )	overnight-housing
what is the most numerous housing type	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )	overnight-housing
find all 800 square foot units with private baths	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing found in two or less neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )	overnight-housing
housing apartment with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
what kind of housing is 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
find housing units of the type apartment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )	overnight-housing
housing unit that is cheaper than 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
housing that is at least 1500month or at least 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
exclude apartments that are in the same neighborhood as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing unit with a private room and allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )	overnight-housing
rent less than 15002000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
apartments that allow dogs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )	overnight-housing
catfriendly housing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )	overnight-housing
apartments with rent that is more expensive than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
what day did 123 sesame street become available	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )	overnight-housing
what are the  units that  do  not belong to the area around midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-housing
what housing unit posted on jan 2 is in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing type with less than 2 units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing that is the same type as 123 sesame street that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing unit that allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )	overnight-housing
pet friendly housing near midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )	overnight-housing
housing apartments in a midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing posted before january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
find cat friendly housing units with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )	overnight-housing
what neighborhood has housing with a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
quiet apartments	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-housing
a housing unit in midtown west that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
housing unit that allows dogs and cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )	overnight-housing
housing that is the same rent as or cheaper than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
what housing unit posted on jan 2 is the same kind as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
aparartment or condo units	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )	overnight-housing
housing units with a  orivate bath in the midtown west area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )	overnight-housing
housing with a private room that posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
what neighborhood is the 800 square foot apartment in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )	overnight-housing
800 square foot apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
housing that is not 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )	overnight-housing
apartment that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing units near two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-housing
a housing unit that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
what is the house number of the apartment	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
what housing unit was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
what is the housing type of the housing unit that allows dogs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )	overnight-housing
unit smaller than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
housing that is not 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )	overnight-housing
housing typical of 123 sesame street housing posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what housing unit is in the same neighborhood as the unit posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
which housing unit permits dogs and has the facility of a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )	overnight-housing
which housing offers less than two kinds of units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )	overnight-housing
housing units with less than two nieghborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-housing
neighborhood that has at least 2 apartments	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
show me housing with 800 square feet of space where cats are acceptable	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what is the phone number of this apartment complex	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )	overnight-housing
800 square foot housing unit with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )	overnight-housing
find housing units with maximum size 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
housing like 123 sesame street that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
rent between 1500 and 2000 dollars	( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )	overnight-housing
find housing that is an apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing posted on or before january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
what housing unit is in the same neighborhood as 123 sesame st and was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing unit in west midtown posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
a housing unit posted on january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )	overnight-housing
housing that is 800 square feet and 1500month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
what type of housing is 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what housing has the cheapest rent	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )	overnight-housing
housing type on 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )	overnight-housing
apartment with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )	overnight-housing
800 square foot apartment with private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )	overnight-housing
apartment with a private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )	overnight-housing
apartment with a master bathroom	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )	overnight-housing
housing that allows dogs and was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
which neighborhoods have dogfriendly housing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )	overnight-housing
find housing units with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )	overnight-housing
what housing is a two unit type	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
find housing similar to the house located at 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )	overnight-housing
housing types of the most units	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
what housing unit is the same size as the unit posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
which housing in midtown west has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
which area has more than two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing that was posted january 2 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
what neighborhood is the housing unit in that was posted january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
housing unit near midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
catfriendly apartments with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )	overnight-housing
housing unit with size of either 800 or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )	overnight-housing
list all housing that is smaller than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
housing that was posted after january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
what kind of housing are the two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
how much a month is the rent at 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )	overnight-housing
which housing is no larger than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
apartments with a private bathroom	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
looking for housing that isnt an apartment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )	overnight-housing
rarest housing type	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing found in less than two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-housing
apartment with a master bedroom and private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )	overnight-housing
which housing unit has a rent of 1500 dollars or 2000 dollars per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
what midtown west housing allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
what housing unit posted on jan 2 is the same size as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
neighborhoods that have 800 square foot housing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )	overnight-housing
looking for a quiet neighborhood	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing units of either 800 square feet or 1000 square feet	( call SW.listValue ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) )	overnight-housing
housing with 2 surrounding neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )	overnight-housing
find apartments posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
which neighborhoods have housing where dogs are allowed	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )	overnight-housing
apartments posted before 123 sesame street was posted	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
pet friendly 800 square feet housing unit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )	overnight-housing
housing that is 800 square feet or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
housing unit in midtown west and allows dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )	overnight-housing
which housing unit with an area of 800 square feet is available fora rent of 1500 dollars per month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
catfriendly apartments with rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )	overnight-housing
housing posted on january 2nd that allows dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
looking for apartments	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
what size is the housing unit posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
housing apartments with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )	overnight-housing
which housing has a monthly rent of 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
find housing units in the same size of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )	overnight-housing
housing that allows dogs and was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )	overnight-housing
housing unit for rent posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
find housing units posted before or on the same date as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
what is the average find 800 square feet housing units that allow cats	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )	overnight-housing
housing that rents for at least 1500 per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
apartments posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
find me a housing unti that chagres 1500 for rent and has a priiiiiiat bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )	overnight-housing
which 1500monthly rentals are 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
which housing unit permits cats inside it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )	overnight-housing
a neighborhood with fewer than twohouse units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing with no more than two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
how many neighborhoods	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )	overnight-housing
how large is the unit at 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )	overnight-housing
apartments for rent below 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
dogfriendly housing	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )	overnight-housing
which housing unit is more expensive than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
housing units that are at least the same square footage as the housing unit on 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
what is the kind of housing available in 123 sesamre street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what housing unit allowing cats was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )	overnight-housing
housing unit with 2 types of housing	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )	overnight-housing
locate housing units with private roombath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )	overnight-housing
smallest available unit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
housing apartments that allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
units posted before january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
what housing with a private room posted jan 2nd	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )	overnight-housing
a neighborhood with at most twohouse units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which kind of housing is available for a rent of 1500 dollars per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )	overnight-housing
housing unit with posting date less than that of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
what is the average rent per month of a housing unit	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )	overnight-housing
housing that is cheaper than 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
apartment complexes with the most units	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )	overnight-housing
housing that was posted after january 2 or after february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
housing with more square footage than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
housing that is less than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
housing units with one housing type	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )	overnight-housing
a twohousing unit	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( number 2 ) ) )	overnight-housing
housing that is 800 square feet and includes a private bah	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what housing using posted on jan 2 has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
find all housing units posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
find housing units far from midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-housing
800 foot apartment with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing that is at least 800 square feet or at least 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
housing unit that is an aprtment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
find housing units in the same housing type of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )	overnight-housing
find housing units with a private room and has 1500 dollars as monthly rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
find housing units with size lesser than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
apartments with a cheaper rent than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
which housing unit is bigger  in area by 800 square feet or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
find housing for less than 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
800 square foot apartment with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )	overnight-housing
apartments that are smaller than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
which is the neighborhood shared by most nuumber of housing units	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing with the same rent as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )	overnight-housing
an apartment that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
which housing unit permits cats in it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )	overnight-housing
neighborhoods with housing that has a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
housing unit with same housing type as that of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )	overnight-housing
which housing unit has the smallest size	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
what kind of housing is in 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )	overnight-housing
housing unit posted on january 2 and that is the same size as 123 sesame st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
which housing unit belongs to the apartment kind with the facility of a private troom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing in a neighborhood larger than two houses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing that is over 800 square feet or over 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
housing that is not an apartment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )	overnight-housing
what are the rare housing types	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
name housing types that has more than one housing unit of that type	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing unit with a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) )	overnight-housing
find a housing unit posted on january 2 and that has a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )	overnight-housing
seeking apartment or condo	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )	overnight-housing
which 1500monthly rentals are dogfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
housing not in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-housing
which housing unit in the area permits cats	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )	overnight-housing
housing with private room that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
what is the mostused housing type	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which housing unit is bigger by area	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
what housing unit allowing dogs was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )	overnight-housing
what is the housing type of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
dogfriendly housing that is 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )	overnight-housing
find 800 square feet housing units that are cat friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what is the neighborhood of housing unit of the apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )	overnight-housing
which housing consists of two units maximum	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
what is that housing unit size	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )	overnight-housing
find 800 square feet sized housing units	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
which housing posted jan 2nd at 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
find an apartment that is 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what is the rent of 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )	overnight-housing
midtown west unit with 1500 rent monthly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
catfriendly apartments with a private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )	overnight-housing
list all housing us that are at least 800 or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
show only neighborhood units of 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )	overnight-housing
where are the most number of housing units found	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
find housing units in the neighborhoods of midtown west with 1500 dollars as monthly rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
what neighborhood has the most apartment complexes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
catfriendly housing with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )	overnight-housing
neighborhoods with housing units with private rooms	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
housing unit within at most 2 neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )	overnight-housing
which housing unit is available in the area around mid town west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
when was 123 sesame street posted	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )	overnight-housing
what housing unit has two or more housing types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string > ) ( number 2 ) ) )	overnight-housing
show me housing in midtown west or chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )	overnight-housing
what kind of housing is 123 sesame street or 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )	overnight-housing
find 800 square feet sized housing in the neighborhoods of midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
which housing unit has apartment kind of house with an area of 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
which housing unit is posted on or before jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
condominium or apartment housing	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )	overnight-housing
show me places with a private room where cats are welcome	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_room ) ) )	overnight-housing
housing in the neighborhood of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )	overnight-housing
how many housing units are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which housing unit is posted before  the posting date of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
housing unit posted january 2 and the same rent as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
building with two or less kinds of unis	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )	overnight-housing
unit of average size	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )	overnight-housing
what neighborhood is 123 sesame street in	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )	overnight-housing
apartments that are dog friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )	overnight-housing
which housing unit has the least variety of houses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )	overnight-housing
housing units that allow cats and charge 1500 rent monthly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )	overnight-housing
apartment for rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
which types of housing have a private bathroom	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
dogfriendly 800 square foot apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )	overnight-housing
housing in midtown west with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
name housing types other than 123 sesame street type	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing unit at most 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
a housing unit posted on january 2 in any neighborhood	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
which midtown west housing have 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
which housing posted no earlier than jan 2nd or feb 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
housing unit smaller than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
which housing posted jan 2nd permits dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
800 square foot apartment in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
dogfriendly apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
show me housing which have a private bathroom and allow cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )	overnight-housing
housing that is smaller than 800 square feet or smaller than 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
housing that is more than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )	overnight-housing
apartments with private baths	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )	overnight-housing
which housing unit resembles 123 sesame street or 900 mission ave	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )	overnight-housing
what is the housing type of the housing unit with a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
which housing unit with an area of 800 square feet has the facility of a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )	overnight-housing
neighborhoods medtown west or chelsea	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )	overnight-housing
housing posted on january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )	overnight-housing
housing unit with a posting date bigger than the date of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
800 square foot apartment that allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )	overnight-housing
what housing unit with a private room was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )	overnight-housing
what housing unit has two housing types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( number 2 ) ) )	overnight-housing
what housing unit is found in the midtown east neighborhood	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
find housing units posted after 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
show me apartments and condos	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )	overnight-housing
a housing unit with a private bath that posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
pet friendly housing with 1500 dollars as rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
what housing is the same type as the housing posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
want a housing type like 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what is the rent of 123 sesame street per month	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )	overnight-housing
which housing posted jan 2nd permits cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
apartments in midtown west with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
what is the neighborhood of the  housing unit with a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
find housing with rental charges between 1500 and 2000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )	overnight-housing
units that have a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_room ) ) )	overnight-housing
housing posted before 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
housing allowing cats that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_cats ) ) )	overnight-housing
housing posted january 2nd that includes a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_room ) ) )	overnight-housing
unit larger than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
show me housing available for 1500 dollars a month or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
housing unit with the smallest posting date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
find housing units with posting date between january 2nd and february 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
which housing unit posted jan 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
unit with one housing type	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )	overnight-housing
find housing units that are posted on the date same as 123 sesame street or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
housing that was posted on january 2 of 123 sesame street kind	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string posting_date ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what is the monthly rent at 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )	overnight-housing
what is the square footage of 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )	overnight-housing
apartments with rent above 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
housing that is 1500month or 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )	overnight-housing
what are housing types found in the neighborhoods of midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
apartment between 800 and 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
find a housing that is no more than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
a housing unit that includes more than two housing types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string > ) ( number 2 ) ) )	overnight-housing
housing units with a small amount of housing	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )	overnight-housing
which housing unit has a maximum of two housing types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )	overnight-housing
what housing unit posted on jan 2 has a monthly rent of 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
housing unit with a posting date at the latest january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
looking for a unit with a private bathroom and dog friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )	overnight-housing
apartment with a private room for rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
which is the housing unit that permits dogs inside it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )	overnight-housing
find housing unit with the latest posting date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
housing unit bigger than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
housing that has at least two neighborhood	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )	overnight-housing
housing unit with a private room in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )	overnight-housing
housing unit that allows dogs and has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )	overnight-housing
private housing in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
apartments with a private bathroom in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing of 800 square feet posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
what housing unit posted on jan 2s rent is 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
find housing with a private room and bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )	overnight-housing
find housing units with monthly not equal to 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )	overnight-housing
what kind of housing is in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
housing posted the same day as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )	overnight-housing
which neighborhoods have more than two places available	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing posted the same day or after 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )	overnight-housing
find housing units with 1500 dollars as rent and is near midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
what housing has a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) )	overnight-housing
what kinds of housing allow cats	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )	overnight-housing
what housing unit is in two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-housing
housing units with a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )	overnight-housing
find housing unit with posting date between january 2nd or february 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
which housing posted on the same date as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )	overnight-housing
what is the neighborhood  of the housing unit with the monthly rent 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )	overnight-housing
which housing unit was posted january 2 that is the same housing type as 123 sesame st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
which housing unit has two types minimum	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )	overnight-housing
what is the housing type of the two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
apartment that is the same size are 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
dogfriendly apartment with a private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )	overnight-housing
apartments in the midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
find housing units with just one neighborhood	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-housing
housing that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
show me housing in midtown west where dogs are welcome	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_dogs ) ) )	overnight-housing
how many different housing types are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )	overnight-housing
housing that does not have a higher rent then 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
housing posted the most recently	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
which housing unit has an apartment kind of house	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )	overnight-housing
what is the date of the 123 sesame street posting	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )	overnight-housing
seeking apartments between 1500 and 2000	( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )	overnight-housing
find housing between 800 and 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )	overnight-housing
which housing unit is in the area of midtown west or chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )	overnight-housing
housing unit with a private room and bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )	overnight-housing
unit of 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )	overnight-housing
what neighborhood is the housing unit in that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
catfriendly apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
find housing units with rental charges greater than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
which housing unit is posted on the posting date of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )	overnight-housing
which housing unit has apartment kind of houses with an area of 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what kind of housing was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
800 square foot apartment for 1500 rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
which housing with a private room rents for 1500 dollar monthly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
show me housing units that arent apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )	overnight-housing
housing unit which is an apartment that is dogs friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
apartments that have a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_bath ) ) )	overnight-housing
housing in 123 sesame street neighborhood that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
find housing units with unique housing types	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )	overnight-housing
find pet friendly housing units that charge 1500 dollars as rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_dogs ) ) )	overnight-housing
apartment housing that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
which housing unit has a monthly rent of more than 1000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
what is the most common housing type	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
housing units that are apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
cats allowed in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )	overnight-housing
neighborhoods not near 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )	overnight-housing
which housing unit has a jan 2nd posting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
find housing units with size lesser than that of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
what are the housing units in the area around midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
apartments with rent below 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
which housing unit is in the area of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ) )	overnight-housing
apartment similar to the apartment in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
housing that is 1500month or less or 2000month or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
what is the other areas around midtown west that has housing units	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
what 800 square housing allows dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
find 800 square feet housing units in the neighborhoods of midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing with posting dates before january 2nd and february 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
which housing unit has the monthly rent of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )	overnight-housing
what is the biggest housing unit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
what housing units allows dogs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )	overnight-housing
neighborhood where i can find housing with a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
housing that is the same size or bigger than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
800 square foot apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing not posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-housing
housing units that are 800 square feet and have private baths	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )	overnight-housing
housing that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
neighborhoods that have more than two units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which housing unit does not belong to the apartment type with a monthly rent of 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
which housing unit has 1500 dollars as monthly rent and also has the facility of a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )	overnight-housing
which housing unit with a rent of 1500 dollars per month has a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
find 800 square feet sized housing units with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what is the average size of an apartment	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )	overnight-housing
which housing units in the neighbourhood permits dogs inside it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )	overnight-housing
what housing unit is the same type as the unit posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
what is the area of 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )	overnight-housing
compare 123 sesame street and 900 mission avenue	( call SW.listValue ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) )	overnight-housing
cats permitted in unit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )	overnight-housing
find all units available midtown east	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
show me housing whose rent is 1500 dollars and which provides a private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
find the housing unit with the most monthly rent	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )	overnight-housing
housing unit with the same monthly rent as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )	overnight-housing
housing costing more than 1500 dollars per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
housing listed in the fewest neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-housing
apartments in midtown west with a rent of 1500 a month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
what is the monthly rent of this apartment	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )	overnight-housing
housing in more than two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )	overnight-housing
show me housing with 800 square feet of space	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing posted on january 2 around 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing unit with a post date earlier than january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
which housing unit with an area of 800 square permits dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )	overnight-housing
housing that allows dogs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )	overnight-housing
800 square feet in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
neighborhoods of housing units that allows cats	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )	overnight-housing
cheapest places to rent	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )	overnight-housing
which housing unit is posted before jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
housing units that allow cats in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )	overnight-housing
which housing unit in this neighbourhood has the facility of a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
what is the housing type at 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
show me the housing with the most space available	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
find cat friendly housing units with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )	overnight-housing
what midtown west housing unit has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )	overnight-housing
find housing units around the neighborhoods of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )	overnight-housing
how  many neighbourhoods are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )	overnight-housing
what housing unit posted on jan 2 has the same rent as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
which housing unit is in midtown west and was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
find housing units around 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing posted on or before january 2 or on or before february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
housing unit which is an apartment housing type with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )	overnight-housing
pet friendly housing unit	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )	overnight-housing
what kind of housing has two housing types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )	overnight-housing
all housing units posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
housing unit with a private bath and cost 1500 dollars rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
housing type posted january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
find housing types other than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what housing unit  posted on jan 2 has a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
apartments with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )	overnight-housing
which apartment kind of housing units permits cats in it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
find housing units with private bath located in the neighborhoods of midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing that is 1500month or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
housing in midtown west neighborhood posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
apartments with at least 2 units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which housing posted after jan 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
housing that is beetween 800 and 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
apartment with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )	overnight-housing
apartments similar in size to 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )	overnight-housing
housing unit that costs 1500 dollars rent and allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )	overnight-housing
dog and cat friendly housing	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_dogs ) ) )	overnight-housing
find housing units in the neighborhoods of midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
apartments 800 square feet and above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
neighborhood of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
count of different units	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )	overnight-housing
housing apartments that allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing that costs the same as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) )	overnight-housing
which neighborhood has under two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
how big is 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )	overnight-housing
housing unit posted after january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
find a housing unit that is in two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-housing
what is the date of 123 sesame street posting	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) )	overnight-housing
apartments that were posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
which housing unit allows dogs and cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )	overnight-housing
what housing unit in the same neighborhood as 123 sesame street was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
which housing posted jan 2nd rents for 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
800 square feet housing that allows dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
find 800 square feet housing units of the type apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing with 1500 dollars rent that has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )	overnight-housing
what neighborhood is 123 sesame street in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what kind of housing is the housing unit posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
find housing units with the most number of neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )	overnight-housing
what housing unit contains a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )	overnight-housing
housing unit that costs 1500 dollars rent and allows dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_dogs ) ) )	overnight-housing
how many neighborhoods are in the city	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )	overnight-housing
which kind of housing permits cats inside it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )	overnight-housing
housing that is either an apartment or townhouse	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
which housing unit is posted lately	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
housing that isnt in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-housing
housing that allows cats and is 1500 a month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string allows_cats ) ) )	overnight-housing
which housing unit was not posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )	overnight-housing
list all housing units that are apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
what housing has been posted lately	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
apartments that are catfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
find housing units with less than or equal to the rent of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
list all housing that have the size of 800 or 1000 square feet	( call SW.listValue ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) )	overnight-housing
what are the neighborhoods of 123 sesame street and 900 mission avenue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )	overnight-housing
which housing unit has 1500 dollars as monthly rent	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
housing with with largest posting date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
housing units who have a posting date of january 2nd and on 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
smallest housing units	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
find housing units with a private room and is dog friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_room ) ) )	overnight-housing
what is the neighborhood of the apartment that is pet friendly	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )	overnight-housing
housing that is more than 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
apartments with a private room in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )	overnight-housing
show me housing that is the same type as at least two others	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
apartment or condo	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.concat en.housing.apartment en.housing.condo ) ) )	overnight-housing
a unit with a private bath that posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string has_private_bath ) ) )	overnight-housing
which housing unit with a rent of 1500 dollars per month permits cats in it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
what is units monthly rental	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )	overnight-housing
housing with any monthly rent posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
building with the least number of housing types	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string housing_type ) ) )	overnight-housing
what is the monthly rent for 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
apartment with a master bathroom in midtown west neighbourhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )	overnight-housing
what is the monthly rent of housing units posted on january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
find housing units with the least number of neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-housing
apartment with a private bath that also accepts cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )	overnight-housing
housing unit sizes on 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) )	overnight-housing
neighborhood with the most available housing	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
condomonium or flat	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )	overnight-housing
what is the housing type that allows cats	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ) )	overnight-housing
what is the neighborhood of 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )	overnight-housing
which housing unit is available for the least rent	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )	overnight-housing
apartments that rent for at least 1500	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
find housing units that satisfies two housing types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string <= ) ( number 2 ) ) )	overnight-housing
which housing unit was posted before jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
find housing that allows dogs and cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )	overnight-housing
what is the neighborhood of 123 sesame street called as	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
what housing unit was posted on jan 2 or feb 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )	overnight-housing
800 square food housing units that have private baths	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
apartments in the same neighborhood at 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) ) )	overnight-housing
housing with a private room that is 800 square feet total	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )	overnight-housing
apartment with a private bath for rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
find housing that has a private room and bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )	overnight-housing
housing that allows cats and includes a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )	overnight-housing
which housing unit is smaller than 800 square feet or 1000 square feet by area	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
neighborhood with apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )	overnight-housing
apartment with rent between 1500 and 2000	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )	overnight-housing
apartments with less than 2 units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )	overnight-housing
what kind of housing was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
neighborhood of housing unit whose monthly rent is 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )	overnight-housing
show housing types for three or more units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
january 2 to february 3	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) )	overnight-housing
what kinds of housing include a private room	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ) )	overnight-housing
unit with rent between 15002000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) )	overnight-housing
neighborhood with more than two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
what housing is cat friendly and costs 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
housing posted before january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
what is the average size of housing	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )	overnight-housing
where is midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-housing
what housing unit has 2 or more types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )	overnight-housing
cat friendly apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )	overnight-housing
neighborhood with at most two housing	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
what kind of housing is 900 mission ave and 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )	overnight-housing
800 square foot apartment with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing that is 1500month and includes a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_room ) ) )	overnight-housing
apartment in a quiet neighborhood	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-housing
posting with at least two types of housing	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )	overnight-housing
what neighborhood has less than two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
what is the average price of apartments	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )	overnight-housing
housing that is 800 square feet or less or 1000 square feet or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
find all housing units posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
housing that is at least 1500month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
how large is the housing unit	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )	overnight-housing
list all housing types that are not the same as those in 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string ! = ) en.housing_unit.123_sesame_street ) )	overnight-housing
show me apartments with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )	overnight-housing
what housing unit in midtown west was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
find housing units with rental charges between 1500 to 2000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )	overnight-housing
what housing units are at least 800 or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
housing unit posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
private bath with 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
unit with private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )	overnight-housing
neighborhoods with dogfriendly apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )	overnight-housing
find housing units less than 1000  square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
which area has less than two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-housing
housing unit that is not 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string ! = ) ( number 800 en.square_feet ) ) )	overnight-housing
apartments at 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing with monthly rent of 1500 dollars that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
smallest apartments	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )	overnight-housing
apartments are 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
in which area is 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )	overnight-housing
housing that accepts dogs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )	overnight-housing
what housing has the latest posting date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-housing
housing that posted after january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )	overnight-housing
apartments that were posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )	overnight-housing
apartments with a private bath that allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string has_private_bath ) ) )	overnight-housing
housing with posting date of january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
800 square foot dogfriendly apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
what kind of housing is 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) )	overnight-housing
which housing unit resembles the size of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )	overnight-housing
find an 800 sq ft housing unit posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
housing that includes two units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
apartments with a private bathroom that allow cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )	overnight-housing
housing that allows dogs that posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )	overnight-housing
housing unit with a cheaper rent than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )	overnight-housing
apartments that permit cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
housing that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) )	overnight-housing
need a unit with a private room in the midtown west area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing unit that allows cats and has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )	overnight-housing
housing posted the same day as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )	overnight-housing
housing posted before january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
what housing was posted no earlier than jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )	overnight-housing
find apartments in the neighborhoods of midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string housing_type ) ( string = ) en.housing.apartment ) )	overnight-housing
either 800 or 1000 square feet	( call SW.listValue ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) )	overnight-housing
which housing units are at least 800 square feet in size	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
which housing unit permits dogs and has the facility of a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_dogs ) ) )	overnight-housing
list all apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing at least 800 to 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )	overnight-housing
neighborhoods with the least housing units	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
how large is 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )	overnight-housing
apartments in the midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-housing
housing that is 1500month and 800 square feet	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )	overnight-housing
catfriendly housing with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )	overnight-housing
exclude apartments from midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-housing
neighborhood that has two housing	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )	overnight-housing
most expensive places to rent	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )	overnight-housing
housing posted in a neighborhood on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )	overnight-housing
which housing unit has a rent of 1500 dollars per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )	overnight-housing
find cat friendly housing units that charge 1500 dollars as rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
housing under 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )	overnight-housing
which housing unit permits dogs and has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )	overnight-housing
show me housing in midtown west where rent is 1500 dollars a month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
800 square foot apartment with rent at 1500 a month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )	overnight-housing
which housing unit has  an area of 800 or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )	overnight-housing
article with the largest amount of authors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )	overnight-publications
article citing article published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
what article from 2004 cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
find an article published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles that have a publication date close to the date of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
which article is authored by efron and has the annals of statistics as its venue	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
venue of only one article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles with one or two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )	overnight-publications
article whose author is efron or lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )	overnight-publications
an article that won award cites another article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published in 2004 that cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
which author has written the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published in more than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )	overnight-publications
articles that mention two or more cities	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article whose publication date is smaller than publication date of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
articles published in annals of statistics cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article is about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
articles found in less than two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )	overnight-publications
name an article about multivariate data analysis by the author efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles not published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles cited in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
find me an article that is in two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
article that references the least number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find a venue with more than two articles in it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
an article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article was in less than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )	overnight-publications
who wrote multivariate data analysis more than once	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
which articles cite less than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published contemporaneous to or after the multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
what article cites two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article published in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-publications
articles with less than two references	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article cites multivariate data analysis and is also its venue	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles with more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
who is the author of a multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
publication with the fewest articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
venues with less than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article cited two or fewer times	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published before the date of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
award winning article published by annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )	overnight-publications
what article was written before the publication date of articles about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
who is the author of the article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
when was multivariate data analysis published	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )	overnight-publications
articles published before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
article cited the fewest times	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what author wrote two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
author of article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
author with at most two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article cites other articles about annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
what venue has two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
authors of multiple articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published after multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
articles in annals of statistics cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles citing articles cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article wasnt published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-publications
venue of article that multivariate data analysis cites	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
writers who didnt write multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article discusses another article that won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
articles written by efron and cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article was published in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles that have won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )	overnight-publications
who is the author of less than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles that cite articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
name a person who is the author of an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
name a publication with fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what author wrote the least number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
award winning article publication venue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
article whose publication date is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
name an article that won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
articles with more than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )	overnight-publications
who has authored the least articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article has the most authors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )	overnight-publications
in what publication was multivariate data analysis published	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
article whose publication date is at most publication date of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
writers of two or fewer articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name someone who has written an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published on the same date as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )	overnight-publications
which authors have written two or more articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find a venue of an award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
any article that cites another article published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
articles cited by award winning articles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
what article in annals of statistics cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
article that multivariate data analysis cites	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
publisher of only one article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what award winning article was cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
venues of two articles or fewer	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
an article whose also authored multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )	overnight-publications
name an article citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published in 2004 that won awards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )	overnight-publications
writers of fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name a person who has authored fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an article from the annals of statistics about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
award winning articles cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
publications where articles by efron can be found	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
articles citing articles cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
name an article from the annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
article whose publication date is 2004 and cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article has a publication date greater than that of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
what article cites an award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
which publication contains two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles that cite two or fewer articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article discusses annals of statistics and whose publication date was 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles citing articles cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
which annals of statistics article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
what article about annals and statistics has a publication ate of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles published in 2004 cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published in 2004 that have won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
name an article with fewer than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
what article is not cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
who wrote the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that cites two or more articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published in 2004 citations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
what article cites the most number of other articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article published in 2004 was cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
what author wrote two or more articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an article published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
name an article that won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
which article was published  in more than two magazines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )	overnight-publications
name an article that is not about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles that does not cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article has been cited less than twice	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article with author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )	overnight-publications
which article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
who is someone who has authored articles about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
find the author of an award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
venue of the efron article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
articles written by efron that have won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
who is the author of the two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article published in 2004 and that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
which article was published after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
which venue has two articles maximum	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article published before multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
find any article that efron didnt write	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )	overnight-publications
what article doesnt cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
article written by one author	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
name an article found in more than two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )	overnight-publications
articles published in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
name a publication containing no more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article did efron write whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what articles are written by authors of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
all articles by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
articles published from 2004 to 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
find an author of an article in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
venues that have published the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published in the fewest places	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )	overnight-publications
when was multivariate data analysis published	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )	overnight-publications
author with the most number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles not authored by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )	overnight-publications
venues that have published at most two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles with more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
article with two or more publishers	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
what article is written by efron and won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )	overnight-publications
name an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
writer of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles found in at most two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )	overnight-publications
articles cited by the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find an efron article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what annals of statistics article was cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
name an article produced by more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
what venue has under two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
author of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article with the maximum number of venues	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )	overnight-publications
who wrote multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) )	overnight-publications
what annals of statistics article cited multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles cited by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
publications with at least two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles citing multivariate data analysis written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what articles have under two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
find an article that cites more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what articles were written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article cites an article cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
article whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
what efron article has won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )	overnight-publications
author with maximum two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
venue with two article published	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article cites an annals of statistics article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
articles citing multivariate data analysis published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
which article is cited by the most number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published in two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
articles cited by articles published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
article written by efron that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles not published in the annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )	overnight-publications
articles not cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
what are some articles unrelated to annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )	overnight-publications
an article by efron that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
earliest published article	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
article citing more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find an article with the same venue as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )	overnight-publications
what are the articles that multivariate data analysis cites	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
article published after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
venue that is venue of article whose author is efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
which articles author is efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
which author wrote two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
author of article cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article has a publication date greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
what is an article in annals of statistics about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
multivariate data analysis venue	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )	overnight-publications
what person wrote articles than won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
articles cited by multivariate data analysis and written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what article has two citations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
publications of multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )	overnight-publications
what article has fewer than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )	overnight-publications
articles written by fewer than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
article by more than two author	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
articles with their publication dates between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-publications
this article cites 2 other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article cited bymultivariate data analysis whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles not published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )	overnight-publications
articles that cite more than two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what award winning article is cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article has a publication date of at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
article not citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles with fewer than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
name an article from the annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
name an article about multivariate data analysis from the annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
which article does not cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
which article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article has a venue of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )	overnight-publications
what articles are published in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published in the fewest venues	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )	overnight-publications
articles written by efron and published in the annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
find an article published before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
article that has the largest publication date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
articles with fewest citations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles cited in articles by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
what venue has two or less articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article was published on the same date as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )	overnight-publications
article not in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )	overnight-publications
article in less than two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )	overnight-publications
which article is mentioned in most number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what efron article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
publications that have contained more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find an article published in either 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-publications
where can you see multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )	overnight-publications
article citing multivariate data analysis by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
most recently published article	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
which author did not write  multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles written by the multivariate data analysis writer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )	overnight-publications
author of more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
which article was published in 2004 at annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles published in annals of statistics that cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
what article did the article that cited multivariate data analysis cite	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article has less than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
name a person who has written two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles cited by studies using multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
article that cites three or more articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what is the article with the oldest publication date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
name the author of an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
which articles cite two or fewer articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an article with more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
publication date of multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )	overnight-publications
articles cited by articles in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
articles cited by multivariate data analysis that won awards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
what venue has less than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article has two other articles cited within it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what author has written more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that cited multivariate data analysis in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published in annals of statistics and cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what articles are published in annals of statistics and in the year 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article published in 2004 and that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article was cited by the award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
award winning article published by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )	overnight-publications
which articles cite at least two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an article about multivariate data analysis published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles written by efron or lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )	overnight-publications
who authored two or fewer articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article has a publication date of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
name an article from 2004 about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
what are some articles written by efron or lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )	overnight-publications
name an author of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles written by at least two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string >= ) ( number 2 ) ) )	overnight-publications
articles that won awards cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
article whose author is efron and whose publication date is 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article that cites multivariate data analysis that is published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article that mentions award winning multivariate data analysis article	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
article that has less than two venue	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )	overnight-publications
venues that published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
article that cites multivariate data analysis in the annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
what is an article written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
author of one or two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find an article in annals of statistics that was published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article that at least two article cites	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that won an award and cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
find an article that makes two or fewer citations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an author of at least two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles with two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
venue that is venue of article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
which efron article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
people who did not author multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article was written by efron and has a publication date of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles not written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )	overnight-publications
article that cites a single article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles cited by two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what articles cites two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
an article with the latest publication date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
articles published in the same venue as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article has over two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
article that cite articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles authored by one	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
what venue is about at least two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
how many journals are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ) )	overnight-publications
find an article in the annals of statistics venue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
what is an article that has two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
what article was published in 2010 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
author of only one article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles authored by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
article that has the least number of venue	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )	overnight-publications
what article cites articles written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
article on annals of statistics by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
find a venue that does not have multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
what is the date of the article	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles that were not published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article written by efron that references multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what article won an award and is about annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles that cite more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find an article published after multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
articles published in two or fewer venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )	overnight-publications
articles published after multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
what article sites only one other article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
award winning article cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article has the most venues	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )	overnight-publications
article cited by article which is published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
article with the fewest authors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )	overnight-publications
articles citing multivariate data analysis published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
name the author whose article has its venue as annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
name an article by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
article by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
which author wrote two articles maximum	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles written by one or two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )	overnight-publications
what is the venue of an article cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what venue is multivariate data analysis in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article about multivariate data analysis was published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
what article was cited twice	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article that has the same publication date as the multivariate data analysis article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
articles that do not cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
what is the date of publication  for multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )	overnight-publications
what article is written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what is the venue of the article published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
writers who cited multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
articles published before multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
who is the other author for the article written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
what article has the least number of authors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )	overnight-publications
what article cites at least two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that cite at least two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what author published an article in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles that cities maximum two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what award winning article was written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
article whose author is efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
what is the publication date of a multivariate data analysis article	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )	overnight-publications
what article has the oldest publication date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )	overnight-publications
articles by efron published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
an article that cites multivariate data analysis published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article by the same author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
article that citesmultivariate data analysis by author efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what author wrote an article that cities multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what is the persons number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-publications
article published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
what is an article written by only one author	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
which article is mentioned in least number of other articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find a venue of an article in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
venues that have efrons article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
what is the venues number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ) )	overnight-publications
what article was cited by a 2004 article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
venue of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article written by efron and published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
name an article not published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
which venue was venue for more than two articles publication	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles that cite articles written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
articles published in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
name someone who has written no more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article authored by efron and has the annals of statistics as its venue	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
which article has a publication date the same as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )	overnight-publications
venues of fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what journal is multivariate data analysis published in	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )	overnight-publications
article with two publishers	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
what is a venue with fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )	overnight-publications
article written by efron which multivariate data analysis cites	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
venues other than the multivariate data analysis venue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
first published article	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
article that mentions at least two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an article found in two or more venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
article whose publication date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
what is an article cited in a publication about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article makes the fewest citations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what venue has articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
find an efron article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
article with two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
who is the author of whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
articles with more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
what article has the least authors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )	overnight-publications
what article was written by efron and discusses annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
article by efron citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published in 2004 citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
article that does not cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published before 2004 or before 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
what is the venue of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
article with the venue as annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
publications that do not publish multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
award winning articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )	overnight-publications
articles written by the writer of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
name an article about multivariate data analysis that has won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
award winning article cited bymultivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
what venue can you find multivariate data analysis in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article cites less than two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article with more than two venue	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )	overnight-publications
what author wrote about annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
article whose venue is venue that is venue of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what venue consists of multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) )	overnight-publications
which article was written by minimum number of authors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )	overnight-publications
who has coauthored articles with efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
awardwinning articles cited in articles using multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles cited by award winning articles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
which article cites an awardwinning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
venue of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
who has written the fewest articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an article published in 2004 about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what venue is about the most number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article written by efron that is cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
articles published contemporaneous to or before the multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
article with publication date as 2004 and has the venue as annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
find me an article with two or more venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
find an article by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
article with publication date as 2004 or 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )	overnight-publications
what article has two authors or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )	overnight-publications
what is the venue of an article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
articles published in 2004 and cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article was in the most venues	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )	overnight-publications
which author wrote under two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article found in the most publications	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string venue ) ) )	overnight-publications
articles that mention three or more cities	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article has a publication date of 2003 and won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string won_award ) ) )	overnight-publications
writer of articles cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
article cited by as well as cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles written by efron citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
author of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
who has written more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name articles in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
articles published except in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article cited by award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
writers of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article published on date of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) )	overnight-publications
what article cites an article from annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
what article was published after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles citing articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
what article won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )	overnight-publications
awardwinning articles cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
what article was published on or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
what multivariate data analysis city articles were published after 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article that cites article that multivariate data analysis cites	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
article that cites the fewest articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
which article that cites multivariate data analysis won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
venue that is mentioned in at least  two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article cites more than two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
author of article citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
who wrote an article citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
articles published in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )	overnight-publications
authors of awardwinning articles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
publications with articles authored by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
articles published before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
what article won an award and has a publication date of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles published in two or more venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
article with two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( number 2 ) ) )	overnight-publications
what article is about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
writers of two articles at most	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article citing multivariate data analysis published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article was written by efron and cities multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
articles with a venue	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )	overnight-publications
an article citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what venue has the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that was awarded	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string won_award ) ) )	overnight-publications
what article cites a 2004 article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
article whose publication date is 2004 and whose author is efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what is the newest published article	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
articles cited by multivariate data analysis and published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
either annals of statistics or computational linguistics	( call SW.listValue ( call SW.concat en.venue.annals_of_statistics en.venue.computational_linguistics ) )	overnight-publications
author of only one article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles that were written before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
what article written by efron cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
awardwinning article by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
what article was published before multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
name some articles that are not written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )	overnight-publications
article that cites two or fewer articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article cites an article cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
writers who published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
article that cites the least number of article	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that has the least number of author	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string author ) ) )	overnight-publications
articles with three or more authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
articles written by efron cites	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
article that mentions one article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles cited by awardwinning articles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
which article  is written by less than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
journal that did not publish multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles published before 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
name someone who is not the author of an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
there are at least two venues in the article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
what award winning article has annals of statistics as a venue	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
what venue has two or more articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles cited by multivariate data analysis and published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles cited by fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name a person who has written no more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles written by the author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
articles published between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
article cited more than twice	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name an article found in at least two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
what article has the least venues	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )	overnight-publications
who is the author of multivariate date analysis articles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles written by efron or lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )	overnight-publications
what article makes the most citations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
who wrote an article about city multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
find an article with no more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )	overnight-publications
article that does not cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles that won an award published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
an article on statistics that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
writer of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles not written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )	overnight-publications
publications that contains articles that are also published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
what article exchanged citations with multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles written by efron published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string author ) ( string = ) en.person.efron ) )	overnight-publications
articles that cite multivariate data analysis and are cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles cited by articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
authors of articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
venues of articles cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
venue of two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that references one or two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article is about annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles that won an award written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )	overnight-publications
article by only one author	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )	overnight-publications
what article was cited the most	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article is cited at least twice	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article has a publication date the same as the date of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
venues publishing the fewest articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article has two venues minimum	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
publications that include articles published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
what articles are written between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
article citing multivariate data analysis published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
how many people	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-publications
article published most recently	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
articles with two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( number 2 ) ) )	overnight-publications
venue of one or two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article written by more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )	overnight-publications
journal that publishes the fewest number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
who is someone that has not authored an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
name an article found in two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
articles citing efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
articles published in 2004 and citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
any article that mentions award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
who is the author of the article who won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
articles with two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( number 2 ) ) )	overnight-publications
what is the earliest published article	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )	overnight-publications
articles that cites at least two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
venues that have published at least two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article that cites more than two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
venues of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
name a person who is the author of an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles that cite the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what articles are published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
articles on multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles that cite multivariate data analysis published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
what article has more authors than any other	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )	overnight-publications
who authored multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) )	overnight-publications
article with venue anals of statistics that multivariate data analysis cites	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
find an additional author to an efron article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
articles citing two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find an article making a citation of a 2004 published article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles that cite multivariate data analysis in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
what article cites other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
which article  that cites multivariate data analysis was published on 2004 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what 2004 article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
venues of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles published after 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
what article was published on or after multivariate data analysis was	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
article that does not reference multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
article publication of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article is cited by an article in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )	overnight-publications
which article cites the fewest articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article cites an efron article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
articles published in annals of statistics in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article whose author is author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )	overnight-publications
article that is published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles written by two authors at most	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string <= ) ( number 2 ) ) )	overnight-publications
authors who published their works in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-publications
venue of maximum two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what award winning article was in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )	overnight-publications
what article has a publication date earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
articles cited by multivariate data analysis published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles published in the same publication as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )	overnight-publications
award winning article whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )	overnight-publications
what venues cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
article that cites multivariate data analysis whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
writers of more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
author of at most two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article does not cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
article published in 2004 that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
person that is author of article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
article citing awardwinning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )	overnight-publications
who wrote the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what article was published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
article that refernces a single article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
find an article published on or before multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )	overnight-publications
what article has annals of statistics as a venue	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )	overnight-publications
articles cited by multivariate data analysis and that won awards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )	overnight-publications
what venue has the fewest articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
venue in most of the articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles that have a minimum of two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string >= ) ( number 2 ) ) )	overnight-publications
find an article published after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-publications
when was multivariate data analysis published	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )	overnight-publications
writers of articles citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
what article has the same venue as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) en.article.multivariate_data_analysis ) ) )	overnight-publications
which articles cite more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
which article was published in 2004 authored by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles published in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-publications
multivariate data analysis cited articles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
name an article found in more than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )	overnight-publications
article that the least number of article cites	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
article whose venue is annals of statistics and that won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )	overnight-publications
an article that multivariate data analysis cites	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article has no less than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
who is the author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles written by efron cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles cited by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )	overnight-publications
author of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
articles publised in 2004 that won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-publications
articles published in two or more venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )	overnight-publications
articles that are cited by two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
who is and author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
articles that cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what article cites the fewest articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )	overnight-publications
what is an article that does not cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )	overnight-publications
find an article with no more than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )	overnight-publications
name an article found in two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )	overnight-publications
what 2004 article was cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )	overnight-publications
what meal has two or fewer recipes designated for it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes with a preparation time equal to or greater than the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
find a recipe thatll feed two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what ingredient is in two or less recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes make at least 2 meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what two ingredients does that recipe require	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
how many ingredients does that require	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me lunch recipes	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what recipe can be prepped in less time than rice pudding can be cooked	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
how many recipes are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipes posting date is at least the same as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show recipes that could be used in any meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what type of cuisine is rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
find a recipe that takes the same time to cook as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
what recipe serves at the most three	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
the lunch recipe  posting date is 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show me lunch recipes that require milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what is a recipe from the fewest cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
what recipes share ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the meal that rice pudding goes with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipes cooking time is at least the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
name ingredients used in more than one recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipes posting date is not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
recipe for the most number of meal	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe has one cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-recipes
what recipe requires milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
show me recipes that required two or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me ingredients that two recipes require	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is a recipe used for fewer than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe takes longer to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which ingredient is needed in the least number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe has its posting date as 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
which food item is not needed in rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipes have the most ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
for what meal can maximum recipes be found	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
how much time it takes to cook rice pudding 	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
show me recipes that are not lunch recipes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
show me meals requiring milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what are ingredients in rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
show recipes with the preparation time as the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
show me recipes with cooking time greater than preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
find  lunch recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
ingredients in recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what is the recipe that needs the minimum number of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipes cooking time is the same as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
which recipe requires the most ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
recipes prepared in rice puddings cooking time	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
what is a recipe that is good for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )	overnight-recipes
ingredients required in less than three recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is a lunch recipe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show recipes that follow more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-recipes
show me recipes that take less time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe requiring milk makes a lunch meal	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
show me recipes that posted no later than the rice pudding recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what ingredients does rice pudding need	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what is the total cooking time of the recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
what is a recipe that was not posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what is the used milk or spinach	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )	overnight-recipes
which recipe has the longest ingredient list	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what is cuisine for rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
show me recipes for two meals at most	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that work for more than one meal	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe requires fewer than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what meal is rice pudding or quiche made for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
how long does it take to prepare rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )	overnight-recipes
show me the most required ingredient in recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the average preparation time for a recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
show the recipe that takes the longest time to cook	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
what is the average preparation time of that recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
which recipes were posted up to 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what is an ingredient found in fewer than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
recipe that first posted	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what recipe requires three or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipes posting date is 2004 and requires milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what meal has two or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
ingredient required by least number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is an ingredient found in a recipe for rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
list the recipes for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )	overnight-recipes
what recipes takes more time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
recipe with cooking time not more than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipes fall under more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-recipes
find a meal without rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
spinach or milk	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )	overnight-recipes
what is the cooking time of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
show me recipes requiring one ingredient	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe takes the longest time to prep	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
what is a recipe from more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-recipes
what is the prep time for rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )	overnight-recipes
find all recipes posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what are ingredients required by the recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
which meal has less than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
for what meal are there the fewest number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me preparation time for rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )	overnight-recipes
what ingredient is there in less recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe takes less time to cook than rice pudding does to prepare	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what is the mean cooking time for the recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
show me recipes posted before 2004 or before 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me ingredients not required for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
which recipe was not posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
which recipe was posted at the posting date of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipes posted in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
find recipes that were posted before the recipe for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what is the newest recipe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
how long does rice pudding take to prep	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )	overnight-recipes
cooking time of recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
what recipe is the oldest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what type of cuisine is rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
what ingredients are used only for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
what is a recipe that does not use milk as an ingredient	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
what recipe requires the ingredients of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
what recipes share at least two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show recipes whose posted date is on or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me the total number of recipes	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the average cooking time for that dish	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
when was the recipe for rice pudding posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
what recipe requires milk or spinach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )	overnight-recipes
show me recipe to do a meal for a single person	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what meal has more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes take less time to prepare than to cook rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what is the total cooking time of the recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
how many ingredients	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
find a lunch recipe that is prepared with milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what recipe takes same or less time to prepare rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what is an ingredient found in a recipe that was posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes posted before 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me all the recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
for which meal is that recipe that has milk as one of its ingredients	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what recipe makes something for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what recipe cooks in less time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe takes less time to prep than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
how long is the average preparation time for the recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
what recipe was not posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what recipe is designed for more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what meal is for only one recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe has milk as an ingredient	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
show me recipes with the longest cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
show me recipes that require milk or spinach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )	overnight-recipes
show me recipes that have a shorter preparation time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe takes no longer to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipes have at least 2 cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
what recipes need milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
a recipe requiring fewer than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what is the preparation time for that recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
show me a recipe for the least number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
for which meal is the dish rice pudding used	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what meal can be made by two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that have a cooking time equal to the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
what recipe can make fewer than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes with preparation times longer than cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
how much time it takes to prepare rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )	overnight-recipes
what recipe makes the fewest types of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
what recipe uses milk or spinach as an ingredient	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )	overnight-recipes
what recipes share the cuisine of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
show recipes that take at least the preparation time of rice pudding to be done	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe can you prepare in the same or less time than it takes to cook rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me ingredients needed for rice pudding and quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
name the ingredient required by at least two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
find recipes that were posted before 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
a recipe which takes longer to cook than the preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
the receipe is for two meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe cooks for equal or less time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
how much time is needed to cook this dish	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
what recipe has the most ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe was posted before rice puddings recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what recipe was posted after rice puddings recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
which recipe was posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what lunch recipe requires milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what is a recipe found in two or more cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
two cuisine recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-recipes
what recipe was posted the same date as the rice pudding recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )	overnight-recipes
recipes for lunch or dinner menus	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )	overnight-recipes
find a recipe that was posted  by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what does the recipe posted in 2004 require	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
either 2004 or 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )	overnight-recipes
show me ingredients required for the most recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
find recipe for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what meal has the least recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes have two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-recipes
which recipe is for a lunchtime meal	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
recipes that require same time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
show me recipes with fewer than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes posted in 2004 that use milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what ingredients does rice pudding not need	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
what lunch recipe was posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
which recipe has less cooking time like rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
a recipe for the fewest types of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe requires less prep time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipes are cooked in same time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
which recipe has the least number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
show me recipes for the most cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-recipes
what is the average cooking time for that recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
show me a recipe with the same prep time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
show recipes posted on the same date or later than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
which recipe is intended for the least number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipe that has at least have two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
a recipe which posted no sooner than 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what recipe calls for fewer than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipe takes longer to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
recipe of at most two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
what recipe calls for the fewest ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
when was rice pudding recipe posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
what recipes cooking time is greater than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me ingredients required by at least two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe has a cooking time as that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipes can make two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipes preparation time is lesser than the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which recipe was posted during 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
which recipe falls under the least kinds of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
what ingredient is used by two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe calling for milk was posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what recipe posted in 2004 makes a lunch meal	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
ingredient of two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what meal has two or less recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what meal doesnt call for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
which ingredient is needed in less than two recipes 	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me the ingredients for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what food items are needed to make rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipe was posted the earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what is the average time needed for the preparation of the dish	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
what recipe requires at the least two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipes can be prepared faster than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which meal has two or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes have three or more cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-recipes
what is the cook time for rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
what is the total number of recipes	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the usual time required to finish the recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
what ingredient is used for the least amount of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe is for a meal for two	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipes dont call for milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
what meal has over two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
recipe of less than two meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
are there any recipes which were posted twice in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
to which cuisine does rice pudding belong	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
what recipes comes under less than three cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
which recipes were posted after 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
find a meal with two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
recipes posted till 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
find recipes posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
recipe cooked in preparation time of rice pudding or more	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me the recipe that has the shortest cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
what is a recipe using milk or spinach as an ingredient	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )	overnight-recipes
what recipe has a cuisine including rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
show me recipes that require less than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
which ingredient is needed in more than one recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
a recipe which takes at least as long to cook as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe takes most time to cook	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
which recipe needs more time than rice pudding preparation	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes requiring milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
show me lunch recipes that posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what recipes cooking time is at the greatest the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what are the recipe that at most use two ingredients 	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what meal has quiche and rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
recipe with posting date not after posting date of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipe which take as much time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
recipe for only one meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what ingredient is found in rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
find a recipe that needs milk for its preparation	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what recipes require the same time or than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what ingredients do lunch recipes call for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
for what meal is rice pudding used	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
which recipes are intended for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )	overnight-recipes
what recipes require no more than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
how many recipes	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me a recipe that requires only two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me ingredients required by recipes that require milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what recipes preparation time is no more than the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me recipes that use two ingredients or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipes need milk and is posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
show me recipes for lunch or supper	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )	overnight-recipes
name the ingredient in most recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that require the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
show me recipes posted in 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-recipes
recipe prepared in more time than cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which recipe  s cooking time is equal to that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me lunch recipes that need milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what meals have two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what are the recipes that are made with milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
which recipe is used for the most meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
how long does rice pudding take to cook	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
find recipes posted in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-recipes
show me meals with fewer than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
a recipe requiring the fewest ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe was posted before or on the same day as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what meal can be made by the recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes for lunch posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
show me recipes posted no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes that take the same time to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
what meal has maximum recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe posted in 2004 requires milk as an ingredient	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
which recipe needs more than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipes are for less than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes requiring the ingredient milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
show me recipes with two ingedients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-recipes
ingredient required by recipe whose posting date is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
when was the rice pudding recipe posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
which recipes require at least two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipes have a cooking time that is at least as long as rice puddings preparation time	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipes take longer to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what meals are recipes for lunch for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
which recipe uses milk as an ingredient	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what recipes ingredient does this lunch require	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
how many total recipes are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe takes the maximum preparation time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
which recipe has the most number of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-recipes
show me recipes that take the same amount of time to prepare as rice pudding does to cook	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
for what meal is rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
for what meal is rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
show me recipes with cooking time equal to rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
show me recipes for more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes from the same cuisine as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
what ingredients go in rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipe needs spinach or milk for its preparation	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )	overnight-recipes
lunch recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
show the first recipe posted	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what recipes posting date is lesser than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show recipes posted before rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me two recipes for a meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the total time required for preparing the dish	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
show me recipes that require cooking time thats more than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which recipe is posted after the posting date of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
which recipe was posted most recently	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
which recipe has the same cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
what recipes preparation time is at least that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
recipes for rice pudding or quice	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )	overnight-recipes
which recipes have the most number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
name ingredients that is not required for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
name the recipe with a cooking time with at least the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me all the recipes posted after 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me recipes that involve two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-recipes
which recipe has a prep time no greater than the prep time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes that has milk as one of its ingredients	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what is a recipe that takes no more time to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what ingredient is most used	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is a meal other than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
which is the food item that is needed in two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe requires the same ingredient as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
what recipe was posted during 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what is an ingredient found in rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
which is the last posted recipe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
show me meal recipes including rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
what recipes cooking time is the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
what recipe makes two types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-recipes
what recipe has two or more types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
what is the cooking time of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
what ingrediant is used in the fewest recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes with preparation time equal to or longer than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe calls for over two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipe was posted on the same date as that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )	overnight-recipes
how long does the recipe take to prep	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
what ingredient is in than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
name ingredients used only in one or two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe has over two types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-recipes
find a recipe which has a longer cooking time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe needs milk and is for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what meals does rice pudding not go with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipe has a cook time less than the cook time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me the recipe that has the largest preperation time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
which recipe was posted the earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what is a recipe that is for more than two different meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
find the lunch recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
a recipe with milk as an ingredient	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what recipe was posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what ingredient is required in only one recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what ingredient is required in either rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
what are the ingredients needed for recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
how many meals do we have everyday	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
whats the average preparation time of a recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
show me recipes posted before rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what are the recipes for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what recipes posting date is 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what lunch recipe uses milk as an ingredient	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
how long does this recipe take to cook	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
find a recipe that is good for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )	overnight-recipes
what meal is the recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
which recipe has the least amount of prep time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
what recipes posting date is at the greatest in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what meal most recipes made for	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
recipe of at least two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
what recipe requires the least ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the cuisine of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
recipes with just two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
name an ingredient required by two different recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe is cooked in less time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show recipes with milk as an ingredient and is posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
which recipe belongs to less number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
what ingredient is needed for fewer than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
recipe of number of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what to prefer rice pudding or quiche	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )	overnight-recipes
what recipe has the least prep time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
a recipe that uses two or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
meal with more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
find recipe that needs the maximum number of food items	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
find recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what recipes  are prepared in less time tan rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what time can be prepped in the same time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
show me recipes with the most preparation time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
what meals have recipes that use milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what meal can you find at least two recipes for	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes for lunch posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
show recipes whose posting date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
find recipes posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes that have the fewest ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe takes at least as long to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me milkfree recipes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
show me recipes that have the same or longer preparation time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what is a meal with the most number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe is a recipe for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
recipes total preparation time	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
show me recipes for the most meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
recipes that requires the same or more time to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what ingredient is required in two or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the average prep time for the recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
what recipe was posted during or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes not for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
which recipes were posted before rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipes with posting dates from 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what recipe calls for two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that call for more than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe is for no more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
which recipe has a larger cooking time than the preparation time needed for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show recipes that requires lesser preparation than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe does not need milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
what recipe needs least ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what is recipe for a meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipes preparation time is greater than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
tell recipes with milk for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
name the recipe that is prepared for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show me the recipe that has the most number of requirements	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes for rice pudding or quiche	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )	overnight-recipes
what recipe can be used for at least two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes posted in 2004 requiring milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what ingredient is called for by a recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
how many total meals are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe has no fewer than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
which recipe requires the least cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
what recipes preparation time is the same as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
which recipes take longer to cook than to prepare rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe takes equal or more time to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me recipes that need at least three ingrediants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
recipes that require less or same time than the time taken to prepare rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes that follows one or two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
show me recipes that require lesser cooking time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes posted before any posting for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what recipes posting date is at most 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what is the posting date for rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
what recipes posting date is greater than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipes with the cuisine least represented	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
what is the cuisine of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
what recipe doesnt require milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
what recipe takes longer to cook than rice pudding takes to prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
find a lunch recipe from 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what is the average preparation time across all recipes	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
what meal is the recipe rice pudding for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
show me recipes posted during 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-recipes
which recipe needs less than two food items for its preparation	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which meal has two recipes designated for it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
meal than rice pudding is not taken	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
show me recipes that require longer time to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe has the smallest preparation time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
what is the cooking time of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
name an ingredient required in more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what ingredients are used least in recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what ingredients are used by at least two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
recipes cooking time	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
what recipe falls under two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-recipes
what recipes have the same cooking time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
show me recipes that cannot be taken for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
which recipe has a posting date smaller than 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
meal than has rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
which recipes are for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )	overnight-recipes
show me recipes with cooking times greater than cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me recipes for rice pudding meals	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
what ingredient is not required to make rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
show me recipes requiring two or fewer ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes with posting date before 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me the average cooking time for all recipes	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
show recipes that require at the most time as rice pudding preparation	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe is fastest cooked	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
how many ingredients are needed	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe has the same cooking time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
for which meal is rice pudding had	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
which ingredient is needed by many recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe has a cooking time lower than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which recipes posted in 2004 require milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what is a recipe with a prep time less than the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show recipes that at most have two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
show me recipes with the least cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
ingredients in rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what is the cooking time for rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
show me recipes posted at the same date as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
a recipe for rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
for what meal is rice pudding used for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
recipes without milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
name ingredients that is required in  three or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipes posting date is in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-recipes
which recipes need two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes posted after 2004 or after 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what recipe is not lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
how long does it take to  make rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )	overnight-recipes
show me recipe that require longer time to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe requires the lowest cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
recipe having more than two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-recipes
name the recipe used for lunch prepared with milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
show recipes with the maximum number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-recipes
what recipes require at leas two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which is the most used ingredient in recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is the posting date of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
what recipe has the fewest number of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
for which meal is that recipe with post date in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
which recipe takes less time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
an ingredient required by at least two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show recipes that does not have milk as one of its ingredients	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
how much time it takes to prepare recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
what recipe takes the longest to prepare	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
how long does the recipe take to prepare	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
show me the oldest recipe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
find meal recipes for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
what recipe cooks for less time than rice pudding takes to prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what meal has the most number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe takes the shortest time to cook	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
show me recipes with a preparation time greater than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what day was rice pudding posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
what meal has two or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what ingredients are needed for lunch recipes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
what is the total preparation time of all the recipes	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
find some lunch recipes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
what recipe was posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what recipe was posted no later than the rice pudding recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
how many recipes use more than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipe has the shortest preparation time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
how many meals are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
recipes posted with or after posting rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what is the most ingredient that this recipe requires	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe has the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me recipes requiring an ingredient from rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
what is an ingredient found in no more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes with cooking time equal to preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
what is the total prep time for the recipes	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )	overnight-recipes
which recipes require the same ingredients as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
what recipes need milk or spinach	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )	overnight-recipes
what meal has fewer than two recipes to make it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes require the least amount of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipe requires less cooking time than rice pudding preparation	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipes posting date is greater than 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
which recipe needs the longest preparation tome	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
what recipe has the greatest cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
which recipe belongs to the cuisine of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
show me recipes without milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )	overnight-recipes
what recipe has a cook time equal to the prep time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
find the recipes of multiple cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
show me ingredients required by more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipes need three or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipes were posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
recipes for less than three meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show recipes posted on dates between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me ingredients required by lunch recipes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
show recipes whose cooking time is same as that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
what are the recipes posted in2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
which meal has the least recipes dedicated to it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe is most recent	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
recipes with more preparation time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe was posted in 2004 and needs milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
find recipes posted in 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
show me recipes posted the same day as rice pudding or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
which recipes require milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what is an ingredient used in more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe was posted in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
which recipe requires at least two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what is an ingredient not found in rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
what is the average cooking time of recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
show me recipes posted in or after 2004 or in or after 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me recipes for at least two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what ingredients do recipes posted in 2004 call for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
name the ingredient not required in rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
what is a recipe from the same cuisine as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
which recipes were posted when rice pudding was posted	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what recipes posted in 2004 require milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what meal is a recipe that requires milk for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
show me recipes that take as long to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe was posted the same day as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )	overnight-recipes
which recipes are for two meals at most	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what recipes posting date is greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
find the recipes for same cuisine as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
what kind of cuisine is rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
what ingredient is used only in a single recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe was posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
recipes posted till rice pudding is posted	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipes posted 2004 and earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
find a meal recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes whose preparation time is a most the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me meals with the least recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
how many ingredients are used	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that have a preparation time less than the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe was posted before rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
when was rice pudding posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
recipes for least number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes for fewer than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what is a recipe whose cooking time is the same as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
show recipes posted in 2004 and has milk as one of its ingredients	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what recipe has the shortest cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
meal with milk recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
which recipe can be prepared at the earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
a lunch recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what lunch recipes contain milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show me meals including rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
which recipe is prepared using the same amount of time as that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
list recipes that require milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what recipe was posted no later than 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
recipe for three or more meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what ingredient is in over two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes take as long as prepare rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
find two meal recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe has two or less types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
recipe requires less than three ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe takes longer to prep than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes that were posted later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes with a preparation time equal to the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
find recipes posted later than 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me recipes that have the same preparation time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
show me recipe requiring milk posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
recipes posted after 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
quiche or rice pudding	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )	overnight-recipes
show me recipes that follows two or more cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-recipes
show me recipes that whose preparation time is shorter than rice puddings cooking time	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipes have the same or longer preparation time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what other ingredients do recipes that use milk require	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )	overnight-recipes
what recipe is used in the greatest number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-recipes
which recipe takes the longest to prepare	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
show me recipes for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show me meals with more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes have at most two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
show me recipes with two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
a recipe that posted after 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
show me ingredients required for two recipes at most	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is a meal with a recipe posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
recipes that require lesser time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
find me all recipes that require milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
which recipes were posted in 2004 for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what is a recipe that takes at least as long to make as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipe was posted the latest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what is a recipe which was posted no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
how many total ingredients are used in all the recipes	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipe takes the least amount of time to prepare	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
what recipe calls for either milk or spinach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )	overnight-recipes
what ingredient is called for by the most recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe is cooked faster than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
show me meals with the most recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me meals with at least two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
find recipes that can be used for  more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
recipes posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show recipes for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.concat en.meal.lunch en.meal.dinner ) ) )	overnight-recipes
what is an ingredient found in a lunch recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
which recipes were posted up to 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what recipes cooking time is at lowest that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe was posted before 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what recipe requires highest number of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
this receipe requires more than two ingredient	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipes require one or two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipes require at most two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
recipe whose posting date is at least rice puddings posting date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what recipe can make fewer than two types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-recipes
which recipes were posted at the same time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )	overnight-recipes
what ingredients are required in two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipes have less than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-recipes
what recipes cooking time is lower than the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipe can be used for two or more meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
preparation time of recipe  not more than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipes take more time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipes have a preparation time as long as the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
what is a recipe with the most ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-recipes
what ingredients are used in rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
show me ingredients required by recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what recipe takes the longest to cook	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )	overnight-recipes
what recipe do you cook for less time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe takes equal or less time to cook than rice pudding takes to prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show ingredients for lunch recipes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
how many meals does this make	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes with cooking time less than the preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes that have shorter cooking times than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipes posting date is in 2004 and what ingredients does it require	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what recipes require milk and are for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what recipe is prepared in preparation time of rice pudding or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me meals for one	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes posted in or before 2004 or in or before 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
what meal is rice pudding or quiche in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
show me recipes that fall under the same cuisine as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
is the recipe for lunch or dinner	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )	overnight-recipes
recipes for two meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
for which meal is rice pudding or quiche had	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
show recipes with one cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
what recipe posted in 2004 calls for milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
list  the ingredients of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
which recipe was posted first	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what recipe is for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipes posting date is no greater than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipes with a cooking time equal to the preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
what recipe requires more prep time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
which recipes take less or as long to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipe is for less than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show recipes that requires at most the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
recipe with posting date 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
a recipe with milk posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
which recipes are not for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
how many total recipes are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe has the most types of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-recipes
what recipes take the same amount of time or less to cook as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which meal has least number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which lunch recipe requires milk for its preparation	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what recipe is not for a lunch meal	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
find recipes that need two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipe has the shortest ingredient list	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that need milk and were posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what is a cuisine of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )	overnight-recipes
show me recipes with a cooking time greater or equal to the preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me a meal that has more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
name lunch recipes	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show me recipes posted before rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
which recipe is found in only one cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-recipes
show me recipes with fewer than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-recipes
ingredients not required to prepare rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
what is a recipe from no more than two different cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
what recipe is for two or fewer meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
recipes posted before rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
what recipe can make the most meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe can you prep in the same or more time as it takes to cook rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
list the lunch recipes contains milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what recipe can you prep in the same or longer amount of time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what recipes are for the same meal as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
recipes posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
which meal has the least number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me meal with less than two recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
find a lunch recipe that was posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
show recipes posted on the same date as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )	overnight-recipes
what recipe posted in 2004 can make a lunch meal	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
show me recipes posted on the same day as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) )	overnight-recipes
which recipes require two or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show recipes that has milk as its ingredient	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
which recipes were posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what recipe can be prepped in equal or less time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what is the number of ingredients for that recipe	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what is a meal with rice pudding as a dish	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipes require milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what is an ingredient required by the most recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe needs longer preparation time than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
average cooking time	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
what recipes have the same or less preparation time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes posted the same day as rice pudding or after	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
name a recipe with a prep time no longer than the cook time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
when is rice pudding recipe posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
a recipe which posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
how long does the recipe take to cook	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
find recipes that can be prepared sooner than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
recipes that have cooking time less than cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe makes the fewest meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that require milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what recipes require the same ingredients as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
recipes posted in 2004 and later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
which is the recipe that was posted last	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what lunch recipes posting date is 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what recipes were posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what recipes were posted after rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me ingredients required for fewer than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe requires two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what is a meal with no more than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe has the least number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe was posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes posted in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
how many ingredients are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
recipe in least cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-recipes
what are the ingredients of rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
find a recipe that is not suitable for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
which recipe falls under the most kinds of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-recipes
find a recipe for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show me recipes not posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
which recipe posted in 2004 needs milk for preparation	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
for what meals require less than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show me recipes with cooking times equal to cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )	overnight-recipes
single ingredient recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe was posted in either 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-recipes
show me recipes requiring the fewest ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what recipe has the fewest amount of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me meals with two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which recipe was posted the earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
what recipe is for two	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
which ingredient is needed by rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
recipe whose cooking time is not more than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe prepare in less or same time to cook rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what ingredients are not in the rice pudding recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
tell me ingredients of rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
which meal had two recipes or more	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe is found in two different meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what ingredients are in rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
show me recipes that need milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )	overnight-recipes
what meal is rice pudding not used for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipe takes more time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what ingredients does quiche or rice pudding require	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
how many total recipes are listed	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe was posted after or on the same day as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
show me recipes that take the same amount of time or more to cook as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
which recipes were posted before 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
find the recipes for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )	overnight-recipes
show me recipes that use less than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that require two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
what ingredients do lunch recipes need	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )	overnight-recipes
show me recipes that involve two or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes requiring milk or spinach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )	overnight-recipes
either lunch or dinner	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )	overnight-recipes
which recipe requires milk or spinach	( call SW.listValue ( call SW.concat en.ingredient.milk en.ingredient.spinach ) )	overnight-recipes
how many recipes are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is a meal for which there are fewer than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipe cooks in more or the same time as rice pudding takes to prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
what is a meal that incorporates rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )	overnight-recipes
what recipe makes a non lunch meal	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
name a recipe which was posted on or later than the posting date of the rice pudding recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )	overnight-recipes
which recipe has the least preparation time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
recipe cooked in less time than rice pudding preparation	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
recipe of cuisine of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )	overnight-recipes
which meals are recipes posted in 2004 for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes designed for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that requires the most time to prepare the dish	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )	overnight-recipes
find recipes for all kinds of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that take less time to cook than it takes to prepare rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me recipes that were not posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
which recipes can be used for most number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
a recipe for a meal other than lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string ! = ) en.meal.lunch ) )	overnight-recipes
what recipes preparation time is no more than the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
show me meals with two or fewer recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what is a recipe from fewer than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-recipes
show me recipes that fall under two cuisines or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
which recipes require more than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
recipe with only one ingredient	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
which recipes require milk or spinach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )	overnight-recipes
what is the most commonly used ingredient	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what recipes posting date is in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what recipes cooking time is longer than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )	overnight-recipes
for what meals share two or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
what meal has at least two recipes for it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
which food item is needed in  two recipes or more	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
show recipes for the meal as the same for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ) )	overnight-recipes
show me recipes with cooking time equal to or greater than cooking time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )	overnight-recipes
what recipe has the latest date posted	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
which recipe needs a minimum of two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes that can be used for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
what recipe was posted last	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )	overnight-recipes
show me recipes posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-recipes
which  recipe takes as much time to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )	overnight-recipes
show me recipes for lunch or dinner	( call SW.listValue ( call SW.concat en.meal.lunch en.meal.dinner ) )	overnight-recipes
what is the preparation of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )	overnight-recipes
what is the cooking time of recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )	overnight-recipes
ingredient in rice pudding and quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )	overnight-recipes
what is a recipe posted later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
what meal has less than two recipes for it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )	overnight-recipes
when was the rice pudding recipe posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )	overnight-recipes
show me a recipe that has a posting date of at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-recipes
show me recipes good for at least two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )	overnight-recipes
show me recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
what recipe has at the most no more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-recipes
what recipe calls for two or less ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
find me the recipes need more than one ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )	overnight-recipes
show me recipes not posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-recipes
hotel which has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what cuisine is served by the fewest restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
list all restaurants that are either thai or italian	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )	overnight-restaurants
restaurant whose cuisine is thai and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )	overnight-restaurants
what restaurant a price rating greater than or equal to the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
what neighborhoods have restaurants that serve outdoors	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
what cuisine options are there among the kidfriendly restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
which threestar rated restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
the 3 star restaurant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurant has 3 or 2 menu items	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
restaurants in midtown west that serve thai food	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
thai restaurants that have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )	overnight-restaurants
restaurant in mid town west that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )	overnight-restaurants
what restaurant takes reservations and has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )	overnight-restaurants
what is the average star rating	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
a restaurant that has at least a two star rating and does takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what neighborhood has the most thai restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
what 3 star restaurant has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
great place for groups and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )	overnight-restaurants
what 2 dollar sign restaurant takes credit card	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )	overnight-restaurants
cuisine that is like thai cafe or pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what thai restaurants take reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )	overnight-restaurants
which meal does a thai cafe not serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurants rated more highly than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
cuisine that is cuisine of restaurant whose neighborhood is midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
what restaurant serves two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-restaurants
how many restaurants are there total	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
list all restaurants that have takeout and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )	overnight-restaurants
a fairly inexpensive thai cuisine can be purchased at this restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
thai restaurants rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
which restaurants have a 3 star rating and 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurant is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string groups ) ) )	overnight-restaurants
what 3 star restaurant offers delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurants has more than two meals on the menu	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
3 star rated restaurant that accepts reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )	overnight-restaurants
which restaurants in midtown west deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )	overnight-restaurants
a group friendly thai restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )	overnight-restaurants
restaurant in the area that has a 2 dollar sign price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
which restaurants have price ratings higher than two or three dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
restaurants that are good for children	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )	overnight-restaurants
list all restaurants with 3 or 5 star ratings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
which restaurants serve lunch and have an outdoor dining area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
a restaurant with waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )	overnight-restaurants
restaurant which has waiters	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )	overnight-restaurants
what restaurant takes credit cards and is kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )	overnight-restaurants
whats the star rating of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )	overnight-restaurants
what restaurants have outdoor seating and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )	overnight-restaurants
restaurants with a price rating higher than 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what restaurant is good for kids and offers outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )	overnight-restaurants
the restaurant that is midtown serves thai food	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what restaurants offer waiter service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )	overnight-restaurants
list all 3 star rated thai restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurant offers outdoor seating and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants with lunch and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )	overnight-restaurants
restaurants that take reservations and have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )	overnight-restaurants
a three star restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants that has more than one cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-restaurants
restaurant that is good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )	overnight-restaurants
hotel that serves the minimum number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant serves two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant whose star rating is star rating of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )	overnight-restaurants
which resturants have a price rating of at least two or three dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what restaurant serves the most meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
hotel that suits the tastes of kids and which is best for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )	overnight-restaurants
which restaurants have takeout and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )	overnight-restaurants
what thai restaurant takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants that have takeout and take reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )	overnight-restaurants
a delivering restaurant with waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )	overnight-restaurants
what is the total star rating of all restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
find a 3 star restaurant with waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants with 5 star and lower price ratings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
hotel with a thai or italian restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )	overnight-restaurants
list all 3 star restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurant serves the least amount of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant is in the least number of neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-restaurants
what meal is served by fewer than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which restaurants are good for groups and have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string outdoor ) ) )	overnight-restaurants
restaurant that has waiter service and whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what are the cuisines of all the 3 star rating restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
restaurants with a 2 dollar sign price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant whose star rating is 3 stars and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what midtown west restaurant offers reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurants that have waiters and are good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )	overnight-restaurants
which resturants with waiter service have delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )	overnight-restaurants
what is the average price rating of a restaurant	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
restaurant that has waiter service and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )	overnight-restaurants
family friendly restaurants where you can sit outside	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )	overnight-restaurants
what is the neighborhood with the most restaurants that are good for kids	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
what midtown west restaurant has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant that has delivery	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) )	overnight-restaurants
hotel in the area of midtown west which serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
which cuisines match that of the thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what is the cuisine of the restaurants with three star ratings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
list all restaurants that are at least 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
how many different kind of cuisines are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ) )	overnight-restaurants
what neighborhood is thai cafe located in	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )	overnight-restaurants
restaurant with two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs and also accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what meal does the waiter serve at the restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
what are some restaurants rated 3 dollar signs or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
find a restaurant with more than 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
what restaurant is open at lunch and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )	overnight-restaurants
restaurants price rated 2 dollar signs or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what restaurant has outdoor seating and has a price rating of the 2 dollar sign	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant whose star rating is larger than 3 stars or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
what restaurants accept credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )	overnight-restaurants
which neighborhood restaurant is good for a group of people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
restaurant that serves lunch and whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants rated less than 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
what restaurant offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )	overnight-restaurants
what 3 star restaurant offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which resturants take reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )	overnight-restaurants
which restaurants are kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )	overnight-restaurants
which restaurant is friendly towards children and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )	overnight-restaurants
what 2 dollar signs offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
find restaurant with waiter service that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )	overnight-restaurants
which resturants serve the least number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that has delivery and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants that take credit cards and are childfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )	overnight-restaurants
which hotel offers waiter service and outdoor seating facilities	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurant is good with groups and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
list all restaurants in midtown west 	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what restaurant has 3 stars and has a 2 menu	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
a restaurant around alot of neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )	overnight-restaurants
which 3 star restaurants have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants that have waiters and outdoor dining areas	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )	overnight-restaurants
what restaurants serve groups and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )	overnight-restaurants
restaurant that has the most number of neighborhood	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )	overnight-restaurants
cuisine that is cuisine of the least number of restaurant	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which restaurants accept credit cards and are good places to go with kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )	overnight-restaurants
what entrees does thai cafe offer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
find a restaurant with waiter service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )	overnight-restaurants
what 3 star rated restaurant has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant with at least a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what is the star rating of the restaurant	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
cuisine that is cuisine of restaurant that is good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
list all restaurants that are more expensive than 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what restaurant is good for kids and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )	overnight-restaurants
restaurants that take credit cards and serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what 3 star restaurants deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )	overnight-restaurants
what 3 star rated restaurant offers waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )	overnight-restaurants
restaurant that is good for groups and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )	overnight-restaurants
which restaurant offers the most variety of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-restaurants
no lunch restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )	overnight-restaurants
restaurant that offers reservation facility and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant that serves at most two meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what meal is good to be served for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
a restaurant that has a 4 star or higher rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
restaurant that has takeout and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )	overnight-restaurants
restaurants that serve the same type of food as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
restaurants with price ratings less than 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
restaurant that serves group meals	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
restaurants good for groups and kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )	overnight-restaurants
what restaurants received 3 stars and serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurant whose star rating is 3 stars and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )	overnight-restaurants
what is the phone number of the restaurant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants that deliver and have waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )	overnight-restaurants
restaurants whose ratings are 3 stars and that take reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )	overnight-restaurants
retaurant with less number of neighbourhood	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-restaurants
what neighborhood with the most restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
a restaurant in midtown west that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )	overnight-restaurants
what is better a 3 or a 5 star rating	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )	overnight-restaurants
family friendly restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant whose star rating is 3 stars or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )	overnight-restaurants
hotel  that that has the star rating of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
which resturants have a star rating smaller than 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
midtown west restaurant that is open for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurant offers takeout and has reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )	overnight-restaurants
what are some restaurants rated 2 dollar signs or more	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurant that is good for groups and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )	overnight-restaurants
which restaurants are rated the same or better than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
what restaurants take credit cards and offers waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )	overnight-restaurants
what cuisine is served at no more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurants have at least 30 or 40 reviews	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )	overnight-restaurants
restaurants with waiters and outdoor dining areas	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurant in midtown west has a rating of two dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what kind of meals do restaurants with waiter service serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
most expensive restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
what neighborhood has two or less restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant whose star rating is 3 stars and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )	overnight-restaurants
what meal does the restaurant with a 2 dollar price rating serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what restaurants have a rating better than 3 or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
what restaurants have both outdoor seating and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurants have the same price rating or better than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
name a restaurant that does not offer  thai food	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )	overnight-restaurants
what kind of meal do 3 star restaurants serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
how many neighborhoods are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )	overnight-restaurants
list all restaurants similar to the cuisine of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )	overnight-restaurants
what are some thai restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurant offers takeout and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )	overnight-restaurants
restaurants in the 2 or 3 dollar sign price range	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )	overnight-restaurants
which restaurants have the same star rating as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )	overnight-restaurants
which restaurants serve two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what cuisine has the most restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
how many neighboords are there that have restaurants	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ) )	overnight-restaurants
find all thai restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
find a restaurant with a price rating equal or less than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurants with waiters that have a price rating of 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )	overnight-restaurants
what is a 3 star restaurant that is kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants that are more expensive than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurant that has delivery services	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
2 dollar signed rated restaurants for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurant is open for lunch and contains outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
hotel that can be booked in advance which has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
which thai restaurant has a 2dollarsign rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
which hotel offers delivery services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )	overnight-restaurants
which restaurants have takeout and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )	overnight-restaurants
hotel which has a minimum of 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
what restaurants have outdoor dining and are childfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )	overnight-restaurants
what is the best restaurant for big groups in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )	overnight-restaurants
what good kids restaurant is in the midtown west area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what meal does the midtown west restaurant serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
cuisine that is cuisine of thai cafe and that is cuisine of thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
family friendly restaurants that have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )	overnight-restaurants
what cuisines are offered by 3 star restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )	overnight-restaurants
which restaurants have outdoor seating and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )	overnight-restaurants
5 stars or 3 stars	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )	overnight-restaurants
what kind of meals do 2 dollar signs rated restaurants serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
total star rating of restaurant	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
which thai restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what neighborhood has no more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what is a meal served by the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurants rated higher than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
which resturants serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurant is kid friendly and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )	overnight-restaurants
what restaurant has more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-restaurants
which restaurants have waiters and a price rating of two dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants where you can sit outside	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants that deliver and are open for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )	overnight-restaurants
restaurant with takeout in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what neighborhood has fewer than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant is good for groups and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )	overnight-restaurants
what restaurant can i make reservations at that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )	overnight-restaurants
what is the average price rating of a restaurant	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
what neighborhood contains two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant offers reservations and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )	overnight-restaurants
what restaurants are good for kids and serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants good for kids and has waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string waiter ) ) )	overnight-restaurants
restaurants in the 2 dollar sign price category that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )	overnight-restaurants
thai restaurant which has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )	overnight-restaurants
a restaurant rated 2 dollar signs for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what cuisine is at at least two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which hotel has outdoor seating facilities and offers delivery services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants that are good for groups and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )	overnight-restaurants
what restaurants have takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )	overnight-restaurants
cuisine in at least 2 restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
midtown west restaurant for many people	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )	overnight-restaurants
restaurant whose star rating is at least 3 stars or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
thai restaurants that accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant that has waiter service and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )	overnight-restaurants
what is meal served in at least two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with 2 dollar sign rating in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
3 star restaurants that take groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants in midtown west that have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )	overnight-restaurants
restaurants with a smaller star rating than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
which restaurants in midtown west accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurants in the same neighborhood as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant that has waiter service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
restaurant that has delivery and whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what midtown west west restaurant is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
which restaurant has waiter service and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that takes reservations and that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants in the midtown west neighborhood with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )	overnight-restaurants
restaurant that has the least number of neighborhood	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-restaurants
restaurants that deliver and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )	overnight-restaurants
cuisine that is cuisine of restaurant that takes reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
what are the hotels found in midtown west or chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )	overnight-restaurants
restaurants with the same price rating as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )	overnight-restaurants
restaurant that has less than two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-restaurants
restaurants with price rating above 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
a restaurant rated at least 3 stars that delivers	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )	overnight-restaurants
average star rating of restaurant	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
what is the cuisine of restaurants that have waiters	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
which hotel has the highest star rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
what is the priuce rating of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )	overnight-restaurants
which restaurant s cuisine has 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
what restaurants offer lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants with the same or lower price rating as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurants with waiter service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
restaurants that have outdoor seating and serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
midtown west neighborhood restaurant with 3 star ratings	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurant that is good for kids and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )	overnight-restaurants
thai restaurant which provides outdoor seating facilities	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
which restaurants accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )	overnight-restaurants
which neighborhoods have 3 star restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
find a good kids restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )	overnight-restaurants
what 2 dollar signs restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurants have a price rating of two dollar signs and also accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )	overnight-restaurants
what neighborhood contains restaurants that offer delivery	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
restaurants with waiter service and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant offers lunch and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )	overnight-restaurants
cheapest restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
restaurant that takes credit cards and whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants that have outdoor seating and are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )	overnight-restaurants
which restaurant in midtown west has a 3star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what is a meal served by a restaurant that accommodates groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
restaurants that take credit cards and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )	overnight-restaurants
what cuisine options are there among group friendly restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
restaurants that offer takeout and accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )	overnight-restaurants
which restaurant takes reservations and is suitable for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )	overnight-restaurants
thai restaurants with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurant offers a waiter service and is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )	overnight-restaurants
what restaurant has the largest menu	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that has waiter service and whose neighborhood is midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what thai restaurant has lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
a restaurant with delivery for a large group	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )	overnight-restaurants
what cuisine type is most common	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
find a restaurant with outdoor seating that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )	overnight-restaurants
what meal is good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
open for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
which restaurants take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string credit ) ) )	overnight-restaurants
restaurants with two neighborhood locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-restaurants
restaurant that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )	overnight-restaurants
what restaurants offer waiter serivce	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
hotel that has the minimum star rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
what is a meal served by no more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant whose star rating is at most star rating of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
what are some restaurants rated at most 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
which resturants serve lunch and are good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )	overnight-restaurants
thai restaurants with 3star ratings	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what kind of restaurant serves the same food as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
restaurants with waiter service and outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )	overnight-restaurants
what meal is served at a restaurant with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
30 reviews or 40 reviews	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )	overnight-restaurants
meal that more than two restaurant serves	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with similar food to thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )	overnight-restaurants
which restaurants have a 2 dollar sign price rating and outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants in midtown west that offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )	overnight-restaurants
thai restaurants in the midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
list all thai restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant that takes credit cards and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what meals are served by more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which thai resturants serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what cuisine does the thai cafe not have	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what meal is served in at least 2 restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what midtown west restaurant offers outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )	overnight-restaurants
what neighborhood has less than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which neighborhoods have restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
what restaurants have outdoor seating that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )	overnight-restaurants
what thai restaurant has a good star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )	overnight-restaurants
3 stars restaurant which offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurant takes resverations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )	overnight-restaurants
find a thai restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants with outdoor seating that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )	overnight-restaurants
what is a meal served by a restaurant that accepts reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
restaurants that has a larger price rating than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurant in the  area around midtown west that offers delivery services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
name athai restaurant or cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )	overnight-restaurants
three star rated restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what neighborhood contain the most restaurants that have waiter service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
restaurant not in the midtown west area	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant that is good for kids and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )	overnight-restaurants
what restaurant has 3 stars and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
list all restaurants offering takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant has outdoor seating and a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )	overnight-restaurants
what 2 dollar sign restaurant contains takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants that have the same meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which restaurant has a three star rating and also takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
which neighborhoods have thai restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
what is the number of this meal	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
hotel which has a price rating of 2 dollar signs or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )	overnight-restaurants
restaurants with 2 and lower price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurants that are good for children and have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )	overnight-restaurants
number of restaurant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
thai cuisine restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
restaurant that has the  take out facility and has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )	overnight-restaurants
list all thai restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what is a meal served by a restaurant that has takeout service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
what restaurants have takeout and are kidfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )	overnight-restaurants
kid friendly restaurant with a price equal to 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
at least 3 star restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
restaurants located in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what is a meal from a restaurant with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
thai restaurant that delievers	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what are some cuisines offered by more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants that have takeout and deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )	overnight-restaurants
what meal does the restaurant deliver	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
list all restaurants that serves less than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
three star restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what is the price rating of the thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )	overnight-restaurants
name a restaurant in mid town that accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )	overnight-restaurants
restaurants that deliver and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )	overnight-restaurants
restaurants called thai cafe or pizzeria juno	( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )	overnight-restaurants
restaurants in midtown west with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )	overnight-restaurants
restaurants that have at least two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-restaurants
what restaurant is kid friendly and has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )	overnight-restaurants
what good group restaurant takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )	overnight-restaurants
what 2 dollar signs restaurant takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurant can you eat lunch outside at	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which thai resturants have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
family friendly thai restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )	overnight-restaurants
what restaurants offer lunch and is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )	overnight-restaurants
a thai restaurant that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )	overnight-restaurants
what kind of restaurant is good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
restaurant that is good for groups and whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
hotel that has outdoor seating  facilities and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurants offer reservations and also have carryout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )	overnight-restaurants
what kind of meal does thai cafe not serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
a group friendly restaurant with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )	overnight-restaurants
what cuisine is served in two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which restaurants have a price rating of 2 to3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what thai restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )	overnight-restaurants
find 3 star or 5 star restaurant	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )	overnight-restaurants
thai cuisine restaurant with 3 star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurant has the smallest number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-restaurants
thai cuisine restaurant which serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants with a common meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant serves cuisine and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
what is the star rating of the thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )	overnight-restaurants
which neighborhoods have restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
find a thai restaurant with a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurant offers delivery and has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )	overnight-restaurants
what restaurant has delivery and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )	overnight-restaurants
cuisine like thai cafe pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what types of cuisine are there at resturants with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
name a restaurant found in at least two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )	overnight-restaurants
which resturant serves lunch and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )	overnight-restaurants
which 3 star restaurants have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
hotel in midtown west that can be booked in advance	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
neighborhood that is neighborhood of thai cafe and that is neighborhood of thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what neighborhood has restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
what restaurant takes reservations and is kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )	overnight-restaurants
what neighborhood has the least amount of restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what is the price rating of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )	overnight-restaurants
restaurant that serves lunch in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
delivery is avaiable	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) )	overnight-restaurants
restaurants that accept credit cards and serve outdoors	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )	overnight-restaurants
thai restaurants rated 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
cuisine like that of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurants that have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
restaurants that have delivery and take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )	overnight-restaurants
what is the star rating of the thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )	overnight-restaurants
restaurants that take credit cards with a price rating of 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
thai restaurant in mid town west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants with delivery for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurant offers only one cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-restaurants
restaurants with takeout for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )	overnight-restaurants
what resturant has outdoor seating and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )	overnight-restaurants
restaurants rated with 3 to 5 stars	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )	overnight-restaurants
what is a meal served at the thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurant in midtown west for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant that serves lunch and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant with no more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
thai restaurants that have outdoor dining areas	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )	overnight-restaurants
restaurants situated between neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-restaurants
restaurant in midtown west  which is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )	overnight-restaurants
restaurants with more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
which thai restaurants take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )	overnight-restaurants
find a restaurant i can get reservations at that has a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurant offers lunch and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants with 2 price rating that is groupfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants with 2 dollar sign rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
which neighborhood is not where that cafe is located	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what is a 3 star restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants rated 3 stars with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants in the neighborhoods that contain thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
what good kids restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )	overnight-restaurants
what neighborhood has a restaurant that contains outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
which restaurants have waiters and accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string reserve ) ) )	overnight-restaurants
which restaurant serves this cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with outdoor seating and a  price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurant has 2 or greater dollar signs as its price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurant with takeout service that accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )	overnight-restaurants
list all restaurants that have ratings above 2 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what neighborhood has restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
restaurant that does delivery and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )	overnight-restaurants
find a restaurant in the same neighborhood as the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
what restaurant serves lunch to groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )	overnight-restaurants
which restaurants that have waiters take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )	overnight-restaurants
groupfriendly restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant whose price rating is larger than 2 dollar signs or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what 2 dollar signs restaurant offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
which neighborhood resturant has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
which resturants serve lunch and have waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )	overnight-restaurants
restaurant that is good for groups and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )	overnight-restaurants
which restaurants serve less than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what thai restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant that is good for groups and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that serves two meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that is rated 3 to 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
restaurants in midtown west with waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )	overnight-restaurants
list all thai or italian restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )	overnight-restaurants
a kid friendly restaurant for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what 3 star restaurant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )	overnight-restaurants
what restaurant offers delivery and takes credit card	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurant has a 2 dollar price rating and outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants that is in the least numbers of neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-restaurants
find a good group restaurant with takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )	overnight-restaurants
which restaurant welcomes children and has outdoor seats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )	overnight-restaurants
what thai restaurant has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant that takes reservations and that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )	overnight-restaurants
restaurants with a 3 or 5 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )	overnight-restaurants
what are the types of cuisine available in the midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
restaurants that have waiters and have 2 dollar sign price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )	overnight-restaurants
restaurant that has less than two neighborhood	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-restaurants
restaurant that serves lunch and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )	overnight-restaurants
restaurants with at least 30 or 40 reviews	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )	overnight-restaurants
three star restaurants that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants with outdoor seating and is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )	overnight-restaurants
what is a meal that the thai cafe or pizzeria juno serves	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what restaurant offers reservations and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )	overnight-restaurants
what restaurants offer waiter service and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )	overnight-restaurants
restaurants with delivery in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )	overnight-restaurants
restaurant whose star rating is larger than star rating of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
restaurants accepting reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that has waiter service and that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )	overnight-restaurants
which restaurants with a 2 dollar price rating offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant whose star rating is smaller than 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
what meal does the 3 star restaurant serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
restaurants in midtown west with outdoor dining areas	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what restaurant has 2 menu items and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )	overnight-restaurants
what restaurant with a price rating of two dollar signs is a good place for a group	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
neighborhood with the least number of restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
the restaurant serves lunch as well as thai food	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
a 3 star restaurant that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )	overnight-restaurants
what restaurant is in two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-restaurants
chelsea or midtown west	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )	overnight-restaurants
which restaurant is good for a group and also has waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )	overnight-restaurants
what meal can you get at either the thai cafe or at pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what is the total price rating of all the restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
restaurants that serve same meals as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
what restaurant offers outdoor seating and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )	overnight-restaurants
what restaurant is in over two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )	overnight-restaurants
restaurants that can be booked in advance and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )	overnight-restaurants
what cuisine takes credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
restaurant that does not have a three star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurants take credit cards and have outdoor settings	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )	overnight-restaurants
what resturant is good for kids and has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )	overnight-restaurants
which restaurant appeals to kids and is good for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )	overnight-restaurants
restaurant whose star rating is 3 stars and whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
total price rating of restaurant	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
what kind of meals does thai cafe serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
find a good group restaurant with waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )	overnight-restaurants
restaurant that has the most number of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-restaurants
what is the eighborhood  of the takeout restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
restaurants with reservations and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what 3 star restaurants accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )	overnight-restaurants
which thai restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants that have takeout that are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )	overnight-restaurants
which restaurants serve the least number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that has outdoor seating and whose neighborhood is midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what restaurant is good for groups and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )	overnight-restaurants
find a takeout restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant has less than 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
restaurant in midtown west that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
hotel that offers lunch and best for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )	overnight-restaurants
what is the most expensive restaurant	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
what is the restaurant that does not serve lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )	overnight-restaurants
restaurant that has takeout and that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )	overnight-restaurants
restaurants serving lunch that accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants in midtown west with an outdoor dining area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )	overnight-restaurants
3star restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurant whose price rating is at least 2 dollar signs or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what are some 3 star thai restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
which restaurant both has outdoor seating and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )	overnight-restaurants
groupfriendly thai restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants that are in the neighborhood of midtown west and have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )	overnight-restaurants
restaurants with 2 stars or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
what restaurant is amenable to children and has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )	overnight-restaurants
list all restaurants that is cheaper than 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what restaurant only serves two or less meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that has takeout and that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which restaurant has waiters and also offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )	overnight-restaurants
what is the neighborhood of the thai restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
list all restaurants that are not similar to thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what restaurant has outdoor seating and offers waiter service service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )	overnight-restaurants
restaurants serving fewer than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
3 star restraunts and under	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
restaurant with waiter service and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )	overnight-restaurants
find a restaurant that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )	overnight-restaurants
what restaurants with 2 price rating also have waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )	overnight-restaurants
what restaurant is good for kids and groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )	overnight-restaurants
what restaurant takes credit cards in midtown west area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what 2 dollar signs restaurants are in the neighbor of midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurants in midtown west that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
highest star rated restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
list all 2 dollar signs restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
a thai or italian restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )	overnight-restaurants
what restaurants serve at least two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that is good for groups and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
italian or thai	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )	overnight-restaurants
cuisine that is cuisine of restaurant whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
restaurants with takeout and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )	overnight-restaurants
hotel that has more than a three star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
thai cafe or pizzeria juno	( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )	overnight-restaurants
restaurant that takes reservations and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )	overnight-restaurants
thai restaurants with takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )	overnight-restaurants
restaurants which take reservations and are rated 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )	overnight-restaurants
what same meals do all the other restaurants serve	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant offers an outdoot and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )	overnight-restaurants
what is a meal served at a threestar rated restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
what restaurant can i eat lunch and pay with a credit card	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
thai restaurants that are kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant whose cuisine is thai and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )	overnight-restaurants
what 2 dollar signs restaurant offers delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants that offer credit cards and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant is good for groups and kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )	overnight-restaurants
what thai restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )	overnight-restaurants
restaurants rated 2 dollar signs that take reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurant can be found in only two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
what places serve food that is not thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what 2 dollar signs restaurant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )	overnight-restaurants
groupfriendly restaurants that are rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )	overnight-restaurants
what meals does thai cafe serve	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what cuisine does the midtown west restaurant have	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
what restaurants are good for groups and accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )	overnight-restaurants
what restaurant has two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant has takeout and a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )	overnight-restaurants
find a thai or italian restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )	overnight-restaurants
what thai restaurant offers delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurant serves lunch and offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )	overnight-restaurants
a thai restaurant in the midtown neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant whose price rating is price rating of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )	overnight-restaurants
restaurant for lunch rated 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
groupfriendly restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )	overnight-restaurants
restaurant that is good for groups and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurant delivers and has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )	overnight-restaurants
restaurant that delivers and is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )	overnight-restaurants
restaurant that is good for kids and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what is the number of restaurants	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what are the neighborhoods of restaurants that take reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
what is the average star rating of all restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
three star restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants with delivery rated 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )	overnight-restaurants
which restaurants are rated between 3 and 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
name a hotel which has a three star rating and good for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )	overnight-restaurants
what restaurant has reservations and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )	overnight-restaurants
what good kids restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string kids ) ) )	overnight-restaurants
what restaurants have less than a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )	overnight-restaurants
what meal is served in the most restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that is good for groups and that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurant offers takeout and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )	overnight-restaurants
groupfriendly restaurants that accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )	overnight-restaurants
which restaurant in midtown west has outdoor seating available	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurants that serve the same cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what midtown west restaurants have a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what is the price rating of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )	overnight-restaurants
cuisine that is cuisine of restaurant that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
what neighborhood has the least restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurants accommodate groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )	overnight-restaurants
restaurant that is near to thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) ) )	overnight-restaurants
what kind of restaurant offers outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
what restaurants serve at least two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-restaurants
a neighborhood similar to thai cafes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what restaurant has over two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-restaurants
what restaurant has less than a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
a restaurant with alot of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what meal does the restaurant serve for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
find a thai restaurant with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant that has waiter service and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )	overnight-restaurants
what restaurant is good for groups and has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string groups ) ) )	overnight-restaurants
restaurants with food not like thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what are some restaurants serving any cuisine except thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )	overnight-restaurants
what midtown west restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )	overnight-restaurants
what cuisine is shown in only two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what cuisine is present at more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant with a price rating equal to thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )	overnight-restaurants
neighborhood with restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
what is the cuisine of the restaurant that has group dining	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
restaurants with no more than 2 locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
has a 2 or 3 dollar sign rating	( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )	overnight-restaurants
find a 3 star restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
which restaurants take credit and can accommodate a group	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )	overnight-restaurants
what is the neighborhood of the restaurant that has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurants in midtown west that have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string takeout ) ) )	overnight-restaurants
hotel which has a higher star rating than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
name some thai restaurants meant for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
which restaurant offers the fewest types of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-restaurants
what restaurant serves the same food as the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
what kind of meals are served in the restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
what cuisines are offered by restaurants that have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
what meal does the thai restaurant serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
moderately priced restaurants that have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurants deliver that serve food good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )	overnight-restaurants
restaurants for lunch for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
meal not served by thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurants location	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )	overnight-restaurants
restaurants at least with a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
a group friendly restaurant that is medium priced	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )	overnight-restaurants
which 3star restaurant has takeout service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )	overnight-restaurants
what neighborhood has the most restaurants that are good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
what is a meal served by a restaurant that accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
which restaurants have waiters and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )	overnight-restaurants
the three star restaurant has takeout food	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurants are both good for groups and kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )	overnight-restaurants
the 3 star restaurant is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants that have outdoor seating and that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string delivery ) ) )	overnight-restaurants
restaurants that accept credit cards and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )	overnight-restaurants
which restaurant has a price rating of two dollar signs and has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants that take reservations and are good for children	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )	overnight-restaurants
list all restaurants that have at least 3 star or 5 star ratings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )	overnight-restaurants
what is a meal that a restaurant that is open for lunch serves	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
restaurants for groups with delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )	overnight-restaurants
what cuisines are offered by restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
what neighborhood is the thai cafe in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurants open for at least two meals per day	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
thai restaurant that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )	overnight-restaurants
three star restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )	overnight-restaurants
restaurant that delivers and offers outside seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )	overnight-restaurants
what cuisine does the restaurant with reservations have	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
restaurant that has outdoor seating and whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what resturants take credit cards and have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )	overnight-restaurants
what 3star restaurants also have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )	overnight-restaurants
find a 3 or fewer star restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
restaurants open for lunch that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurants offer waiter service and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )	overnight-restaurants
restaurants that are good for children and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )	overnight-restaurants
which restaurant has a price rating of two dollar signs and has waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )	overnight-restaurants
the thai restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )	overnight-restaurants
which restaurants accept credit cards for payment and also have takeout service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )	overnight-restaurants
a kid friendly restaurant with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants rated 3 stars in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
which restaurant is good for group dining	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
what takeout restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )	overnight-restaurants
a restaurant that does not serve thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )	overnight-restaurants
what is the cuisine of the most restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that serves unique meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants that deliver and serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
area that has the minimum number of restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which neighborhoods is thai cafe not in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what neighborhoods have at least two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants in the midtown west neighborhood that have a 2 dollar sign price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants with at least 3 stars rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
restaurant that is good for kids and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )	overnight-restaurants
restaurants with 2 price rating that serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what cuisines are offered by more than one restaurant	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants rated with 3 stars and have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )	overnight-restaurants
which restaurants serve lunch and have a 2 dollar sign price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what kind of cuisine is found at the restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
restaurants that are good for group dining and that can be booked in advance	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )	overnight-restaurants
what are some restaurants that doesnt serve thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )	overnight-restaurants
which restaurant has the lowest star rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
thai restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )	overnight-restaurants
what is the cuisine of most restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what 3 star restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurants have more than two kinds of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-restaurants
what is the total star rating of all restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
which neighborhood has restaurants that offer outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
what is a meal served by a restaurant in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
restaurant that serves lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )	overnight-restaurants
which restaurants have price ratings above or below two dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant that takes credit cards and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string takeout ) ) )	overnight-restaurants
what resturant is good for kids and groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )	overnight-restaurants
what restaurant serves more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )	overnight-restaurants
what good kids restaurants serve thai cuisine	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants with takeout and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )	overnight-restaurants
which restaurants are rated the same or below thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
what midtown west restaurant takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string reserve ) ) )	overnight-restaurants
what neighborhood contains restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
restaurants that are kid friendly and inexpensive	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )	overnight-restaurants
what is the type of cuisine of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
this restaurant has the most amount of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurants that are near two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
hotel that has a price rating of 2 dollar signs and a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants found in less than two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-restaurants
which threestar rated restaurants are amenable to kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
name a restaurant in the neighbourhood of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
a lunch serving restaurant with take out	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which resturant has a smaller star rating than thia cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
which restaurants are rated under 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
which restaurant is the most highly rated	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
in which neighborhood is thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what resturant is not in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what restaurants are in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
a restaurant in west midtown or chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )	overnight-restaurants
which restaurants have the same star rating as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )	overnight-restaurants
restaurant whose cuisine is thai and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )	overnight-restaurants
thai restaurant with waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )	overnight-restaurants
thai cuisine restaurant that has a  price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
which resturants have at most two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
what restaurants have a rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurant that is around mid town west that offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant that has takeout and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )	overnight-restaurants
which restaurant has a 2dollarsigns price rating and takeout service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )	overnight-restaurants
restaurants that serve lunch and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )	overnight-restaurants
what restaurant is in multiple neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )	overnight-restaurants
restaurants that accepts reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
restaurant whose price rating is at most 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurants with outdoor dining area	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )	overnight-restaurants
kidfriendly restaurants that accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )	overnight-restaurants
hotel that offers delivery services and has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
which restaurant offers lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which resturant takes reservations and has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string waiter ) ) )	overnight-restaurants
what restaurant offers reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )	overnight-restaurants
what restaurant serves a meal similar to that found at the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
name a restaurant with a lower price rating than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurants serving the same cuisine as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )	overnight-restaurants
which restaurants take reservations and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )	overnight-restaurants
a reservation restaurant with meduim	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that is good for group dining and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
thai cafe with least price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurants that serve lunch and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )	overnight-restaurants
what cuisine is served by fewer than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant whose star rating is 3 stars and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that serves lunch and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )	overnight-restaurants
thai restaurants that are inexpensive	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants with takeout and waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )	overnight-restaurants
restaurants that serve good meals for kids	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
which restaurant accepts kids and offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )	overnight-restaurants
what midtown west restaurant can i get takeout from	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant that has outdoor seating and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants rated 3 stars that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what is a restaurant that is kidfriendly and has waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string waiter ) ) )	overnight-restaurants
what restaurant has the more cuisine then any other	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-restaurants
which resturants have takeout and a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )	overnight-restaurants
restaurant with outdoor seating that accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )	overnight-restaurants
what restaurant has the lower price rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
what restaurant is group friendly and takes a credit card	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )	overnight-restaurants
neighborhood of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )	overnight-restaurants
restaurants with a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants with waiters that offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )	overnight-restaurants
restaurant that has at least 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
hotel in the midtown west area which has outdoor seating facilities	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurants with 3star ratings that have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )	overnight-restaurants
restaurant that not serves lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )	overnight-restaurants
which restaurants with 3 stars takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )	overnight-restaurants
what restauarants are kid friendly and have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )	overnight-restaurants
which is the thai restaurant in this neighbourhood	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
what neighborhoods have kidfriendly restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
which neighborhood has two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with 3 and higher price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
find a 2 dollar price rating restaurant with delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what neighborhood only has one or two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
neighborhoods with more than 2 restauraunts	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which restaurant is not located in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what midtown west restaurant has lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurants that serves meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
a restaurant that is group friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string groups ) ) )	overnight-restaurants
whats a resturant thats good for groups and has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )	overnight-restaurants
list all restaurants in the neighborhood of midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what is a type of cuisine of two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with 3stars that take reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
which resturants have a price rating of at most two or three dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
which restaurant is good for a group of people and also serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
list 3 star restaurants by neighborhood	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
hotel that has waiter service  and take out facilities	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant serves at least two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-restaurants
which resturants have a star rating smaller than 3 or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
hotels that can be booked in advance and offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what is the average price rating of all restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
what restaurant offers reservations and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that takes reservations and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )	overnight-restaurants
neighbourhood restaurant that offers outdoor seating facilities	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
find a restaurant in a neighborhood	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-restaurants
restaurants that can be booked in advance and good for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )	overnight-restaurants
what restaurant has waiter service and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurant contains the most number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
thai restaurant that is good for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )	overnight-restaurants
what restaurant has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what is a meal that the thai cafe does not serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
which restaurant has a price rating no higher than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurants similar to restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
which resturants have a price rating the same as the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )	overnight-restaurants
what are some restaurants who are 4 stars or better	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
what restaurant has takeout and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what kind of meals are served by restaurants that take reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
restaurants with 2 or 3 price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )	overnight-restaurants
what is the price rating of the hotel	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
neighborhood that is neighborhood of thai cafe or pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what restaurants serve good food for groups and have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )	overnight-restaurants
a 3 star resturnt that has room for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )	overnight-restaurants
which restaurants serve lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )	overnight-restaurants
which neighborhood resturants have takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
what restaurant has a lower price rating than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
what are some 3 star restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which restaurant chain is found in the fewest neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-restaurants
restaurant that is at least 3 stars and kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs and that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string waiter ) ) )	overnight-restaurants
hotel which has a price rating of more than 2dollar or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what 3 star restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what neighborhood contains restaurants that offer lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
thai restaurant that offers waiter services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
which neighborhoods have the fewest restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string neighborhood ) ) )	overnight-restaurants
restaurant which serves lunch and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )	overnight-restaurants
what restaurant delivers and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string kids ) ) )	overnight-restaurants
which restaurants are good for groups and also deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )	overnight-restaurants
restaurant with a 2 or 3 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )	overnight-restaurants
restaurant that has takeout and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )	overnight-restaurants
what thai restaurant has the highest star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
which restaurant has takeout service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string takeout ) ) )	overnight-restaurants
restaurants with the lowest star rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
what is a meal that a restaurant with delivery service has	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
list the types of cuisine for restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
restaurant that has two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-restaurants
kidfriendly restaurants that are rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )	overnight-restaurants
find a 3 star restaurant that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what cuisine offers takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
restaurants with takeout that have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )	overnight-restaurants
restaurant that has waiter service and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )	overnight-restaurants
what restaurant offers delivery and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that has outdoor seating and that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string waiter ) ) )	overnight-restaurants
thai or italian restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.concat en.cuisine.thai en.cuisine.italian ) ) )	overnight-restaurants
restaurant that has takeout and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant that has at most two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
find a restaurant with less stars than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
the thai cafe is in which neighborhood	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )	overnight-restaurants
hotels that have a minimum  price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what restaurants serve lunch and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which restaurant not only serves lunch but has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )	overnight-restaurants
restaurants open for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants with outdoor seating and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )	overnight-restaurants
restaurants with takeout that are kidfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string kids ) ) )	overnight-restaurants
what good group restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )	overnight-restaurants
find a thai restaurant that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurants accept credit cards and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )	overnight-restaurants
midtown west neighborhood that also deliveries	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )	overnight-restaurants
which restaurants with outdoor dining areas accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )	overnight-restaurants
restaurant whose cuisine is cuisine that is cuisine of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
restaurant whose cuisine is thai and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurant takes reservations and offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that has the largest price rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
what are the cuisines of all the midtown west restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
what thai restaurants are kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )	overnight-restaurants
which restaurants serve lunch and accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string reserve ) ) )	overnight-restaurants
restaurants with multiple cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )	overnight-restaurants
hotel that does not have a	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant that has delivery and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string groups ) ) )	overnight-restaurants
what is the nature of the cuisine of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )	overnight-restaurants
restaurant that has delivery and that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what group restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )	overnight-restaurants
find a restaurant good for groups that has a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )	overnight-restaurants
what restaurant offers delivery and an outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string delivery ) ) )	overnight-restaurants
restaurant that has the least number of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )	overnight-restaurants
what midtown west restaurant offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurants that are deliver and are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string delivery ) ) )	overnight-restaurants
restaurants in the midtown west neighborhood that have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
which neighborhoods have restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
what are some kidfriendly restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )	overnight-restaurants
restaurants with a 2 or 3 dollar sign price rating	( call SW.listValue ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) )	overnight-restaurants
hotel that has a price rating or more than 2 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurant that is open for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what restaurants are located in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
what is a meal from a restaurant that is good for kids	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
what restaurant has two different cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
what thai restaurant has a star rating of 3 star	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurant that delivers and has an outdoor seating area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )	overnight-restaurants
a restaurant that has the highest star rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
what restaurants have at least 2 meals on the menu	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
the thai restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )	overnight-restaurants
what restaurants offer outdoor seating and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )	overnight-restaurants
a delivery restaurant with medium pricing	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )	overnight-restaurants
restaurant in the area of midtown west that is good for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )	overnight-restaurants
a thai cafe in the neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what restaurant has a star rating the same as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
which restaurants have outdoor seating and are group friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string outdoor ) ) )	overnight-restaurants
what neighborhoods have the most 3 star rated restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
what restaurants offer delivery and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
which restaurant is rated the most expensive	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
what restaurant takes reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )	overnight-restaurants
restaurant with delivery that has a 2 dollar sign rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants with the most locations in the area	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )	overnight-restaurants
what is the star rating of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )	overnight-restaurants
restaurants that serve less than one meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant whose star rating is 3 stars and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant serving lunch that can deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant that serves thai meal	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
a three star kid friendly restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )	overnight-restaurants
what restaurant can i get reservations and get delivery from	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )	overnight-restaurants
restaurants that have between 30 and 40 reviews	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )	overnight-restaurants
restaurants with no more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
restaurants that have takeout and are good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )	overnight-restaurants
restaurant that has takeout and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )	overnight-restaurants
cuisine that is cuisine of restaurant whose price rating is 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what thai restaurant offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what thai restaurants offer a waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
which thai restaurants have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
thai restaurants with optional outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )	overnight-restaurants
which hotel appeals to kids and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string credit ) ) )	overnight-restaurants
restaurant that takes credit cards and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )	overnight-restaurants
which thai restaurants take reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurant that takes reservations and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants that offer takeout and are price rated 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )	overnight-restaurants
which restaurant accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string credit ) ) )	overnight-restaurants
restaurant that has takeout and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )	overnight-restaurants
which restaurant has waiter and takeout service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )	overnight-restaurants
family friendly restaurants with price rating of two	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )	overnight-restaurants
what restaurant is good for groups and offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )	overnight-restaurants
what kind of cuisine has at least two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants in midtown west rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what restaurants have outdoor dining	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )	overnight-restaurants
restaurant that is open for lunch and dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )	overnight-restaurants
price rating of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )	overnight-restaurants
what restaurant is good for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )	overnight-restaurants
hotel that suits the taste of kids and offers delivery services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )	overnight-restaurants
which restaurants are in the price rating level of two dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what neighborhood contains at least two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which restaurant chain is found in the most neighborhoods	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string neighborhood ) ) )	overnight-restaurants
restaurant with outdoor dining area that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )	overnight-restaurants
restaurants with takeout that are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant takes group reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )	overnight-restaurants
thai cafe thats erves pizzeria	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
restaurant that is cheaper than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
what restaurants are not in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )	overnight-restaurants
a neighborhood with two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what neighborhood is home to the most restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant that has delivery	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
what restaurant takes reservations and has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )	overnight-restaurants
midtown west restaurants with 2 dollar signs price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
which restaurants serve at least two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
accepts reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string reserve ) ) )	overnight-restaurants
which resturant in midtown west has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what retaurant in midtown west have waiter services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
which restaurants are rated 3 or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )	overnight-restaurants
what neighborhoods have restaurants that are good for large parties	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
what restaurant has thai cuisine	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what restaurants serve the same cuisine as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
restaurants that accept reservations and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string reserve ) ) )	overnight-restaurants
what restaurant has takeout and waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )	overnight-restaurants
what meal can you get for take out at the restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
restaurants with the most options	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what neighborhood are the restaurants that are in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
restaurant which offer lunch and has a three star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants rated 3 stars with a 2 dollar sign price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurants take reservations and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )	overnight-restaurants
what thai restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )	overnight-restaurants
which neighboorhodd has the least number of resturants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what resturant takes credit cards and is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string groups ) ) )	overnight-restaurants
what restaurant in midtown west is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )	overnight-restaurants
what restaurant doesnt have a 2 dollar sign	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string delivery ) ) )	overnight-restaurants
a restaurant that offers lunch and delivery services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )	overnight-restaurants
which restaurant is located in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what is a good kids restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) )	overnight-restaurants
list by type of cuisine the restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
what restaurant has the lowest star rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )	overnight-restaurants
restaurants with 3 to 5 star ratings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
what restaurant offers lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant that is kidfriendly and has an outdoor dining area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurants have lower ratings that thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
the restaurant takes credit cards and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )	overnight-restaurants
find the type of food of all restaurants that take reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
what restaurant has takeout and a lunch menu	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )	overnight-restaurants
a take out restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )	overnight-restaurants
restaurant that has takeout and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )	overnight-restaurants
which resturants serve more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
what restaurants in midtown west serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
list all thai restaurants offering lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant that serves lunch and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
3 star restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string credit ) ) )	overnight-restaurants
what neighborhood is thai cafe or pizzeria juno in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what kind of cuisine offers lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
restaurant with two locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )	overnight-restaurants
meal that the most number of restaurant serves	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with a price rating larger than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
find a restaurant that has delivery as well as waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string delivery ) ) )	overnight-restaurants
restaurant in the midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
which restaurant has waiters and a star rating of three stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants with waiters that are good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string groups ) ) )	overnight-restaurants
cuisine that is cuisine of restaurant whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
which resturants are good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )	overnight-restaurants
what restaurant has at least a 2 or 3 dollar sign rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
which restaurant has fewer than 3 or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
restaurants that have outdoor seating and that offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )	overnight-restaurants
restaurant that has delivery and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )	overnight-restaurants
meals at restaurants that have waiters	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
list all restaurants that areworse than 3 or 5 star rated restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
restaurants that are not open for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )	overnight-restaurants
what neighborhood has a thai cafe or pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what restaurant is good for groups and takes credit card	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )	overnight-restaurants
what neighborhood contains the most restaurants that offer reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
meal that the least number of restaurant serves	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants has rating below 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
restaurant whose price rating is 2 dollar signs or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant that has takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
what restaurant takes credit card and is open for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string credit ) ) )	overnight-restaurants
restaurants rated 3 stars or higher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )	overnight-restaurants
what meals do lunch serving restaurants serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
what restaurant offers outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )	overnight-restaurants
hotel that can be booked in advance and which has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )	overnight-restaurants
a restaurant in a kid friendly neighborhood	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
thai restaurants that kids enjoy	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what 3 star restaurant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurants serves more than just one meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurant whose cuisine is thai and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )	overnight-restaurants
restaurants with the same or higher star rating as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
find a good kids restaurant with waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string waiter ) ) )	overnight-restaurants
restaurant that takes reservations and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )	overnight-restaurants
which restaurants have a price rating of two dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
which thai restaurants offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
which hotel is entertaining for kids	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) )	overnight-restaurants
which restaurants in midtown west have a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurants that take credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )	overnight-restaurants
what thai restaurant offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )	overnight-restaurants
list all restaurants that have the same or better price rating than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
which resturants have a price less than or equal to thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurants that have waiters and take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )	overnight-restaurants
thai restaurant cuisine	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
what restaurant has the highest price rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
a thai restaurant for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string kids ) ) )	overnight-restaurants
neighborhood that is neighborhood of the most number of restaurant	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with a 2 dollar sign rating that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what meal can you get at the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurant whose cuisine is cuisine of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )	overnight-restaurants
a restaurant as good as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) )	overnight-restaurants
restaurants with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )	overnight-restaurants
restaurant that has delivery and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )	overnight-restaurants
meals that few restaurants serve	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meals ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what cuisine is good for groups at a restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
what is a good meal served by a restaurant that accommodates children	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
restaurant that has delivery and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )	overnight-restaurants
restaurant that takes credit cards and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )	overnight-restaurants
restaurants with dollar ratings less than 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
thai restaurants that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants that take credit cards and have waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )	overnight-restaurants
restaurants with between 30 and 40 reviews	( call SW.listValue ( call SW.concat ( number 30 en.review ) ( number 40 en.review ) ) )	overnight-restaurants
which restaurant that welcomes kids offers lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )	overnight-restaurants
3 star restaurants which have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )	overnight-restaurants
a midtown west resturant that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
which restaurants have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) )	overnight-restaurants
what good kids restaurant has a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
restaurant with takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
what cuisine does a 2 dollar sign price rating restaurant have	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
which restaurants are group friendly and have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string groups ) ) )	overnight-restaurants
restaurants with price ratings between 2 and 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
restaurants whose price rating is similar to that of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
restaurant that has outdoor seating and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )	overnight-restaurants
a good thai resturant with room for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )	overnight-restaurants
restaurants that are in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
restaurants that serve lunch and have a price rating of 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what is the cuisine of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )	overnight-restaurants
what restaurant does not offer lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )	overnight-restaurants
neighborhood that is neighborhood of more than two restaurant	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurant whose price rating is smaller than 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
which neighborhoods have more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what restaurant has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string delivery ) ) )	overnight-restaurants
what restaurant offers lunch and is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
meal served by a restaurant that delivers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
a three star restaurant thats mid priced	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what 3 star restaurants have a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurant that has delivery and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )	overnight-restaurants
restaurant that serves lunch and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )	overnight-restaurants
restaurants with 2 price rating that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )	overnight-restaurants
a reservation restaurant that is kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )	overnight-restaurants
3 star rated restaurants for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )	overnight-restaurants
find a thai restaurant in the midtown west area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants that are in two neighborhoods at least	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )	overnight-restaurants
neighborhood that is neighborhood of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
family friendly restaurants with takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant in midtown west contains outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
restaurant that takes credit cards and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )	overnight-restaurants
restaurant with lunch menu	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
restaurant whose star rating is 3 stars and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string takeout ) ) )	overnight-restaurants
name a restaurant serving more than two types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )	overnight-restaurants
what restaurant is kid friendly and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )	overnight-restaurants
what restaurant has two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )	overnight-restaurants
restaurants with delivery for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )	overnight-restaurants
restaurant that can deliver and is open for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )	overnight-restaurants
group friendly restaurants rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what is a meal served in a thai restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )	overnight-restaurants
which restaurants are good for groups and accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string credit ) ) )	overnight-restaurants
restaurants that accept credit cards and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant that is good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )	overnight-restaurants
name a meal served in a restaurant with a price rating of two dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurant whose star rating is at most 3 stars or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
what is the price rating	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
take out restaurant in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what are some 3 star rated restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
list all restaurants that are cheaper than 2 dollar signs or 3 star dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
restaurant whose star rating is at least star rating of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
restaurant whose cuisine is thai and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
restaurants that serve lunch and have waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants that are in the neighborhood of midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )	overnight-restaurants
what kind of cuisine is thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )	overnight-restaurants
restaurants with 3 or lower price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what is a meal served by two different restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which restaurants accept reservation and have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )	overnight-restaurants
a restaurant with a 2 dollar sign rating for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )	overnight-restaurants
which restaurants have takeout and serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what resturant has a price rating smaller than two dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
restaurants that serve lunch that are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurant that serves lunch and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )	overnight-restaurants
what meals do 2 restaurants serve	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants that have waiters and are good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string groups ) ) )	overnight-restaurants
hotel that offers lunch and has outdoor seating facilities	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurant offers lunch and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
a restaurant with thai cuisine	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
what is the cuisine of restaurants that serve lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )	overnight-restaurants
list all restaurants in the neighborhood of midtown west or chelsea	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )	overnight-restaurants
restaurant that serves food for kids	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ) )	overnight-restaurants
what neighborhood has more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
hotel which has a price rating of less than 2 dollar signs or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
what kind fo meals do thai cafe and pizzeria juno serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
restaurant whose neighborhood is neighborhood that is neighborhood of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )	overnight-restaurants
restaurant whose cuisine is thai and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string outdoor ) ) )	overnight-restaurants
restaurant whose star rating is smaller than 3 stars or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
restaurant that takes reservations and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )	overnight-restaurants
restaurants that cheaper than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
what meals do credit card taking restaurants serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
what restaurant can i eat lunch outdoors at	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string outdoor ) ) )	overnight-restaurants
restaurant whose star rating is 3 stars and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )	overnight-restaurants
affordable restaurant with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )	overnight-restaurants
restaurants that are group friendly	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )	overnight-restaurants
what restaurant serves two different types of cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )	overnight-restaurants
what restaurants are good for groups and kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )	overnight-restaurants
what is a meal served at a restaurant that has waiters	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
restaurant who shares a neighborhood with the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) ) )	overnight-restaurants
restaurant that has delivery and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )	overnight-restaurants
what 2 dollar price rating restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what kind of meals does takeout restaurants serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
what is the price range for the thai restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )	overnight-restaurants
what restaurant takes reservations and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )	overnight-restaurants
list restaurants that are at or less than 2 or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) ) )	overnight-restaurants
a reservation thai restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )	overnight-restaurants
restaurants that take credit and deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )	overnight-restaurants
restaurant in the midtown west area	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
what2 dollar sign restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
what restaurants offer more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
list all restaurants that have a price rating of 2 dollar signs or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )	overnight-restaurants
what cuisine does the thai cafe have	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what is the average restaurant star rating	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )	overnight-restaurants
what restaurants are good for groups that have waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string waiter ) ) )	overnight-restaurants
restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
restaurants who have a price rating lower than 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string ! = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
list all restaurants that are at least 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what restaurants have at least a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what cuisine has the least amount of restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cuisine ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which hotel has the least price rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
restaurants rated 3 stars that accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what restaurant has a higher price rating than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )	overnight-restaurants
what meals dont the thai cafe serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurant has seating outside	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )	overnight-restaurants
which neighborhoods have restaurants with a 2 dollar sign price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
neighborhood that is neighborhood of restaurant that takes reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
a restaurant for lunch or dinner	( call SW.listValue ( call SW.concat en.food.lunch en.food.dinner ) )	overnight-restaurants
restaurants that take reservations and are good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )	overnight-restaurants
what thai restaurants takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string reserve ) ) )	overnight-restaurants
restaurants that serves more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )	overnight-restaurants
what neighborhoods have restaurants that accept reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
what restaurant can i get lunch at that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )	overnight-restaurants
restaurant whose neighborhood is midtown west and that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )	overnight-restaurants
thai restaurants that have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string takeout ) ) )	overnight-restaurants
restaurants with 3 stars and 2 price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
list all restaurants in midtown west or chelsea	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) ) )	overnight-restaurants
restaurants that are better for takeout	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurants that accept credit cards and have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string credit ) ) )	overnight-restaurants
what is the restaurants number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
which resturant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )	overnight-restaurants
what cuisines are offered by restaurants accepting reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
which restaurant has a cuisine that offers delivery services	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
restaurants that can be booked in advance	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )	overnight-restaurants
what are some 3 star restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
offers take out and delievers	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )	overnight-restaurants
list all restaurants that have lower stars than 3 star or 5 star	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
which restaurants have outdoor seating and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )	overnight-restaurants
what restaurant is good for groups and offers outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )	overnight-restaurants
what is the cuisine of restaurants that have delivery	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
cuisine unlike thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )	overnight-restaurants
restaurant that has delivery and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what thai restaurant offers waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )	overnight-restaurants
what restaurant offers outdoor seating and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )	overnight-restaurants
what restaurant offers lunch and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
restaurants with price rating of 2 in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
this restaurant had the largest rating in price	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )	overnight-restaurants
what restaurant does not have a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )	overnight-restaurants
hotel which has a price rating of 2 dollar signs and offers delivery services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string delivery ) ) )	overnight-restaurants
what are some restaurants that are rated between 3 and 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )	overnight-restaurants
what is a kid friendly restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string kids ) ) )	overnight-restaurants
what restaurant serves less than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
which resturants serve lunch and have delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
a thai restaurant with medium pricing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )	overnight-restaurants
what good kids restaurant serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
what restaurants take credit cards and deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )	overnight-restaurants
restaurant that delivers and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )	overnight-restaurants
restaurants that serves lunch and is large	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string groups ) ) )	overnight-restaurants
what neighborhood has at least two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
what is the cuisine of the restaurant with waiter service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )	overnight-restaurants
which restaurant offers fewer than two types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string < ) ( number 2 ) ) )	overnight-restaurants
restaurants with similar food to thai cafe or pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what are some 2 dollar rated restaurants good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )	overnight-restaurants
an outdoor setting restaurant that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string credit ) ) )	overnight-restaurants
neighborhood that is neighborhood of at least two restaurant	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
a restaurant for kids in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string kids ) ) )	overnight-restaurants
what meals do the thai cafe serve	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )	overnight-restaurants
what restaurant has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )	overnight-restaurants
which kid friendly restaurants accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string kids ) ) )	overnight-restaurants
what restaurants use waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )	overnight-restaurants
restaurants with star ratings of 3 or 5	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )	overnight-restaurants
restaurant in the neighbourhood that has takeout facilities	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )	overnight-restaurants
restaurants for groups and is in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )	overnight-restaurants
3 star restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
which restaurant has outdoor seats as well as delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string delivery ) ) )	overnight-restaurants
what is the neighborhood of thai cafe or pizzeria juno	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )	overnight-restaurants
what neighborhoods have restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )	overnight-restaurants
what restaurant is available in less than two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )	overnight-restaurants
thai cafe in the neighborhood	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )	overnight-restaurants
what 2 dollar signs restaurant is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
hotel that has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
3 star restaurants that have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )	overnight-restaurants
what neighborhood has the largest number of restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )	overnight-restaurants
restaurants with takeout that are group friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )	overnight-restaurants
restaurants for two	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )	overnight-restaurants
restaurant that has delivery and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )	overnight-restaurants
a thai restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )	overnight-restaurants
restaurants that can be booked in advance ant which de	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that has takeout with credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )	overnight-restaurants
what restaurant serves meals and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )	overnight-restaurants
restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )	overnight-restaurants
restaurants which have delivery and take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )	overnight-restaurants
which restaurants have star ratings lower than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )	overnight-restaurants
what is the average price ratings of restaurants	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )	overnight-restaurants
restaurants that can be booked in advance and that offers delivery services	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )	overnight-restaurants
restaurant that takes reservations and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string delivery ) ) )	overnight-restaurants
three star restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string delivery ) ) )	overnight-restaurants
what restaurant has waiter service and a 2 dollar sign rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )	overnight-restaurants
find a thai restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )	overnight-restaurants
employee who left after alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees with end dates that are no greater than employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is alices employer since 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )	overnight-socialnetwork
what city has a birthplace of a person who is at least 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people born on or after the date alice started working	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
find all single people born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
employees whose last day is before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find friends of students whose last day is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born before alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
which employees start date is the same as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employeess last day was no earlier than alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is alices end date when she was a student	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )	overnight-socialnetwork
who is friends with students who start date is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what gender is the employee who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where were the people that started working after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employee has a end date that is before the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who work at mckinsey or google	( call SW.listValue ( call SW.concat en.company.mckinsey en.company.google ) )	overnight-socialnetwork
which city were at least two people born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find me the friends of the employee who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender of employee whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
when did alice join at brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )	overnight-socialnetwork
find the birthplace city of students who have a start date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people with a height of 180 cm who are the same gender as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
alices friends who are singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
employees who started before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
2004 graduates friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
an employee ending before or when alice ends	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
birth city of employee whose end date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who were born in the same city as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
people that work for less than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is born in a city where alice is born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
who has more than two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
students who did not graduate before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find birthplaces of students whose last day was in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
all people currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )	overnight-socialnetwork
gender which is gender of less than three persons	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what person is a 180 cm tall male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
what students have a start date that is the same as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who have friends and started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with the person who isnt a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where were working people that did not stop in 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
males that alice is friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
a student who started before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee ended earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me all the relationship statuses of employees who started job after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplaces of people who quit their jobs after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees whose end date is later than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what gender has the most people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which city were people who are 180 cm tall born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
name an employee who quit before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what sex are the employees who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
when did alice start attending school	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )	overnight-socialnetwork
find students starting on or after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students started before the day alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
list the relationship status of people who quit their jobs before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what people have an end date of 2004 and height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what employee has the same birthday as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees who have a start date that is at least the same as employee alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started school after alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are friends with someone that started working in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
relationship status of employee whose start date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender of student whose end date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees whose last day was before or on alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the students relationship status who ended earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who did not start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends of people who were born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
person with the most friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
person born after alice graduated	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
find all of alices friends who are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what employee was hired last	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
online male member	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
student who finishes before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name a person born in 2004 who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
is the person single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
people that have the least number of relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )	overnight-socialnetwork
what employee has a start date that is the same as the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what are the relationship statuses of people that are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
find employees who have a start day at the same time as alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which people are friends with employees who strated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
the person logged in who is born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )	overnight-socialnetwork
what is the employees relationship status who ended in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
all 180 cm tall people who studied computer science	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
people who went to brown university and are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
find birthplaces of students starting in 2004 and later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me the gender of students who did not attend brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what did alice study when she graduated in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )	overnight-socialnetwork
students who started on the same date as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person who has a birthday before alice graduates	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
person who is friends with students who joined in and after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was hired after alice quit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a friend of someone emplyed after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped work after 2004 or after 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students whose last day is after alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice start the job she left in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
what gender is the online person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
find me the student who left school before alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where were the students of any field but computer science born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees starting before or contemporaneous to alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees started no later than alices graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
people that started school in or before 2004 or in or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school before alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that stopped working when alice stopped school or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employees have an end date that is later than either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
where were people that stopped working after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what city is the birthplace of employees before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what are the start and end employment dates of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of person not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employee has the most job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find birthplace of student not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what gender do at least two people have	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
students that will begin after 2004 and no later than 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person has a relationship status the same as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )	overnight-socialnetwork
which men are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
employees that are not employed by mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped working before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which people are friends with students who graduated no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students graduate after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of student whose university of not brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees friend with a last day in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which people that alice is friends with are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what person born in 2004 is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what students completed school the same year alice began	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of employees finishing in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with the employee who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the relationship status of employees whom have an end date that is bigger than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped school on or before the day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student has at least 2 university to go to	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of alice who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which people are friends with alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what is the relationship status of people that started working in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of the employee who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who start before or when alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of people that started school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
where was the person born who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
employee who left on or after alice joinde	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees whose start date is before or on alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who was born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
what is the employees relationship status who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees have a end date that is no greater than the start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
whats the gender of students who started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
fine me employees that are leaving before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees leaving the company no earlier than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are friends with somebody who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the university of a person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
employees who quit after alice quit school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who started school on the same day as or before alive started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students whose end date is on alices end date or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school before alice stopped	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students go to brown university or ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who was the first person to start working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students whose start date is no later than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
in what city was the employee who is not a software engineer born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
the birthplace of an employee not ending in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
genders of employees starting in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what student graduated the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who started on the day that alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students finishing on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which of alices friends were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
which people are friends with alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
student who started the same day as alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who are friends with students who do not graudate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of student whose start date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the birthdplaces of new employees we have starting by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who stopped working after 2004  and has connections to me	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people with a height of 180 cm who also have a birthdate of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find people who are friends with alice and are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
find someone who was born before alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
what employees have a start date of either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
birth city of alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
which employee started right when alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of employees whose last day was no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
relationship status of all students whos end date is 2004 on	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what students graduated in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the field of study of all persons with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people that are friends with either alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
a student who left on the day alice did or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person who was born before alice start date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
what employees who are not software engineers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what people have a birthplace of new york who are also friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who is not friend with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
find people with friends that started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what people have a height of 180 cm and field of study that is computer science	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
what gender is the person who 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
students who graduate no sooner than the day alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birthplaces of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
name the city where an employee was born who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students whose end date is before alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a student that doesnt attend brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students finishing before or in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have a start date that is 2004 or later and who are their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born in the same city as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
find students whose last day was 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who began working before alice finished school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what cities were the single people born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
employees who quit their job the same day or after alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what cities are the birthplace of students later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which of alices friends are male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
name all students who quit before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the relationship statuses of students with a start date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birthplace of only one person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find all the relationship statuses of the students that started in 2004 and before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who have at least two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
an employee ending before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of people that started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is a person whose field of study is computer science and whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
people who are friends with alice whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what employee was terminated after alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
number of cities people are from	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )	overnight-socialnetwork
find friends of people who did not start school in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students graduated no later than alices last day of work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students who ended school after alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employees strated after 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who started working in or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who started working after alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name a single person who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the relationship status of students who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the birth city of employees with a start date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employee quit first	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find one of alices friends who was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
friends of students before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of an employee starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who have the same birthplace as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
what student has fewer than two fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who was born before alices last day of employment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
what is the relationship status of the student who is not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose end date is not after birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that have a friend that stopped school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that started working before alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find singlestatus people who are alices friend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who are friends with student that didnt end in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that started working after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which people were born in the same place as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
what is the birthplace of students who are not brown university students	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find alices friend who is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
employees who quit as late as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
person who is a friend of an employee that has worked since 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with the employee that is leaving the company by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the names of all students who graduated between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who did not start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which person is friends with a student who started earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what city is the birthplace of the student who ended school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people that have two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
student who joined on or before the day alice left	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birthplace of employees whose last day was not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
when did alice start working for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )	overnight-socialnetwork
person named alice who studies computer science at a university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )	overnight-socialnetwork
what is the relationship status of an employee who quit in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the birthplace city of student that was enrolled by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employee quit recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who share a workplace with alive	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what students are part of two universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all people named alice who quit during 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )	overnight-socialnetwork
what students have the earliest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find birthplaces of nonmckinsey employees	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
city where the least number of people were born	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employee whose employer is not mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me all people with the same gender as alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
gender of employees who left before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is born is 2004 and is a male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
who is friends with alice and is male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
people who started working on the day alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has least number of friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employees who quit after alice started her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees not starting in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which people were born after alice left her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
what is the gender that is the gender of at most two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is friends with the single person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
find employees starting on or after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of students with an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what students have an end date that is earlier than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student is in the same field of study as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people with friends who started university in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friend of employee whose start date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that are not friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
gender of students starting contemporaneous to or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are employees with an end date no later than 2004 and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped school after alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of employees who start before or in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are 180 cm tall and are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
anyone single born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
find me all students that will start at the same time or after alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find university of people who are 180cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
person who works at mckinsey or google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee ended after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who finish when or before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is in the most relationships	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what is the gender of employees who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is the employee whose start date was at least 2004 friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees with a start date earlier than the end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who were born the same day alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) )	overnight-socialnetwork
find the birth cities of students who have a start date in 2004 or greater	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is a person whose university is not brown university friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
whats the relationship status of employees who started work before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who were born after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
find employees friends with last day after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who has over two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
is alice employed by mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )	overnight-socialnetwork
find employees whose end date is the same as that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what are the relationships statuses of students who started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students friend whose university is not brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which friends stopped working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are friends with someone that did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employees have an end date that is later than that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
gender of a student not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender that has less than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
relationship status of students who are not studying at brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of student whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student with start date not after end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
is the person single or married	( call SW.listValue ( call SW.concat en.relationship_status.single en.relationship_status.married ) )	overnight-socialnetwork
when did alice stop working for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )	overnight-socialnetwork
find everybody who has two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
what is the alices 2004 end date	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )	overnight-socialnetwork
who are people who are employees with a start date not of 2004 friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what students have a end date that is after the start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of employees that do not work as software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
when did alice begin as an employee	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
who is shorter than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
what is the relationship status of people that started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
how many job titles are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ) )	overnight-socialnetwork
which student is not from brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who works for someone other than mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who started before or on alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who was born on or after alices last day of school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
people with less than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find employees with the same last day as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees started after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who start before alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that were born on the day alice started work	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )	overnight-socialnetwork
what city was the student born in that has 2004 as end date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which person is friends with an employee who was here in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplace of students whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which people are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find me students whose start date is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me the student who started before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee ended no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of an employee whose start date is later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what students have an end date no earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
how tall is alice	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )	overnight-socialnetwork
name an employee who started before alice quit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which of alices friends is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
employee whose end date is not after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employees have a start date that is the same as student alice or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
where is the birthplace of the student who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students have no more than two majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with students who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people with relationship status of at least two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which students graduate no later than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find all people who are not in a relationship and were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
find students who have fewer than two field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what cities in new york were people born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
friends of students who began earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student who has 2004 as a date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
sex of students who didnt start school in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friend of employee whose job title is not software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who have friends that are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
find me a person born in either 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-socialnetwork
gender of students who are not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee has a start date that is earlier than the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person was born earlier than that of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
people born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
which students graduate before alice does	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
who are friends with connection who started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of employee whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employees start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee starting the soonest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students who have no more than two fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that study or studied anywhere but brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
whose friend is logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
any male who is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )	overnight-socialnetwork
what person is friends with the employee that was hired before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who finish before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is relationship status of employees with start dates other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a friend of alice that is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
list the birthplaces of people who completed their studies before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
studens with the fewest fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
persons born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
which employees last day was after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who shares same employer with employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who doesnt work for mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are male and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find me all employees that start on the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what people are friends with students that have a start date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what are the birthplaces of people logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
what person has less than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
relationship status of nonsoftware engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is alice friends with that also have relationship statuses of single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
people who work at mckinsey and are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
which software engineer is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
which students graduate after alice starts her new job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who are logged in who are alices friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which students major in computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students finishing after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee quit their job first	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of employee finishing contemporaneous to or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is the student whose start date is at least 2004 friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of only one person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employees with two job titles at most	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the average height of everyone	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )	overnight-socialnetwork
what is gender of employees with last days other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees starting the latest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who quit their job before alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students whom have a start date of 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a student that starts before alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where were the people that started work in or after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find friends of people who started their job before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of everyone who is not a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people born anywhere but new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )	overnight-socialnetwork
who is the person that is 180 cm friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find employees whose end date is the start date of student alice or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birthplace city of a student who started during or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employee started earlier than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
singles who were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
who started working after the student alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students end date is greater than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that have two or less birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
what person was born in new york and is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
one worker who is a software engineer or program manager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
can not parapharase	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employee with not more than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all single people that are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
students who graduated on or after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what sex are the employees who did not quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of an employee who is not a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee with one job title	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of students who have an end date that is from 2004 or greater	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the friends of people who are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
who is friend of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
relationship status of employees whose end date is no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
friend of someone who quit before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
the birthplace of a student not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was born in new york in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find me people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find the relation status of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find students with one or two fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people with only one friend	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which employee started no greater than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which student ended at most on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status as most of the persons	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
how many genders are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )	overnight-socialnetwork
who is software engineer or program manager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what cities are the birthplace of students who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students finishing contemporaneous to alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started working the same time or after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the people who quit their job before alice joined her study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employees have an end date of 2004 or later and who are their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee who works as a software engineer or manager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students ended school in 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what gender is the student that graduated by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employee who left on the same day or later as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee with largest end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
either alice or bob	( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )	overnight-socialnetwork
which employee ended on the same date as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
persons presently logged in who were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
what student started the job before alice quit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employees have a end date that is the same as the start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student that has no less than one field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose start date is after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students with a start date the same as employee alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose end date is not 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the relationship statuses of employees who have an end date that is no more that 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who are male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
find employees starting before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee whose start date is not before start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of students with an end date earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are friends with employees that are not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what students have an end date that is greater than that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is number of a person	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what is the identifying gender of the transgendered person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
friends of students who joined in years except 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
what online person is alice friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
what is the birthplace of students who did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what student has a start date no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people that finished school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
genders of students not finishing in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students starting the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is relationship status of students starting in 2003 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born in new york or beijing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )	overnight-socialnetwork
what relationship status is listed by the least number of people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
where were the people online born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
people that stopped working the same day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
the gender of a student ending before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find relationship statuses of students who have a start date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is male and is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee whose start date is before start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
is this person single or married	( call SW.listValue ( call SW.concat en.relationship_status.single en.relationship_status.married ) )	overnight-socialnetwork
employees with the same job title as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee started at the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what students have an end date that is no sooner than alcies birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with the student who graduates in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the birth city of all employees who have an end date less than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee with at most two jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which student started school on the last day alice worked	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee has worked for the fewest employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me friends of students graduating before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what students have an end date that is no greater than employee alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what male is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
who is friends with an employee who does not work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees have a start date that is no later than the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students with an end date the same as employee alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which person has a relationship status of single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
which employees last day is no earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of people that started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students whose end date is before the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what genders are the people that started school in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are 180 cm tall and attend brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
start date of alices employment which ended in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
locate the gender of employees whom are not employeed by mickinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender of alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
find student whose last day is after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birthdate of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what employee started the earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find alices friends born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find company employing those who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find all people who were born before alice started	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
people that are friends with a working person that isnt a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student studied computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with the student who is not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of people whose height is 180cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people who joined study after 2003	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
persons who were born on or after start date of alices study	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
people that are taller than 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
people born in new york and currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )	overnight-socialnetwork
show me all students that will leave in 2004 or oe 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees starting in 2004 and later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that are friends with someone that stopped working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who start with or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees who have an end date later than 2004 and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is alice and bobs gender	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
which people are friends with students who started no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees who did not start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of an individual	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
where do my friends who are 180 cm stud for university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what are alice and bobs relationship statuses	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
people that stopped school in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who dont finish in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of the employee that did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employee has the same or bigger end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the phone number of a company	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ) )	overnight-socialnetwork
find me an employee who has worked at two or less jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started school in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person whose birthplace is same as person 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
which student has the same relationship as the student who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employees have a start date after the start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is alices gender	( call SW.listValue ( call SW.getProperty en.person.alice ( string gender ) ) )	overnight-socialnetwork
what is birthplace of students who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what people are friends with those who are friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
who was born in two places	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
people who were born in the same place as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
when is the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of a student who did not begin in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what university do those that are 180 cm tall go to	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find relationship status of students not studying computer science field	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose end date is before start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with the person from new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
where were the working people that are not software engineers born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the last date of alice who is a student of brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )	overnight-socialnetwork
working person with the least job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who completed education before alice joined work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find student who started first	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees who have an employer different from that of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people alice is friends with that were also born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what gender has the fewest people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what people have a height of 180 cm and the same relationship status as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
where were the people that started working in or before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender of all employees who did not quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is a person whose field of study is not computer science friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
a student ending after alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
is alices job title software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string job_title ) ) )	overnight-socialnetwork
people who are single and currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
gender of employee who left before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who are 180 cm tall who are alices gender	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
relationship status of two or less persons	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
student who left with or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose last day was also alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a friend of a student that starts in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what student started earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
alices friends who are logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
singles who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
people that started working before 2004 or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born in new york that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
which employees started before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has friends with a start date after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
the person who has the most genders	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string gender ) ) )	overnight-socialnetwork
which employees last day was no later than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees starting before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
person who first quit hisher job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what student started after alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is not friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
employee who left before 2004 or in 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee quit their job the same day or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the gender of employees who have an end date that is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee with same start date as that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the height of a person	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )	overnight-socialnetwork
who has lowest number of friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find me all employees whore start date is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person is friends with a student that has an end date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are at least 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
birth city of employee whose job title is not software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who have the same birthday as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )	overnight-socialnetwork
what people are logged in and whom are they friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
employee whose start date is birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what university did alice graduate from in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )	overnight-socialnetwork
whose relationship status is unique	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is friends with the person who started working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people with three or more friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
this student who finishes school at al most the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of people who started their studies in an year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what are genders of students not studying computer science field	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the gender of students who did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who finished school the earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee ended no greater than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people with a start date of 2004 and height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find me all employees who will have starte by alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the 180 cm tall persons job title	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people who quit their job before alice joined	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which emloyees had their last no earlier than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students starte before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name the friend of an employee who did not quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what people are friends with alice and have a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
who measures 180 cm and quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find people 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find me all employees who started in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with the student who began school no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of students joining before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
this employee has an ending date that is almost the same as alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
the gender of a student that isnt in computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is relationship status of employees starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students with last day in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends that have friends that are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
students who finish after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
one employee who left in 2004 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of employees who strated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student started on or before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all students with a single major	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people born in new york that are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find me all people who has a friend born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
name a person who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee whose end date is not before end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who was born on or before alices final day of employment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
people who stated working in 2004 or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of employees whose start date is earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who finish on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of a person who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
whats the relationship status of the student leaving prior to 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
name someone who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what student has a start date later than the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started work after alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students that didnt finish in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who are 180 cm tall and are software engineers	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
students who graduated before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who did not stop working before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with an employee whos end date is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what student has an end date that is before the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends of students who started in 2004 and after	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the citys number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )	overnight-socialnetwork
which people are friends with employees who started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who has most friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which employees last day is the same as alices birth date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the person with the most friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which employee ended their job on the same day as alices brithday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
show me the students starting at the same time or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name a person 180 cm tall who started working in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find friends of people who graduated school but not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person is friends with an employee who has a start date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who has maximum 2 friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find people with a gender of male and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
find people who do not have more than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
relationship status of students finishing after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employee whose start date is not after start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who quit their job before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee has a start date earlier than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what status is the relationship status of less than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what students began school either after 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice start studying computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )	overnight-socialnetwork
students who began school the same day alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee has an end date earlier than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the gender of no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
friends of people who joined their jobs in years other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
alices friends who were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
people that started work before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find alices friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the persons number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
whos 180 cm tall and in the same sort of relationship situaiton as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which employee started after the employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find someone of any gender	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )	overnight-socialnetwork
who is friends with students starting before on in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which student has the fewest fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
one student who started in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the person that is 180 cm tall and was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
who has the same relationship status as alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who are friends with the employees leaving the company after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the employee whose last day was on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
friends of students starting on or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is thre relationship status of students who graduated after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who started after alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of a student with an end date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
name the friend of a student who began prior to 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find the birth city of employees whose start date is less than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what sex are the students who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
180 cm tall people joined in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find students starting on alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the job title of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people born after alices first day of school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
is alice male or female	( call SW.listValue ( call SW.getProperty en.person.alice ( string gender ) ) )	overnight-socialnetwork
find all people with friends that finished school in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people with relationship status as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )	overnight-socialnetwork
when did alice stop working as a software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )	overnight-socialnetwork
180 cm tall persons who share birthdate with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who has friends that are online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
what person has only two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what city was the student that started after 2004 born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
place of birth for the fewest people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find me people who have the same relationship status of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is the gender of most	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find the relationship statuses of employees who do not have the job title of software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where were the graduates of 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what gender is more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
an employee starting before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employer has the least number of employees	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students started school after 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is the person whose birthplace is new york and whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find me all people are are taller than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
birth city of employee whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of a student whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is the oldest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )	overnight-socialnetwork
people from new york that are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what students have an end date that is lower than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students who started no later than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what city was the male born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
find friends of people who quit their jobs in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what city were at least two people born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is alice friends with thats 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who are friends with employees who started work before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is born in 2004 at new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
person who is friends with an employee who retired at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me all people whose height is 180 cm and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find me the student whose start date is on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
which employee has the fewest jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the relationship statuses of students whom do not study computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that stopped working the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which student stopped before student alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student who started on birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of employees with an end date greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what people are friens with students that have a start date not equal to 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are th gender of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
people that started working when alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of employees who are not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employee has no more than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are single and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find a person born before alice started working	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
who is in the same type of relationship as alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people born before the employment end date of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
find cities that are the birthplaces of employees with an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student who left before student alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
whats the relationship status of the student leaving his job by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the status of the two peoples relationship	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who has maximum two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who studied at only one university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with less than two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
find someone shorter than 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
find students with end date in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which relationship status do less than two people have	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
where were two people both born	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what was alices last day of her job from 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
name the friend of an employee who quit after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
when did alice finish studying computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )	overnight-socialnetwork
what male is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
which people are mutual friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who are friends with the employee thats leaving before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students with last day on or after alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what date did alice leave her job in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
which employees last day is no later than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who began school after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person who is friend of a student who starts at most by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees starting other than in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people born after the employment of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
person born on or after end of alices employment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
which employees has the least recent start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which person has the fewest number of friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find people with friends that finished school in 2004 at the latest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find all people born in 2004 that are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who were born the same day as or after alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
birthplace of two or less persons	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what person who ended in 2004 is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what students have an end date later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is the student whose start date was at least 2004 friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that started working after alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which person is friends with someone who goes to somewhere besides brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students whose last day was before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me friends of single people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
person who is friends with someone whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
a friend of an employee that ends after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees finishing contemporaneous to or before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person is 180 cm tall and is currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )	overnight-socialnetwork
which employee started no earlier than alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find alices friends that were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people with only one or two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
how many people are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which employee quit their job after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
180 cm tall friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee whose end date is not after start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee whose end date is before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who are alices friends from her hometown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
a friend of alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
a person whose employee friend didnt leave in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
an employee that started before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is alices boss at her software engineer job	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )	overnight-socialnetwork
find an employee who left after 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the gender of students who have a start date after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the genders of employees who have an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employee has the same relationship status as the employee who started earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the genders of students with end dates later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of people that are friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
name the relationships status of an employee who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who ended school after the day alice ended school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who was born before alice left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
find people who are between 180 cm and 200 cm tall	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )	overnight-socialnetwork
180 cm tall person who is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
either 180cm or 200cm	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )	overnight-socialnetwork
what is the relationship status of a male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
which student started earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students finishing before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
how many relationship statuses are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ) )	overnight-socialnetwork
what person was born in new york and single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
people born in 2004 who are 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
a friend of alice who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what employees have an end date that is later than the start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
birthplaces of employees who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender of students who started in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees starting the same day as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with someone born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
find students with a start date that is the same or greater than student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find birthplaces of students whose last day was 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people born in 2004 who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
people that are friends with someone that started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
a student starting after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status that is the same as a person born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
birth city of person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find friends of people who started work in 2004 at the earliest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee whose start date is not after end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has the most friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find the birthplace of employees whose last day is not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what single person is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
people who completed their study before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who were born after alice quit her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
which student goes to the same university as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with no birthplaces	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string birthplace ) ) )	overnight-socialnetwork
what day in 2004 did alice start working	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
what is the relationship status of a person born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
friends of people who quit their jobs after 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
name the employees who quit the job when alice was born 	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
whats the relationship status of students who joined after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee has an end date later than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is a person who has two genders called	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
student whose end date is same as that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees who quit the job after 2004 	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee whose start date is before the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people with employment end date as 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
people who are born in new york and are 180cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
friend of student whose start date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students who have an end date that is greater than alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students who started after alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
did alice study computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )	overnight-socialnetwork
people that stopped school before alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people have less than two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
what persons birthday is in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
gender of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
person that is a friend of student who will graduate by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who start with alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of people who quit their jobs before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the people who are friends with males	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
find students whose start date is less than that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have a start date that is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person is friends with an employee who had an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who started at or after the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the end date of alices job as software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )	overnight-socialnetwork
what is the relationship status of fewer than two of the people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which person is friends with the employee whos end date isnt 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplace of employees who are not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
name a persons friend who was born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
people that are friends with someone that finished school in any year but 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with bob or alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
what is the students birthplace city who started at the most in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
person that went to the most universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee who is a software engineer or program manager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a 180 cm tall person born in same place as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
person who joined study on the day alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
someone who has studied at less than two universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that stopped working before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students with the most fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what persons height is shorter than 180 to 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
what are genders of students starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who has the most relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string relationship_status ) ) )	overnight-socialnetwork
find single people who are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people that stopped working after alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which student started the day alice left her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the tallest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-socialnetwork
birth place of two persons	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
is alices job title software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string job_title ) ) )	overnight-socialnetwork
what is the birth city of no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what is the relationship status of a student whose end date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
males who are online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
who was born in 2004 and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
people that started school when alice started working or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee quit after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which guys are also 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find employee with latest last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the birthplaces of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find me all males that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
find employees who have a start date of 2004 or later and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which person has two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people that stopped school after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has two or more genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
person whose name is alive or bob	( call SW.listValue ( call SW.concat en.person.alice en.person.bob ) )	overnight-socialnetwork
where were the people that started school after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friend of employee whose start date is at most 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who started school before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee started their job on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student with same field of study as that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people born on the same day as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )	overnight-socialnetwork
which students quit outside of 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with a height of 180 cm and the same birthplace as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
birth city of student whose end date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are male and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
friend of student whose start date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who started before alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what relationship statuses are claimed by alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
who is friends with a person that is friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
person with more then two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
friend of someone born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
students who have the same end date as the start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what did alice study	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )	overnight-socialnetwork
whats the birthplace of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
what is the birthplace of student who joined before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find someone born in the same city as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
what gender are the two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
friend of emmployee whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee ending before or when alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born after alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
who are some of my noncomputer science major connections friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students started school before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what genders are the people that finished school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with the male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
what student has an end date that is later than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees who have a start date the same as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what company employs an 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what person has the same relationship status as that of the majority	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
a student ending after or when alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find all people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what people have two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
find students friends with last days other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose start date is after start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
an employee who left before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of people that started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employees dont have the job title software engineer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that are software engineers or program managers	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )	overnight-socialnetwork
employee who joined before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name the student who was born after alice 	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee started after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
gender of someone who is single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
start date of alices study which ended in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )	overnight-socialnetwork
people who are friends with employees who started working in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who are students with a field of study that is not computer science and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
person born after alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
find people shorter than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
alices male friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
the gender of one worker who left in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students studying either computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of one employee whos not a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who has friends that are students whos start date before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the combined height of everyone in my network	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )	overnight-socialnetwork
what is the relationship status of a student who began at 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students have the same birthrate and start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends of students with end dates other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which is the university of studen alice who finished in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )	overnight-socialnetwork
what is the relationship status of employees whose job title is not software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of working people that did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
relationship status of employee whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the birth city for students whom have a start date other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which people are 180 cm at brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
friend of student whose end date is not before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people that have more than two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
name a friend of alice who was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which student left most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who completed the study after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person has the same birthdate as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )	overnight-socialnetwork
what is the relationship status of the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people who are 180 cm tall and quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
relationship status of people whose height is 180cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find students who have an end date that is earlier than student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
all single or married persons	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )	overnight-socialnetwork
find me all people who are not alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
who is alices employer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )	overnight-socialnetwork
find the oldest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )	overnight-socialnetwork
find student with end date after alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what single person is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
people that started school before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friend of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
a student that ends the same time alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that stopped working when alice did or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people with friends who are single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
students who began school after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birth city of student whose start date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which relationship status is of at most two person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is alices male friend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
what gender are the employees who left the company before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people with a relationship status of single and a total height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
which people are friends with the person currently logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
which employee has the most previous employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
ulca or brown univercity	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )	overnight-socialnetwork
employee whos last day was between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name the employee who quit the job on the same date as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
birthplaces of all 180 cm tall people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people that stopped school before alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee started before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of people who stopped school in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students finishing contemporaneous or before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what student has a start date that is later than that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friend of a student starting before or during 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birthplace of employees who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
person who studied in most fields	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees starting after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
someone not friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
employe that has a smaller start date than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find student with earliest last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is a student that started after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what company emplys a 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
students starting before alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
an employee ending before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees starting after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who finish with or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
is there a gender less than two people have	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people born in new york that are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
people who started in 2004 and are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
people that stopped working after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who attended college the longest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name a person who is online who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
people that started working when alice was born or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee start after alice leaves	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birthplace of those who are friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
people who are friends with alice and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee whose end date is after alices birth date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what gender does the person born in 2004 have	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
employees with one job title	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person has a height of at least 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find me all of alices guy friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who stopped working in 2004 and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what employee quit their job on the day alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee has an end date that is before the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employees have a start date that is bigger than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birth city of a student who didnt stop in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friend of student whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find employees friends with last day other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the birthplace of employees whose job title isnt software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the person born in new yorks relationship status	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
people who were born before alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
where was the employee born who does not work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
whats the relationship status of the employee with an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find someone who lists 2 birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
employee whose end date is before after end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is from new york and logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
which software engineer has employed alice	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )	overnight-socialnetwork
people who are friends with employees whose last day was in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees with the fewest employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
people with friends who started work in 2004 at the latest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is studying computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with someone who graduated after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employee with last day same as or before alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped working after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who have friends who are not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employee starting on alices first day or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which student goes to another university besides brown	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which of alices friends is online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find me all employees that will start at the company before alice leaves	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
single people that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
what is the relationship status of people going to any university but brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what student has the most majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who are people who are students with an end date no greater than 2004 friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friend of alice who was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find all males who have friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
who is friends with the student that started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who joined after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
whats the relationship status of all students except those from brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which singles are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
student who joined before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the friends of employees that quit in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of employees with last day in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees that are starting their new job on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of employees who left before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that started school when alice did or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employeess last day was least recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the average height of all the people in my network	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )	overnight-socialnetwork
name an employee who started in 2004 but before 2011	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees started after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of the student who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the relationship status of an employee that stopped working on or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are friends with students who dont major in computer sience	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
person who stopped school before alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people with an end date of 2004 are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
how many fields are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )	overnight-socialnetwork
find people with the same height as alice or 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
gender of employees who finish after or in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student starting when alice ends	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what student has an end date before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people with the most friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
students who began school in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students sharing alices field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who were born after alice graduated school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
people who studied in two or less fields	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employees left prior to 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what friend of alice was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find employees with last days on or after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which date did alice start who finished in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )	overnight-socialnetwork
which students start date is on or before alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students who started no later than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
employee whose start date is not before end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are friends with a student that started no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are friends with an employee whose end date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is relationship status of student with last day before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friend of alices friend who is from new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
friend of employee whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with employees that have an end date of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of working people that did not stop in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped school the day alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the job title of the person that is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what employees have a start date that is no later than alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who started on alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who shares a birthday with alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
fine me all employees who start by 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is thre relationship status of students who started no sooner than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the most end date of student 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
when did mckinseys employe alice start	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )	overnight-socialnetwork
which employees have the fewest job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee left their job after alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees starting before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee whose end date is before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with over two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
gender of people who joined their study after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is alices birthplace	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )	overnight-socialnetwork
an employee that ends before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee has no more than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that finished school in or before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
least common relationship status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find all male singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
which students start no sooner than alices graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where are the birth cities of employees who have a start date of no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is thre relationship status of students who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employee started earlier than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that work for mckinsey or google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
where were the people that finished school before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
someone with multiple relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
who is the employer of the person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
students who started in 2004 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that stopped working when alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with someone who didnt go to brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is 180 cm and from the same place as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is alices friend that is from new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
which student ended no later than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name an employee whose end date is similar to that of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which person has the birthdate of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
find people born after alices last day of work	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )	overnight-socialnetwork
what gender are the two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find students with last day before or the same as alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
whats the gender of the student that did not attend brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees who have a start date that is the same as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students friends not studying computer science field	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birth city of student whose field of study is not computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
person who was born in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-socialnetwork
people that have friends that alice is friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
employees starting before alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who joined their job after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what was the graduation date of alice in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )	overnight-socialnetwork
what is gender of the student whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me students whose  end date is no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who joined after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what relationship statuses are meant for less than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which students graduate in 2004 or 2010 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are friends with a student who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that stopped school in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started working on or after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees with the latest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what genders are the people that stopped working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
name a person who is 180 cm who started working in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what genders are the people whom alice is friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
person who is friends with someone whose start date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is 180 cm tall and born in the same city as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the start date of a student who started before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who started school on or before the day alice finished school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did employee alice started	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
which student has the greatest end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are friends with someone that stopped working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
alices friends born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what student graduates the earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students who have a start date before either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose job title is same job title as of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what city was alice or bob born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
the job title of a 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is the birthplace of employee who ended after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplaces of students who ended school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who finish before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of student whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with alice and was born on 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what student has a start date before the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all people who belong to one gender	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
who is friends with someone who started working during or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employees last day was most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is gender of students who started in 2004 and later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are 180 cm tall with 2004 start dates	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what employees have a start date that is alices birthday or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name a person 180 cm tall who was born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
person from same birth place as that of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
people that started working before alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are friends with students who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the relationship status of the person that is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
relationship history of a person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
people who studied in universities other than brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birth city of student whose university is not brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the birth city of students with an end date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
an employee who left after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee whose end date is before start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find a student who left on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who quit their job in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the relationship status of an employee who has an end date of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which person was born in more than 2 places	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
whats the gender of the student that leaves before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person is the tallest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-socialnetwork
which employee started after alice left	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who are the friends of the new students that are starting by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship statuses of students who began school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
an employee starting before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
who quit working most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born before alice finished school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
students who ended school the same day that alice ended school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee has the latest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student whose start date is after start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students graduate no sooner than alices first day of work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
one person whose friend started studies before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was a student before or on 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
field of study of someone 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find employees with fewer than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started working in or after 2004 or in or after 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
someone 180 cm tall and same gender as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
when did software engineer alice left	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )	overnight-socialnetwork
what was alices job title from 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
which people are friends with employees how started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees starting contemporaneous to or before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me students end date equal to student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is online and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )	overnight-socialnetwork
what person has two or less friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
name the friend of alice whose birthplace is new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who are male or female	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )	overnight-socialnetwork
friends of alice born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what people are employees of a employer that is not mckinsey friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who started on or after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the gender of students who were born after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
a friend of alice born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
people who are friends with a student whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what students have a start date that is the same as the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with the employee who quit later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of the student who left by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what genders are the people that stopped school in any year but 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
a 180 cm tall male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
where were the people that finished school in or before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person was born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
what is the gender of students who did not graduate before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
name a person 180 cm in height who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee whose start date is before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with the person who stopped working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
friends of people who quit their jobs after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the field of study for people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is the birthplace of employees whose last day was before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees whose start date is 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of employees starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who did not begin school before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is alice studying at brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )	overnight-socialnetwork
find the gender of students whose end date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that stopped working after alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
transgendered people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
find employees starting on or after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who graduated no later than the day alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who quit before alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee that has the lowest job status	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees with last day before or on alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with the person graduating in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students starting before alices last day at work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have an end date that is before the birthday of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee has the latest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who stopped working at the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people with friends who are not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are 180 cm or taller	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
which student from brown university is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
who is friends with the employee starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which students started no later than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what people are friends with a person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find the people who joined their job before alice joined her studies	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what city were more than two people in my social network born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which person claims the most genders	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string gender ) ) )	overnight-socialnetwork
people who joined study on the day alice completed	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person that stopped working before alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
alices friends who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people who are friends with employees who have an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees starting when alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people born the same day alice ended school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )	overnight-socialnetwork
what did alice stop studying in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )	overnight-socialnetwork
employers of all people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
employee whose start date is minimum the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find someone who is female	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )	overnight-socialnetwork
whats the relationship status of students who graduated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is alices gender	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee whose end date is not after alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that are male or female	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )	overnight-socialnetwork
people taller than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
what gender are people that started working in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
males who are online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )	overnight-socialnetwork
what student graduated before alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who was born in the same place as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
employed until 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which person has the least number of relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )	overnight-socialnetwork
people born in new york and 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
which student ended school right when alice started her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who are single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
which employees start the day alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me the student who started before alices departure	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice start school	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )	overnight-socialnetwork
friends of males	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
people that have two or fewer employers listed	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped working before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the students relationship status who ended greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what gender are employees whose job title isnt software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who quit their jobs after alice born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who joined work after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what gender is the gender of two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people born on or before the date alice stopped attending school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
name a person friends with a person that is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
person not born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )	overnight-socialnetwork
people who were born in the same place as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
birth  city of employee whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is the person who is friends with a nonmckinsey employee	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
genders of employees not finishing in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a unique relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find someone born after alices last day of work	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
people born in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
people who are friends with an employee who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are friends with alice and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what employee has a start date of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
all males who were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
students who did not start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people have more than genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
find students with a start date that is no greater than student alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees with an end date that is not 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
gender of an employee not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what was alices field of study as a student	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )	overnight-socialnetwork
people with friends who graduated school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who graduated on or before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of people who are taller than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people who studied the same field as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of employees who dont finish in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
which gender is the student who ended after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose end date is before end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have a start date that is at least either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person that has two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
find friends of employee with end date not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
city where person whose relationship status is single born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
a friend of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
where was alice born	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the relationship status of people that started school in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find a person logged in that was born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )	overnight-socialnetwork
when did alice start at mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )	overnight-socialnetwork
relationship status of student whose start date is not before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender that is shared by two persons	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which people are friends with students who graduated no sooner than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
a student ending when alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school before alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find who alice worked for in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )	overnight-socialnetwork
employees who were hired either in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is alices job title	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )	overnight-socialnetwork
alice who is a student of computer science is a student of which university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )	overnight-socialnetwork
what is the relationship status of the student whose start date is before 204	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who died before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friend of student whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which student started earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is studying the most things	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person has a birthdate no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
what city is the bithplace of an employee who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where were employees who are not software engineers born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee who quit before birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
where were the people that finished school after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
locate students who have an end date that is no greater than employee alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that stopped school when alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who are 180 cm tall and study computer science	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
employees who began working either by 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students whose end date is later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find all people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
birth city of employee whose start date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a friend is someone not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who began school in 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students graduate when alice was hired	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student with only one field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
an employee that ends before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees starting contemporaneous to or after alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who finish after alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person with same gender as that of person 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what are the birthplaces of employees starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
when did alice start attending brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )	overnight-socialnetwork
find students who attended the most universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which is the university alice studied	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees with last days on or before alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee has a start date that is the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students graduate no sooner than alices first work day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the job title of people who have a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
employees other than software engineers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with an employee who start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what person is friends with males	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
what relationship statuses are claimed by people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
what is the university of alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )	overnight-socialnetwork
who is either shorter than alice or same	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
employees who start after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees last day was more recent than alices graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who started on alices start date or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees have had no more than employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is job title of employee alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )	overnight-socialnetwork
which student stopped at the same time employee alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
whats the relationship status of people who are male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
what person is logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )	overnight-socialnetwork
employees who started work before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees had a quit date that was not in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who left the day alice joined	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees who have the fewest number of job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student who graduates before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me a list of students whose start date was in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who started before alice stopped being a student	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what students have an end date less than that of the start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all employees that started working after 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
birth city of student whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find friends of alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
what employees have the same job title as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
friends of students starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
name a person who is friends with more than two other people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find people who have the same relationship status of someone alice is friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
the relationship status of a student not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
alices 2004 employment start date	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
find employees starting before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name the relationship of thie student who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is online and friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
people who are in a relationship	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )	overnight-socialnetwork
what was the gender of employees who left before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
whats the relationship status of the employee starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student that is enrolled in brown or ucla university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee with not more than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the person that is 180 cm tall and is also female	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who were born after alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
which people are friends with employess whose job title isnt softare engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
name a friend of the student who graduated after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are not the same gender as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
what is alices job title from company she left in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
people that are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) )	overnight-socialnetwork
which employees last day was the same day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what people have at least two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
person that stopped school most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where was alices friend born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
find friends of person born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
find all people who are friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the relationship status of current or former students excluding those that started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
show me all employees that leave the company before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find friends of people who started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are friends with alice and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
who has two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
find student with last day other than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which gender are most people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
students who started no later than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with the person who graduated during or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees who started before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
gender of students whose end date is later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people with two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
who has maximum two relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
name a friend of alice who is online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people with two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
alices field of study is computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )	overnight-socialnetwork
name a friend of the student who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who started in 2004 and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
people that are friends with employees other than software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who are logged in with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
people that started working in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
university number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ) )	overnight-socialnetwork
who has two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
find students who have an end date less than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find all employees whose start date matches alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of people that started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student who graduated after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students graduated any year but 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
whats the relationship status of two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
gender which is same as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who finished working when alice started or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students with a start date of employee alice or greater	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
alices friend who is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is friends with a student who does not attend brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is the friend of the student who quit in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people with a height of 180 and an end date of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
employees who started when alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which city is the birthplace of two of the people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employee with the least job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the birthplaces of people who are male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
which employees started on or before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what people are friens with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
students starting after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people were born after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
what is the birthplace of students who graduated no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
start date of alice at mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )	overnight-socialnetwork
what student started after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people whose birthday is the same as alices end date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )	overnight-socialnetwork
find the gender of all people logged in with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find people who has the same birthplace as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
employee whose start date is not 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is the same height as alice at 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find me friends of people who joined their jobs before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student whose end date is same as start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is online that is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )	overnight-socialnetwork
what is the field of study of student alice whose university is brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )	overnight-socialnetwork
who is friends with the person is quit no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who started before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people that stopped working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student with not more than two universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
the birthplace of a student starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born after alice started working	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
what city were people who are single born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
people born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
people who have more than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
name an employee who began in 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name a student who started in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who have a different relationship status than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
students finishing on alices starting day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with the person who stopped working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee with smallest end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the males relationship status	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
what is the average height of a person	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )	overnight-socialnetwork
find males that alice is friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
find the male friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which employee ended on alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birthplace of the employee who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what date did alice quit studying in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )	overnight-socialnetwork
what student stopped before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student left school before alice left school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that have two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
find students who have an end date greater than the start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who are friends with a student whose start date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the gender of person who is born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
birth city of employee whose employer is not mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees with an end date that is the same or later than student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee with least number of job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what city is the birthplace of the employee who started earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is that employee who isnt a software engineer friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what city were alice or bob born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
student whose end date is before birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is schooling start date of alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )	overnight-socialnetwork
what is the relationship status of students who graduated before 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of student whose end date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the relationship status of working people that did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students starting before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
what is the gender of students who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students have the fewest majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who are friends with employees who have a start date of no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are friends with students who started school in 2005 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what students started before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of students with a start date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who has friends that are not employees at mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find single people born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
people who are friends with an employee who does not have the job title of software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where were alices friends born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
which students graduated before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends connections who graduated after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which of alices friends were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what is the relationship status of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people who were born in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
which students have the same major as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee quit most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has the most birthplaces listed	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string birthplace ) ) )	overnight-socialnetwork
who was born in 2004 and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find people  born in 2004 whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
student whose start date is after end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who quit after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person has a birthdate sooner than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
what genders are people that stopped working in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who quit their job in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who ended school on or after the day alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students with last day before or on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people are friends with students who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose end date is so later than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name the friend of a person not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people whose height is 180 cm that are also friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is 180 cm tall and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
employees who finish before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person has their status as single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
find people with same birthplace as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )	overnight-socialnetwork
find employees with a start date no later than 2004 and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what students have an end date that is the same as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a person 180 cm tall and has same birthdate as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find friends of employees who quit the job after 2004 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that started school on or after the day alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students who did not graduate before alice enrolled	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a friend of someone who quit after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the birth city of a worker who started in 2004 or after	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is youngest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )	overnight-socialnetwork
students who share alices field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
the university of someone 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find me all students who graduated after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is born after student alice started	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
what is the relationship status of friend of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
what people have two or more genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
which male has a relationship status of single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
birthplaces of students that started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students started no later than the day alice started work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started working after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people whom are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what people with a birthdate of 2004 are also friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
name a friend of the person who is online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
student whose end date is not before end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is born in a city that alice was born in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what student has a start date close to the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student who started not after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose end date is on the date student alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students at brown or ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee has the earliest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me the birth city of all students whoes end date is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is the newest employee	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people not born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )	overnight-socialnetwork
find the employee who who left after alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students do not attend brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice graduate after studying computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )	overnight-socialnetwork
find students who have an end date that is no greater than student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where was alices friend born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
alice is a student at which university	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )	overnight-socialnetwork
people who are friends with people who got their current job before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me the place of birth for all employees starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees starting after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person has two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
what university did alice attend in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )	overnight-socialnetwork
who left their job the longest time ago	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what did alice study in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )	overnight-socialnetwork
person who completed the education first	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the average height of people	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )	overnight-socialnetwork
what is the relationship status of the student who finished before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born before alice quit her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
what is the relationship status of the employee who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are friends with a student whose start date is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which student was the last to finish	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find alice a student at university	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )	overnight-socialnetwork
which employees stared the same day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
cities of employees who were hired after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student who started after student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what student started on the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what student has an end date no earlier than alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which gender is claimed by at least two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employee who was born when alice quit the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
birth city of employee whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplace of students finishing in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what student has an end date before student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees with last day on or before alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people who are male and 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what employees have a start date that is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the total number of genders	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )	overnight-socialnetwork
who is friends with a student who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the gender of students who do not go to brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employee who quit before alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what people are friends with employees who have an end date before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find friends of students whose last day is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which 180 cm tall people have a start date of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what city were students born in that started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee is starting by the time alice leaves the company	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employee with a start date after alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who did not start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of students not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
places of birth of employees who quit their job in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employee started after 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find those that are friends with students who have start dates earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person is shorter than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
who is 180 cm tall and has a start date in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
name people whose height is greater than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find people with one or two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
students with the same field of study as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students began school before alice began working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school before alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students attended between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person is the shortest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-socialnetwork
who stopped school before alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what male was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
what is the gender of employees terminated on or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student who left on or after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people are friends with students graduating in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee has an end date before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the birthplace of people who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what birthplace has at least two people in it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
friends of employees who are not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who have no more than two fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
either mckinsey or google	( call SW.listValue ( call SW.concat en.company.mckinsey en.company.google ) )	overnight-socialnetwork
which student left school after alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employees have a start date the same as alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who started in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that stopped school the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friend of employee whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students not finishing in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what worker has the most job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students started the same day alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me friends of people studying somewhere other than brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that started working in or before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who is taller then 180 cm logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )	overnight-socialnetwork
which people are friends with students who strated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what people are logged in with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )	overnight-socialnetwork
persons born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find the people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people who are logged in who are also friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
find males who are 180cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what is alices field of study	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )	overnight-socialnetwork
what is the number of city	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )	overnight-socialnetwork
who was born on the date alice left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) )	overnight-socialnetwork
find alices friends who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
who is friends with the person who is graduating in 2004 at the earliest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are logged in and has the birth place as newyork	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )	overnight-socialnetwork
which students have the earliest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what gender are people that started working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me the two people born in the same city	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who has the same gender as alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
name an employee who left after alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the youngest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )	overnight-socialnetwork
student whose start date is the smallest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me the relationship status of students who graduated since 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me all employees who quit before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people who are students of a university that is not brown and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what people have a height of 180 cm and the height of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people who are not alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
employees finishing before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who started to work before alices enrollment in school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students finishing contemporaneous to or after alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
one student who didnt stop in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birthplace of employees who finish before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what students have a start date that is the same as employee alices end date or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people that have two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which students start school the same day alice starts work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what are the genders of people born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
employee whose employer is either mckinsey or google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people with only one relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
people who are single and were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
whats the relationship status of the student that graduated after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is alices job title at mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )	overnight-socialnetwork
which student has an end date smaller than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are friends with someone that started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who have only 1 relationship status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )	overnight-socialnetwork
student whose end date is after end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice start going to the school that she graduated in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )	overnight-socialnetwork
people that started working when alice stopped school or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
locate the gender of students who have an end date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of student whose field of study is not computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the gender of an employee with an end date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find friends of people who quit their job before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is 180 cm tall and has the same birthplace as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find employees whom have an end date that is equal or greater to the birthday of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that are friends with someone that started working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find relationship statuses for employees with a start date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who started on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have start dates later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose start date is not 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the students of the same gender who were born in at least 2004 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what city is the birthplace of an employee whose end date is not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees with the latest end dates	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that have less than two genders listed	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
people that are currently online and friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
someone with over two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find student whose last day matches alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that have two or more relationship stutuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
whats the relationship status of the new student starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
a friend of an employee that isnt a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who was born in 2004 and is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who are friends with someone who started working before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that are friends with someone that did not stop working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees whose end date is less than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who started school when alice graduated in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_start_date ) ) )	overnight-socialnetwork
find the friends of people who joined their studies after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
sex of students that started school in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was born before alices last day of school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
find student with last day on 2004 or earlier	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is the employee with the most job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me all relationship statuses for employees whose start date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
any friend of alice that is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
find the relationship status of people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
find employees with one or two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of working people that dont work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student who ended last	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person who is older then alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
find me the gender of employees starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people with a height of 180 cm and their relationship status	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
which students start date is closest to alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee has the longest employment	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees whose end date is the same as alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who have friends who left their jobs in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
person who is friends with student that did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find friends of people who quit work in 2004 at the latest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is 180 cm tall and is studying computer science	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
persons born before start date of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
what employee has the same end date as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employee whose last day was before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has a smaller end date than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of student who was a smaller date then 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees who started on the same date as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is alice friends with that is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
who has friends that are students and whos end date is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students finishing when alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all people with less than two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
what employee started their job on the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a worker whose company isnt mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped working after alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student whose end date is not before end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find students whose start date is less than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students who will have their last day before alice quits her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people at least as tall as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
who started with alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
where were the working people that do not work for mckinsey born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students with last day before alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that have a friend born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
employee whose start date is after end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find friends of people who didnt lose employment in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
city of birth for all non software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the number of the city	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ) )	overnight-socialnetwork
students who started before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employees have a start date later than 2004 and who are they friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find a student who started no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who joined after  alice joined	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has different relationship status to alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
students who finish after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a student that ends before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has the fewest friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find people whom are friends with employees who have an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who share the same job titles as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of two people with the same status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
students who left before alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who were born in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
who is friends with someone who didnt stop working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee with the largest number of employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me the student who graduated on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees with an end date after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what student started last	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
whats the gender of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
name a person that alice is friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
relationship status of employees not finishing in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student not taking computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me the gender of students who did not begin school in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what student started the day alice quit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of employees who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where were the people that started working in any year but 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees started after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person that is online is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
which company employees the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is employees gender who started in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a friend of a single person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
who is 180 cm tall and has the same birthdate as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employees who quit before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
males who were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
relationship status of employee whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student with less than two universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of alice and bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
what did alice study at brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )	overnight-socialnetwork
which people are 180 cm tall and have a birthdate of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
who is friends with a person who didnt stop working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where are people born who are 180 cm in height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find the relationship status of employees with an end date earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender	( call SW.listValue ( call SW.concat en.gender.male en.gender.female ) )	overnight-socialnetwork
people that are friends with alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
genders of employees who arent software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find single friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
what students have a start date that is no greater than employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of employees whose last day was no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees with the fewest job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
shortest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-socialnetwork
people shorter than 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
person who has been in less then 3 relationships	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
find people who are 180 cm tall with last day in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
is alice going to brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )	overnight-socialnetwork
who are some of alices friends connections	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
people who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
birthplace of students born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what city is the birthplace of less than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what is the job title of the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find people with birth date not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
which students have larger end dates than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what people are friends of employees that have a start date before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who are 180 cm tall and logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )	overnight-socialnetwork
students that are starting before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which working people have less than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all people that have two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
what people have the same birthdate as those whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
birthplace of employees who joined before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
all 180 cm tall people who quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what gender is the student who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which date did student alice left	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )	overnight-socialnetwork
a person with a friend whos not a computer science major	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people with two or more birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
find employees whose end date is the same as the start date for student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the students relationship status who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who stopped school on or after the date alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
an employee starting when or before alice ends	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee has a start date on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all people that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string logged_in ) ) )	overnight-socialnetwork
what employee ended at least on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who go to the same university as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have a start date that is no later than the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find students whos end date is equal to alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where were the people that stopped working before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what person is friends with the employee who is not a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees started on or before alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all people who is friend with people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
when was alice born	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )	overnight-socialnetwork
what employees have two or fewer job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
whats the relationship status of employee who quit their job after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees started work after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name the person with a height of 180 cm who is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find employees called software engineers who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
friend of student whose end date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the gender of the single people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
who graduated before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school after alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with a relationship status that more than two people have	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
birth places of employees other than software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that have two or less friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
whats the gender of the students who are not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is not 180cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what is the relationship status of employees starting in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
presently logged in persons whose relationship status is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
when did alice quit working for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )	overnight-socialnetwork
name the single persons friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
find birthplace of males	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
who goes to brown university or ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who completed their studies before alice joined	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have an end date that is no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who are friends with no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find friends who are 180 cm tall like alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
show me all employees leaving before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people of the least common gender	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find someone with two or less birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
people who have friends who did not begin working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what students have an end date that is no earlier than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
the birthplace of a student starting before or during 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
name a male who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
person who has two or more friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people that started work in or before 2004 or in or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees who started in 2004 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birth city of a student who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find birth cities for students who have a start date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
name a friend of the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find employees whom have a end date that is no later than the start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student who joined after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee quit before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
an employee starting before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is born in new york or beijing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )	overnight-socialnetwork
what is the gender of people attending any university but brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employees last day was the same day as alices graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has two different relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
where were the people that started school in or before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who did alice work for when she quit her job in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )	overnight-socialnetwork
what relationship status is claimed by more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people who are at least as tall as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
what is the relationship status of those two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find people with birth date same as employment end date of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )	overnight-socialnetwork
find friends of people who quit their jobs after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student who started after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a friend of a noncomputer science student	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who has friends who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is relationship status of students starting in 2004 and after	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me all the people that are 180 cm tall and were born in the same place as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which city were alices friends born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
who is friends with students that have an end date of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
where was alice not born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
which student started after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students started after or at the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students ending date is greater than 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee left the day alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
alices friend born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
what students started between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person is online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string logged_in ) ) )	overnight-socialnetwork
which student left first	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where were people that started work before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what gender are people that started school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the the relationship status of the employee who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what person has two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
friends of students starting in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birthplace of students who are not studying at brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are friends with alice and male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what city were most people born	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employees with the same job title as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee whose job title is not software engineer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what was alices job title while working for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )	overnight-socialnetwork
find students whose last day is the same or later than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is alices termination date	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
what city were less than two people born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what job did alice leave in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
person with same birthdate of person with 180 cm height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find friends who are not in computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what people are friends with students who have a start date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
person alices height or taller	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
which worker left on or before the day student alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is born on or after start date of employee alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
birth city of no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find all people with relationship status that is the same as the person that is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
employees who finish when alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
one student who started on the same day as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all people who are 180 cm tall and currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )	overnight-socialnetwork
who is the friend of the employee whose start date is at least 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the employees relationship status who did not end in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employees are not employed by mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
either 2004 or 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )	overnight-socialnetwork
find employees that have the greatest amount of employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who have less than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people who completed studies with or before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name a friend of the employee who started working no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student started after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find student with the latest starting date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person born in new york in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
who is a software engineer that is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
people who arent alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
students who graduated before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what student began before student alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person that has an employee friend who starts to work by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what gender is the employee whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of an employee who has worked since 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is alice friends with who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
friends of people who completed their studies after 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me the student who started on the same day as alices departure	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
city that most number of persons born	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
student whose field of study is not computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all people that were born in new york that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string logged_in ) ) )	overnight-socialnetwork
what is the relationship status of people that started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who are the students studying computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student who graduated before alice started her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find a person with less than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
how many companies are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ) )	overnight-socialnetwork
who are the employees who quit before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
whats the relationship status of students that did not study computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are friends of bob or alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
people that stopped school when alice was born or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of people studying something other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employees last day was in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
birthplaces of employees not finishing in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped working when alice stopped school or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what are the relationship statuses of people born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
student who finishes before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people that are friends with employees whose start date is later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what is the gender of students with a start date that is not the same as 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees with one employer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
alice whose field of study is computer science ended on what date	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )	overnight-socialnetwork
gender of an employee that ends during or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees have a job title other than software engineer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees who have an end date the same as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of at least two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what person was born on the last day of alices employment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )	overnight-socialnetwork
birthplace of employees who started in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that started working before alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of students who graduate after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who quit at the same time or after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
find people born in new york or beijing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )	overnight-socialnetwork
relationship status of student whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what university will alice finish in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string university ) ) )	overnight-socialnetwork
alices friend who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
people who started working before alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who graduated after alices first work day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is relationship status of students with end dates other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birth city of employee whose start date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student whose start date is not after start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what student hast the earliest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birthplaces of people who studied in fields other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the birth city of students whose end date is less than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find birthplaces of students not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are born the same day alice started her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )	overnight-socialnetwork
what is the birthplace of the employee who left after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people with only two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find the student who graduated on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
any friend of anyone born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
when did alice start working for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )	overnight-socialnetwork
relationship statuses of students that dont go to brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
how many employees share alices job title	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who was born on alices first day of school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) )	overnight-socialnetwork
find friends of students with start dates other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person is friends with the person logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
what person was not born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )	overnight-socialnetwork
find everyone who is either single or married	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )	overnight-socialnetwork
find people who have a birthplace of new york and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
who are alices male friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee with smallest job history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who has maximum 2 job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of employees who quit before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped school when alice stopped working or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee has an employer that is either mckinsey or google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees last day was not n 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is alice friend born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
people who joined their studies after alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student started earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who are 180 cm tall and left their job in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
student whose start date is not before start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student does not attend brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee ended no greater than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
an employee ending before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person is 200 cm or shorter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
find students who have a start date equal to student alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
either number of field	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )	overnight-socialnetwork
birthplace of students who start before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birth city of all students who started earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees who are software engineers or program managers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started school after alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who employees alice as a software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employer ) ) )	overnight-socialnetwork
find students that have the latest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students who have a start date the same as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
students who ended school the day alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with the employee who began later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employee has a start date later than the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are friends with students not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birthplaces of people joined studies before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee started on or after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee started after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
when did alice start her job	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
which people are friends with employees whose last day was before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with someone whos birthdate is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
students finishing with alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees starting in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students whose university is either brown university or ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is the same gender as the 180 cm person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
employees starting on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
either new york or beijing	( call SW.listValue ( call SW.concat en.city.new_york en.city.bejing ) )	overnight-socialnetwork
find employees who have an end date earlier than employee alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name a person who is 180 cm tall the same height as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is the employee	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is alices job title	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )	overnight-socialnetwork
people that started working when alice stopped working or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
cities that alice was not born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
what employees left when alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who was born in the same place as the 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what students have start dates greater than those of the end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
connections from friends who dont work at mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who went to school but did not start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of employee who joined before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
whose relationship status is not a unique	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
how many relationship status options are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ) )	overnight-socialnetwork
180 cm tall people worked at mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
what is the job title of alice who works for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )	overnight-socialnetwork
find friends of people born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
a student ending before or during 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students starting in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birthplace of employees who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
friends of people with 180 cm height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is birthplace of employees starting in 2004 and after	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees have the least amount of employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
the birthplace of someone not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people of the most numerous gender	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employee who joined before alice quit the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has friends whos end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employees started before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
software engineers whose height is 180cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
find the gender of people 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
persons whose height is 180 cm or more	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
birthplaces of employees who started working in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which of my friends connections are online now	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
find all people who have alices as a mutual friend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
gender of employees that started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
name a person that is friends with an employee who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee whose end date is after student alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which relationship status is claimed by at least two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which employee ended between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee has no more than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started school when alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of employees not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who began school at the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students started at the same time the employee alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what cities were the males in my social network born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
people who joined their job after alice joined her study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with a person who graduated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what city was two people born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is single from new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
who is younger than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
people who were born on or after alices first day of work	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
find people who are friends with empoyees whose last day was not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student of only one university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice start the job that she quit in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
people that stopped working when alice started school or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student whose end date is not after start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who started after alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me the genders of employees who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who have single friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
which students field of study is computer science of history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what relationship status do two people share	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
the gender of a worker who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is gender of students with last day in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people with a height of 180 cm and micknsey as their employer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
birth city of employee whose start date is at most 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of studetns who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who were born on or after the day alice quit her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
one worker who began in 2004 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what people have more than two relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
people that stopped school after alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which university did alice study computer science at	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )	overnight-socialnetwork
people that finished school at the same time as or before alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people that are the same height as or shorter than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
students who finished by the time alice finished	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose start date is after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what are the birth cities of students with a start date before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me a program manager or a software engineer	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )	overnight-socialnetwork
find the people with the only one gender	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string gender ) ) )	overnight-socialnetwork
a friend of a student who started at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students with one field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of all the people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
what person is friends with an employee who does not work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
students who finished school by 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee has less than two previous job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people with the same relationship status as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )	overnight-socialnetwork
what people are friends with employees who have an end date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who started on or after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of a person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find students who started in 2004 or in 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find me employees who were no longer employed after alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
show me which cities the people starting before or after 2004 were born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with a student who started	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birthplace of students not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
name the students of brown university 	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who share the same birthday as alice and are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what student had an end date that is later than the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started working before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped school after alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the gender of a student whom has the end date not equal to 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee has fewer than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who quit before alice was hired	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees friends not employed at mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what students go to the same university as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person hast the most number of relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string relationship_status ) ) )	overnight-socialnetwork
what city is the students birthplace who ended at least in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees who have a start date other than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
an employee starting after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who quit their job on the same day alice started her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee is not the software engineer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a friend of someone who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what sex are the students who ended from 2004 on	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that started working when alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee has a start date that is the same as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of employees whose start date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that have the most friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what gender are the people that finished school in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
when did alice graduate from brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )	overnight-socialnetwork
what is the birthplace of the student who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees with an end date that is less than alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
person that has the most job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who started before start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find friends of people who were born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
find the gender that more than two people share	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what students have a start date that is no earlier than the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students started on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students who strated before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee has a start date that is no earlier than the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of students finished after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what gender is the student whose end date is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with the person who started working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
anyone has similar relationship as of anyone logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
who is studying less than two things	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice start being an employee	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
which people have more than two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
name a person who is 180 cm who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
which students started no earlier than alices last day of work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose field of study is either computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people that finished school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
an employee who left on or before the day student alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what relationship statuses are not claimed by alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
people who were born in 2004 and are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
employee ending after alice ends	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me one of alices male friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is friends with an employee from at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship of the student who did not attend brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who are the friends of those not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
fine me friends of people who joined their jobs after 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplace of employees starting in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender of employee whose start date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who did alice quit working for in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )	overnight-socialnetwork
find students with last days before alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has same relationship status as that of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )	overnight-socialnetwork
who is 180 cm tall and has an end date of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
gender of employee whose job title is not software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me all people who are not in a relationship with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
people that have a friend that started school in a year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find everyone born in new york who is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find the employee that was hired closest to the date alice was hired	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find friends of employees who started in 2004 or after	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which students go to the same university as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who started after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who studying computer science is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
who is the birthplace of students not majoring in computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are software engineers or project managers	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )	overnight-socialnetwork
who is friends with the person who stopped working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped school after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employees quit after 2004 or after 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of the student who started in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the people who joined their studies before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student started school the earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name an employee who started before the student named alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a student ending before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are not male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )	overnight-socialnetwork
what person is younger than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
student who was a smaller start date than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose start date is the largest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student who starts at least before alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose start date is not before start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the date that alice started studying computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )	overnight-socialnetwork
friends of people who studied the fields other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was born in 2004 and is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employee whose start date is same as that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person is 180 cm tall and is alices friend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find friends of employee without title of software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what people have a birthdate that is 2004 and whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
who has a relationship that started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that stopped working in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
friends of people who quit their jobs before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
friends of people who completed their studies before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person has a birthdate between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
find people with height either 180 or 200 cm	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )	overnight-socialnetwork
working people that did not start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped school after 2004 or after 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of the student not in computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people shorter than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find me 2 people in a relationship	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
person whos birthday is before alice graduates	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
students who started school when alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person who hasnt been in 3 relationships	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
find people of the same gender as the person logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
people who are single and friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is the oldest person in my network	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )	overnight-socialnetwork
what people have a birthplace of new york and a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
students finishing contemporaneous to or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of students finishing after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people 180 cm tall who were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
students with the fewest fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which friend of alice is online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
student whose fields of study are smallest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students that ended school on the day alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends of alice that are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which employee quit before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a student not ending in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me friends of the student that is is leaving before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
anyone who is alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find employees with start dates after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started school when alice stopped	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who have friends that were born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
when did alice quit job at mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )	overnight-socialnetwork
alices birthplace	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )	overnight-socialnetwork
find all friends that are not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the job title of alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )	overnight-socialnetwork
what is the gender of employees who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find friends of students not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that were born before alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
find employees who have a start date earlier than the end date of the employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name a person 180 cm tall who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the gender of an employee whose end date is earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student with most number of field of studies	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person with minimum two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
name a person 180 cm tall who quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what is the relationship status of employee whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people with two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
which students end date happends the same time as  alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find males that are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
what employee has no more than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees have no more than 2 job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that are friends with someone that is single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
what is the relationship status of employees who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
single gendered people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string < ) ( number 2 ) ) )	overnight-socialnetwork
where was alice born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people with the same gender as alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
find the gender of students whose field of study is not computer science 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me all of alices friends who are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people that have a friend that started school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees who quit in 2003 or earlier	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person is friends with the online person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
students who start on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birthplace of a person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is the gender of employees who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who are not bigger than alice in height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
a friend of alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
name a friend of a student who did not study at brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who has the least number of relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )	overnight-socialnetwork
employee whose start date is minimum 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status for students with a start date not equal to 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birthplace of students who finish contemporaneous to or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what student has an end date that is at least either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of students who did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
where was alice born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people that are friends with someone that stopped school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who start after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birth city of student whose start date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which student has attended the fewest universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find the shortest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-socialnetwork
find friends of employees with last day in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people that are friends with employees who have an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who were born in 2004 and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find employees who quit theri job before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
gender of persons who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what students have end date names that are either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee started the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
whats the relationship status of the student starting on or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person has a birthdate with at most that of alices	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
find employees working for the most employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who quit the same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is single and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find students with start dates other than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
anyone friend of a male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
which students started no earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who are friends with employees who strated in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the job title of alice whose employer is mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )	overnight-socialnetwork
find the gender of people born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
find me friends of people logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
friends of people that are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
what university did alice attend	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )	overnight-socialnetwork
which persons are friends with employees that started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what person doesnt have the height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
who is friends with an employee who started in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people that have at least two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
employee with largest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find someone who is as tall or shorter than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
people that are the same height as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.person.alice ( string height ) ) ) )	overnight-socialnetwork
find me the person with the least friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string friend ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is born in new york and friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find employees starting before or on same day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person has two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
student whose start date is before start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee had a start date as early as or later than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who are starting before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people who are friends with the employee that will be leaving by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped school before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who started in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find males born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
who is friends with employees whos end date is larger than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student whose start date is not before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose end date is before end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students whom have the earliest end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employees started no sooner than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee started earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people who are friends with alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
relationship status of student whose start date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of all students who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
alices friends who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who were born after alice started working	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
which employees started employment before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of a student whose start date is not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are 180 cm tall before 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
who was born most recently	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )	overnight-socialnetwork
employees who started before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born in new york or beijing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )	overnight-socialnetwork
people that started school before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees friend with start date after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
working people that are not software engineers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee finished the same time alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the friends of employees with an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me all the online singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )	overnight-socialnetwork
people that are friends with someone that stopped working in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees whose last day is after student alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
the relationship statues of a student ending in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
where is the birthplace of the student who left school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friends of students starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
the gender of a student starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born on or before the day alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
people who are not studying computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of a student with an end date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that are friends with the new emplyee starting before2994	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student started after alice stopped going to school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship statuses of employees who started working in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students with an end date earlier than that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice leave in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
find the city of birth for all employees that quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
alice started her job in 2004 when did she leave it	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
birthplace cities of students who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
180 cm tall person with birthdate in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
students who began school on the same day alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with at least two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people that are not single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )	overnight-socialnetwork
name cities when shared with more than two persons as their birthplace	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what employees have jobs whose title is the same as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what genders are alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
people who are friends with people who dont work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me everyone born in new york who is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
employee who quit on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what student has a start date before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what persons birthdate is at most the same as alices start date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
what are the relationship statuses of employees that do not work at mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what city is the birthplace of employees who have an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find males who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
which people are friends with employees who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students friends who ended in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employees has the largest amount of job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started school when alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students am i friends with who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
any male who has logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
find employees with job title not software engineer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all the students that started in 2004 and after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose start date  is before alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students graduate no later than alices first day of work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which university did people who are 180 cm tall attend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
a friend of someone 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find the date that alice started her software engineer job	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )	overnight-socialnetwork
employees who quit after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who graduated before alice started work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
an employee ending in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is the friend of the employee who employment end date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find all  friends with student with end date other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
how tall is alice	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )	overnight-socialnetwork
employee who has a smaller date than 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started working when alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the employees that were hired before alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a person whose friend started on or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who started after alices last day at the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is 180 cm tall working at mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
person who is 180 cm tall with computer science as field of study	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
what is the gender of people that stopped school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which student graduated after alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students starting before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find birthplaces of employees who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that started school when alice started work or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people that started working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employee started after employee alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee of mckinsey is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
gender of students finishing on or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is alices first day as a software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )	overnight-socialnetwork
employees who start after alice leaves	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find a person who is taller than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
who has minimum two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
students who are studying the same field as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students who are not part of brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find relationship statuses for employees who dont have an end date of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the gender of employees who have an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped working when alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students with a start date that is greater than or equal to student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students with an end date that is equal to or greater than the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who have more than two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
which student ending date is earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birth city of a worker who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that started school when alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people with friends who did not start work in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped working in 2004 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which cities were alices friends born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
find all people that are single and currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
students who finish before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what city was alice or bob born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
people who are friends with an employee that started later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where are all employees born who are not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped school when alice was born or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is alices birthdate	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )	overnight-socialnetwork
single people born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
friends of employees who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student whose end date is not after end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees starting on or before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which computer science students are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
who is studying something other than computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
how many males or females are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )	overnight-socialnetwork
who is the friend of an employee whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what person is logged in and was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
who is friends with the online person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
what job did alice start in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
find employees starting before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with employees who have an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
friends of male people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
what is the gender of one or two individuals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find the employee that was hired closest to the day alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the genders of students whom have start dates earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are friend with students that have an end date not of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the relationship status for people with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find students with last day after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which gender had more employees start after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
when did student of computer science alice finish	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )	overnight-socialnetwork
what students have an end date that is the same of later than student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is single male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
which employees started no later than the day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees starting on or after alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped school at the same time or before alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people shorter than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
a worker who began on or before the day student alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person has the same gender as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.getProperty en.person.alice ( string gender ) ) ) )	overnight-socialnetwork
what students have an end date that is the start date of employee alice or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who works at mckinsey and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
which student ended no later than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who joined their study with or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student not studying at brown	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students started before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
alices friends relationship status	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
people that started working after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what are the relationship statuses of employees whose start date is earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student ending before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students last day was the around the same day as alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employees started on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
friends of employees starting in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who are the friends of employees who did not quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what city is the birthplace of the employee who ended working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who started working on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees had an end date before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people whose gender is same as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
people who were born after alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
relationship status of students whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person is logged in and has a birthdate in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string logged_in ) ) )	overnight-socialnetwork
find student whose last day is before or the same day as alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who start after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which cities were people 180 cm tall born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find students with last day is on or after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of employees finishing before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that are currently online that are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )	overnight-socialnetwork
find me a person born in 2004 in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
who was born on alices start date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )	overnight-socialnetwork
find employees with last day in 2004 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who started working the same day alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who started later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school before 2004 or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birthdate of the person with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
employees starting on or after alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a mutual friend of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
persons born in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
who has friends with an end date that is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people with two or less friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
person who first joined his study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birth  city of student whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what are the birth cities of employees who are not employed by mickinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what are the relationship statuses of people who quit their job in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who enrolled on or after the date on which alice completed her studies	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birth places of employees who quit in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student ended after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
history or computer science	( call SW.listValue ( call SW.concat en.field.computer_science en.field.history ) )	overnight-socialnetwork
employees finishing contemporaneous to or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is alice friends with that is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
genders of people that are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
relationship status of students not finishing in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are 180 cm tall and in a relationship with ailce	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
single people who was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find people who are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who joined their study before alice completed	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student started on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
in what cities were students who started before or in 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that started work when alice started school  or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
most popular birthplace	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find friends of employees with 2004 end dates or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find all the employees that had no more than two jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employees have been here less time then alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee has the same boss as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students have fewer than 2 majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school on or before the day alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birth place of people who completed education after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person has a friend who is a student at a university other than brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which genders are alice and bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
find employees who have a start date earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people with alices birthday who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who are friends with the new employee that will be starting before before or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee is leaving the company on the same date that alice starts her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
student whose start date is end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employees have an end date that is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
in what city was the 180cm tall person born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
number of jobs held	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ) )	overnight-socialnetwork
students whose start date is smaller than 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
place where alice was born	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )	overnight-socialnetwork
find me everyone at least as tall as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
what is the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students completed school by the time alice began	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students who have a start date smaller than that of the end date for employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
is this person male or female	( call SW.listValue ( call SW.concat en.gender.male en.gender.female ) )	overnight-socialnetwork
student who started at or before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who studied at the least number of universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who started on alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born in 2004 and who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what employees are either software engineers or program managers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find relationship statuses for students who have an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who leave after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what day did alice start her job in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
which students started school latest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with a gender of male whom alice is friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the relationship status of people studying anything but computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of only one person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people who are friends with those who completed studies before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
either brown university or ucla	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )	overnight-socialnetwork
find the person that is 180 cm tall and is a software engineer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
students who started after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people with friends who have jobs but not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employees last day was no earlier than alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is shorter than 181cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find the gender of people who are single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
name a student who will graduate no later than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students that have the fewest universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what people have birthdates between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
name a person born in 2004 who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what employees have a start date no later than that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the most common relationship status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
gender of employees starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which of alices friend is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people that are friends with someone that started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplace of employees who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
an employee starting after alice ends	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people with a height of 180 cm and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find people who are students with a start date later than 2004 and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what students have their field of study in computer science of history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students who finish before or contemporaneous to alices start	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is one worker who left on or before the day employee alice left	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people who have a birthplace the same as those with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
who is alices single friend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
who has two or more relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
whats the gender of the student that befins after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
an employer with at least two employees	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which student began on the same day as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what was alices field of study	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )	overnight-socialnetwork
which student has the earliest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the realtionship status of employees who are not employed by mickinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student quit at the same time the employee alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the friends of people who joined their studies before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees with fewer than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
persons born in new york in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find the birthplace cities of employees whom have a start date not equal to 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
how many students in this field	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )	overnight-socialnetwork
which employee started after alice was hired	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
friends of people not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who has the same job as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
field of study of alice ended in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )	overnight-socialnetwork
which date did computer science student alice start	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )	overnight-socialnetwork
an employee that isnt a software engineer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what gender is claimed by more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which people are friends with students who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is the friend of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people who are not male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string ! = ) en.gender.male ) )	overnight-socialnetwork
what companies employ people with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people who are single and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
who is logged in as well as logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )	overnight-socialnetwork
who is friends with the person who didnt start working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students starting on or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people with a gender that less than two people have	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people that are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
person who last joined the study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who have a height of 180 cm and a relationship status of single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
birthplace of students not at brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find males who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
student whose end date is not after end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is a friend exclusively to alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people that started school on or after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees who quit their job in 2005 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
any male who is born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
which employee ended in 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the relationship status of students whose university is not that of brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of employees who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people that stopped working before alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find friends of alice that are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find me an employee whose end date is later than the end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find alices friends who were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which students started in years other than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people who stopped working in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
alices friends who were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is 180cm or higher	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is alices job title	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) )	overnight-socialnetwork
find students whose first day is after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who are the students starting at the same time or before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find employees starting in 2010 or earlier	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which people have less than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find employee with same job title as alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) )	overnight-socialnetwork
students who ended school in 2003 or earlier	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a student with two or less universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students whose end date is either greater than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the most common gender	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
whats the relationship status of student who was born in at most 2004 	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which people are alice not friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
find me all end dates of all employees named alice who studied at brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )	overnight-socialnetwork
find people whos height is in between 180cm200cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
find the genders of employees who start date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what person has a height of at the most 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find students starting after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has the same relationship status as the 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what student has only one field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
who is friend of either alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
who was born in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
people those who are friends of friends of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
who has the same birthday as the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people that stopped school when alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employees end date is earlier than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
all 180 cm tall singles	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
birth city of student whose end date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are friends with the employee that does not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees with last day matching alices first day at school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are 180 cm or less in height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
gender of employee whose employer is not mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with the employee who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is a person whose height is 180 cm and thats friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which students graduated in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students that graduate on the same day alice starts her new job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students not studying computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students from brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )	overnight-socialnetwork
students who started school after alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
gender of employees other than software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student whose start date is after end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
where were students that did not finish in 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the status of the 180 cm tall persons relationship	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is the relationship status of students who started no earlier than	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employees have a start date that is the same as student alice or greater	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who joined on in 2004 and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what employees started at the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find people with three genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
which students started no earlier than the day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of the students that did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what student has an end date no later than the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student who graduated before alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose end date is before start ate of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
when did alice stop attending brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )	overnight-socialnetwork
people who quit their job after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employee with start date on or before alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees friends with last date of work before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which students starte school the same day alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose end date is after start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of employee whose end date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
whats the relationship status of employees who are not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
whos got more than 2 genders down	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
where were people that stopped working in or after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students finishing on or after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all people that are friends with the employee starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
person whos 6 feet tall and studies computer science	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
is the person male or female	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )	overnight-socialnetwork
who started working the same day alice left	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which city a person is born in whose year of birth is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
a student who left on or before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of the person logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
people that finished school before 2004 or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a student who left before alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me the employee who has had the most previous jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people with same birth date as alice or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
relationship status of employee whose end date is not before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find all people who born in new york in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
birthplace of employees whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees with the same last day as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employees have mickinsey as their employer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me the student whose field of study is not computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find friends of student who started later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friends of alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
when did alice start her study in the field of computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )	overnight-socialnetwork
two or more gendered people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
who is same gender as of at least two persons	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is male and friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what students have a start date that is equal to alices birthday or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of people who joined their jobs after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what relationship status is that of two people at the most	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
name a person who quit no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which gender is the employee who ended after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who finish on or after alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee has less than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what are the current relationship statuses of employees who have a start date that is anything but 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student that attends the same university as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has a single friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
people that stopped working when alice started or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who started in or before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student who left on or before alices joining	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friends of alice that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
employees whose end date is no earlier than alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is alices first date of studying computer science in school	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_start_date ) ) )	overnight-socialnetwork
gender of student whose start date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
students who didnt graduate in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are not 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
friends with employee who are born atleast before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of fewer than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find me the employees who quit between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is the software engineer who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
when did alice stop working as a software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )	overnight-socialnetwork
find all male friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
students who left by the time alice left	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which relationship statuses are claimed by the males in my network	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
which people are friends with students who started no sooner than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employee started earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all people who are friends with less than two other people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
sex of people who began school in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find all alices friends that are male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
alices friends who are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find me a person with the same or later birthday as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
name the friend of alice with a height of 180cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what gender is the employee who is not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who began school after alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of two persons	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what people have two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
find the tallest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-socialnetwork
people who were born before alice started her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
what is the relationship status of employees who began working by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who ate 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
which employees have fewer than 2 job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
friends of people who completed their studies in an year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are friends with a student who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find employees with an end date that is no later than alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people born after alices graduation from school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
student who has not more than two fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the student end date at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is 180 cm tall and the same relationship status as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is the 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
who does mckinsey employ who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
name a person in more than two relationships	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
who is online and is friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
a student with two or fewer majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has three or more relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
who are people with a birthdate of 2004 friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
find people born after alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
people that started working the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find student with last day on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the students whose end date is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who are friends with employees who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student who started after alice left	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of employee whose job title is not software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which students started no earlier than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have an end date after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
birth city of student whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employee started after the student named alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which student started on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends of people who started school in 2004 at the latest	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
where wa alice not born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
a student starting after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which 180 cm tall people started in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
when did alice start working as a software engineer	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )	overnight-socialnetwork
someone with two relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
gender of student whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find alices singlestatus friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the status of alices relationship	( call SW.listValue ( call SW.getProperty en.person.alice ( string relationship_status ) ) )	overnight-socialnetwork
what students had a start date of 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of employees sho started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students starting 2010 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who were born after 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
what city is the birthplace of an employee who has a start date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employee has the greatest number of employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students who start before or on 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which of alices friends are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
person who is friends with a student that graduated in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students with a start date after either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee who works for mckinsey or google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find alices friends who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
what is the relationship status of the two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what is the birthplace of the person born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
friends of people whose job title is not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
relationship status that is not similar to alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
whats the gender of students who started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which people have a birthdate of 2004 and are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
name a friend of a student who did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people logged in who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
what employees have a start date before that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is gender of students starting in years other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
friends of people who quit their jobs in an year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are friends with an employee that started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with the person who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
when did alice stop working for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )	overnight-socialnetwork
person born in new york and who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
people that have employed friends that did not start working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of students who are not majoring in compuer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employer of alices ended in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )	overnight-socialnetwork
who are men friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
what is the birth city of students who have a field of study other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was born in 2004 and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
180 cm tall person with same relationship status as that of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is job title of alice who is employed since 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
someone 180 cm tall who started in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what city is the birthplace of an employee that is not a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what student has a start date the same time as the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what cities were students born in who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the end date of alice at mckinseys	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_end_date ) ) )	overnight-socialnetwork
find students with fewest fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
any male born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
people with at most two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what is the universitys number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ) )	overnight-socialnetwork
when did alice stop working	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
find me an employee whose start date is before or equal to the end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me the birthplace of employees who quit since 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which students graduate the day alice starts school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of the students who dont graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the gender of students who have a field of study in something other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the relationship status of students with a start date less than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employees last day is no later than alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
mention the name of an employee whose end date is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the city that is the birthplace of only one person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
which students started before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is alices boss	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees started no later than alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birthplace of employees whose last day was after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what employees have an end date that is smaller than that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who joined before 2005	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students started after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employer has the least amount of employees	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name a person who is 180 cm tall and who quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what genders are people that started school in any year but 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people born in 2004 who are friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
a student who left at the same time as alice or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of employees whose last day was not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
gender of a student who was enrolled after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender of students whos end date is 2004 or more	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employee who started earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is the same height as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string height ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which employee was the first to be hired	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name the birthplace city of the employee whose end date is larger than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with an employee who started in a year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students with a start date that is earlier than that of fellow student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are friends with someone that started school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the people who are friends with people who quit their job before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people with a height of 180 cm that go to brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
what sex are the students who stated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which city is the birthplace of two or less people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
a friend of someone born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
find people 180 cm tall with 2004 end dates	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
who is friends with alice and has a birthdate on 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
who are the friends of students with an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is male and 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find me all students who have only one field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose start date is before the start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what person has two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
employees who started after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students whose end date is larger than 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what worker left before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
fins birthplaces of employees with last day after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees who have a start date no later than student alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employee started earlier than alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of max two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people that started work when alice started school or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
friends of employees who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees whose end date is after alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born on or after the day alice quit working	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
find me all people who are not friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
what was alices last day of work	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
people that studied at at most two universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what employee has an end date that is at least the end date for the employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
person that started working most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students whose end date is 2004 or earlier	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that started school after 2004 or after 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all students that will be leaving the company by the time alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person has the least friends	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string friend ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who is a person whose friends with alice that is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
anyone single who is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
student who finishes at most on 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find a list of cities that students whose end date is at least 2004 were born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people whose end date is not in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who started working at the same time as or before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the friends of people who quit their job after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find the birthplace of people who are 6 feet tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find me the oldest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )	overnight-socialnetwork
what student ended school before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which student left most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find all people who are mutual friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
which student started after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employees with the most job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all of alices friends that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
people who completed study before alice joined the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what employees have an end date that is employee alices start date or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find phone number of university	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ) )	overnight-socialnetwork
people who are single that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )	overnight-socialnetwork
what are genders of students not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which university does the person who is 180 cm attend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
job titles of all people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find people who are 180 cm tall with 2004 start date	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what are the current relationship statuses of students with a start date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends with the person who started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who were born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
gender of student who does not finish by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find a person who is a student with a start date that is not 2004 and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the relationship status of a worker who left before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find student with start date before or on alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students starting before or with alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of students with an end date ealier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what city is the birthplace of a student who graduated 2004 or after	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students who attended one or two universites	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students who have an end date that is equal or later to that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of students with last day in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who started first	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what people are friends with students whom have an end date that is no greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what students have a start date that is anything but 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has minimum number of relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )	overnight-socialnetwork
what field is alice studying in brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )	overnight-socialnetwork
male friend of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
what student had a start date no earlier than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the city that is the birthplace of at least two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
who was the last employee to quit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of employees who did not stop working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
where were employees at companies other than mckinsey born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who stopped working in 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which employees strated before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students starting on or after employee alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find students studying fields other than computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find people who are not friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
a 180 cm tall mckinsey employee	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )	overnight-socialnetwork
student whose end date is before start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me all the people who are friends with people that did not attend brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
select new york or beijing	( call SW.listValue ( call SW.concat en.city.new_york en.city.bejing ) )	overnight-socialnetwork
gender of people studied in fields other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
gender employee whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are the same height as alice or shorter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )	overnight-socialnetwork
people born after alice finished school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )	overnight-socialnetwork
birthplace of people who completed their study in an year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the relationship status of people that started work in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what are the birth cities of students who have an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people that are friends with students hired to start on or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is friends of employees who have a job titale other than software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find students friends who started in a year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what city were two or fewer people born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
whos friends with someone who left a company or retired before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employee who starts after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
person born after alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
birthplace of students who did not join in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the relationship status of the majority of people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
an employee ending after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which people are friends with students who didnt graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the gender of employees whose start date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which people are single or married	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )	overnight-socialnetwork
which person born in new york is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
student that has studied at no more than 2 universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which men is alice friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
find employees who started on student alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employees who started before alice quit school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born in any year except 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
friends of people who completed their studies after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find friends of people who do not work at mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find all alices friends that were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
where was alice not born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
relationship status of student who does not graduate by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the people who joined their work before 2005	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the number of the field	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ) )	overnight-socialnetwork
students who started in 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the birth city of employees with an end date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who has friends who are single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
find all people who have more than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
birthplace of employees finishing in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are born in new york and are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
which single people are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
which employee started no later than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what university did alice study computer science at	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string university ) ) )	overnight-socialnetwork
student whose end date is after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
students whose quit date of job is same as employee alices 	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has similar relationship status that of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who is the friend of a person whose end date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was born on a date before alices start date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
relationships statuses of employees who dont work as software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who was born in 2004 who is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what person has a birthdate earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
people who are friends who employees who didnt quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me the genders of students who attended after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what city was the employee that started after 2004 born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee whose start date is after the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who has a birthdate at the end of alices employment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
gender of student whose field of study is not computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people born between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
what people have two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( number 2 ) ) )	overnight-socialnetwork
find employees friends who started in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of students not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are friends with employees who quit their job in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
job titles of people that are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
people who are 180 cm tall and are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
name an employee who quit after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of people that stopped school in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what do people study who are 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
who was born after alice started	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
what employees have a start date no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
when did alice leave the job she started in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
birthplace of students whose end date is no greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is total number of univeristies	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ) )	overnight-socialnetwork
which people have at least two birthplaces	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
which student has a start date earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
the gender of a student that starts after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which of alices friends are online right now	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
the gender of an employee that started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the birthplace of an employee who left in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people born on or before the day alice quit her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
which students graduate before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
a student who has studied at the fewest universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of employee whose start ate is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
student whose end date is not 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is friends with alice and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
does alice work at mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employer ) ) )	overnight-socialnetwork
person with the same birthday as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) )	overnight-socialnetwork
find employees that have a start date that is the same as student alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees whom have an end date bigger than the start date for employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find students with a start date no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is now friends with the person who was born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
what student started before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people who have student friends who did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose university is either brown university or ucla	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.concat en.university.brown en.university.ucla ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of student whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees who finish after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people who are currently online and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
find people of the same gender as alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
what employees have the earliest end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
all 180 cm tall people born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
employees who started before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is job title of employee alice whose end date is 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
the relationship status of an employee is one with a start date of atleast 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what gender represents the least number of people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
180 cm tall brown university student	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
what city is the birthplace of a student that is not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who was born on or after alices last day of employment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
the gender of a student who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose end date is birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose start date is not before end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employees have an eend date that is earlier than that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped working in or before 2004 or in or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
relationship status of students whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what date in 2004 is alices last day of work	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
who has two or more relationship statuses at once	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )	overnight-socialnetwork
employee who quit before alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a worker who didnt start in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the people who joined study before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people studying the same thing as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee started after alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birthplace of employees who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what student has an end date that is no greater than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
how many gender options are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )	overnight-socialnetwork
people with two relationship statuses or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )	overnight-socialnetwork
who is not single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )	overnight-socialnetwork
find relationship statuses of students with a start date that is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are friends with students who have a start date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which date alice the software engineer started	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_start_date ) ) )	overnight-socialnetwork
birth city of employees whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people who were born in new york who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find all of alices friends that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )	overnight-socialnetwork
what employee has an end date that is 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who was born on the day alice left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )	overnight-socialnetwork
which student started before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is alices single friend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
who works for the same employer as ailce	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which students graduate after alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what person has a height of 180 to 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) )	overnight-socialnetwork
where were people that started school in any year but 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students who joined after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has had the most different relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( string relationship_status ) ) )	overnight-socialnetwork
student whose start date is not before birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what was alices job when she started in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
birthplace of employees who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find me the people born in any year but 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string ! = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find people born between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
whats the gender of employees who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students starting before alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the relationship status of people with the birth place as newyork	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
find all people born after alice quitted	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )	overnight-socialnetwork
what employees before working before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find people taller than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
birthplace of students whose end date is not in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employees last day was no sooner than alices graduation day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that are shorter than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
180 cm tall persons who quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
what is the relationship status of people that stopped working in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with the person who didnt graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person has a birthdate larger than that of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
employee who quit after student alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are friends with males	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
whats the relationship status of employees who quit after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are male and currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
employee whose end date not after start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who joined before 2004 or in 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that are friends with someone in school studying something other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me all the people who quit during or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what students have a field of study that is the same as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find friends of employees with end date in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student ended earlier than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
180 cm tall person with same birth place as that of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
employees who started no earlier than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find me the emplotee who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the least common gender	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
find employees starting after student alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee whose start date is not before start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what employee has end date equal to employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find gender of persons born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )	overnight-socialnetwork
student whose end date is not after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee has the largest end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
all 180 cm tall people who joined in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find friends of people born is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
students who finish in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice start attending brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )	overnight-socialnetwork
find the gender of everyone currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
what student has a start date after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of student who is not student of brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who started in 2004 and is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find the birth city of all employees who have a start date that is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
relationship statuses of employees who quit their job before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the birth city of people who are friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
employee who started in alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
gender of people who started their study before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
whose hight is at least 180cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
who is single and is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the gender of an employee who does not have mckinsey as an employer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of student who ended in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what people have a height of 180 cm and a birth city of new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
people that started work when alice was born or earlier	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started work after 2004 or after 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who shares end date with employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who joined the institution after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people are 180 cm tall and started school in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
people who joined study in years other than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
a worker who began in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a friend of a student ending in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people who are a friend of a friend of alices	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
what males were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
find employee whose last day at work is before alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what city were the most people born in	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
name the student who the quit the job with alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
person who has male friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )	overnight-socialnetwork
students that will begin to work on the same day alices leaves her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
relationship status of students starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
relationship status of students who joined before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which employee has been employed by the most employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what city is the birthplace of students with an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find people who are friends of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
where were the people that go to a university other than brown born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees who started after alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what date in 2004 did alice stop working	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
whome is alice friends with who also have a birthdate of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
who is friends with the person who started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employee has less than two jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which is the field of study of alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )	overnight-socialnetwork
people joined their study before alice born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that were born after alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
student whose end date is before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that did not stop working in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what city has the least births	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people who were born between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )	overnight-socialnetwork
birthplace of employees who dont study computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which person 180 cm tall is a software engineer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
find all people who were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )	overnight-socialnetwork
people that studied at brown university or ucla	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )	overnight-socialnetwork
find students with last day before or same as alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what genders are the people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
what is the gender of employee who started in year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find relationship status of employee with last day in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with employees before or on 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is friends with someone born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
which employees have a start date between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
birthplace of students who started no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
birthplace of people who did not start their job in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
students who started no earlier than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
student whose start date is before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the people joined work before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who started school the earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find me people that are friends with students leaving before and after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what is the gender of the employee who started in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee who started before end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
employee who is not employed by mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of student whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employees had start dates on 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that started working before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what university does alice study at	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )	overnight-socialnetwork
find employees with last day not in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
students whose end date is later than the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
name a male who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
students who began school in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is alices date of birth	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthdate ) ) )	overnight-socialnetwork
people that started work when alice did or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is height of alice	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )	overnight-socialnetwork
what is the birthplace of employees whose last day was no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employees quit after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
current users who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
person that is studying the most things at school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who was born in over two places	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
people that started school on or after the day alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
in which cities were employees who started working after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
a student ending at the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
give me the genders of the students who graduate in 2004 or sooner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
universities where all 180 cm tall people studied	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
find me students whose end dates are the same as the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who has friends with students that have a start date of 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find all of alices single friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
find employees with last day on or after alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who are friends with students who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees whose last day is the same as alices first day at the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find birthplaces of employees who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the gender of the person whose birthdate is in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
which of alices friends is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
when did alice quit her software engineer job	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) ( string employment_end_date ) ) )	overnight-socialnetwork
a friend of a student not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
is alices field of study computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )	overnight-socialnetwork
what is the gender of people that started working in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student started in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which students left after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
friend of employee whose start date is smaller than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
alices quit date	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
what employee has an end date that is the same as that of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
where were employees who finish on or before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
the relationship status of a worker who didnt leave in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who was born after 2004 that is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what students have been at college for the least amount of time	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people that are 180 cm or 200 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) )	overnight-socialnetwork
people who were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
people who are friends with employees who started working before or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which student started school after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what students have an end date that is either 2004 or 2010 and no greater	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birthplace of employees who started in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the relationship status of a student studying something other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
birthplace of employees who didnt start working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find employees friend with title other than software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employee whose start date is not after the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees who have a start date later than that of the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people that stopped working when alice was born  or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is a software engineer or program manager	( call SW.listValue ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) )	overnight-socialnetwork
what students have a start date earlier than that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which relationship status represents no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people that stopped working after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of students that did not finish school in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find the least common relationship status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
what is the gender of the person alice is friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
who is studying two things or less	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of employees whose end date is less than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
who is shorter than 180cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
an employee with the longest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the last date of employee alice who started in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )	overnight-socialnetwork
what is relationship status of employee whose last day was after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employees started no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people who were born in 2004 and are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )	overnight-socialnetwork
what does alice study at brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )	overnight-socialnetwork
find people that are friends with students who have quit after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which students have the most majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
employee whose end date is not after birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
name a person with whom alice is not friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )	overnight-socialnetwork
find the gender of people with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what person is friends with people that do not work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
people who are shorter than 181 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is alices exact start date in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )	overnight-socialnetwork
find me employees that have worked for no more than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the birthplace of students who graduated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what person has a height of 180 cm and a job title of software engineer	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
what people are logged in who are also friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
relationship status of employee whose employer is not mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
male 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
who stopped going to school after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which employee quit the day alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
people born the same day as or after alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
relationship status of student that left school before or on 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
males born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
who is 180 cm tall and is female	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what is the students gender who ended at least in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who works for mckinsey or google	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find all single people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
who started school most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the gender of students with a start date 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what employees have an end date no later than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with alice and was born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
student whose end date is not before start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people born in new york that are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthplace ) ( string = ) en.city.new_york ) )	overnight-socialnetwork
people born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
who has less than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
all 180 cm tall software engineers	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )	overnight-socialnetwork
what is the relationship status of a student whose end date is earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
what are the students birthplaces who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
which peolpe are exactly 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
who graduated after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the birthdate of the person who is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
employee whose last date was before the day alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is the employee leaving the company after alice leaves	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who was born after 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )	overnight-socialnetwork
which of my friends is at some school other than brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find me males born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
people 180 cm tall who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
find me all people who are older than alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
which employee has an end date of at least 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
who is friends with a student who graduated in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose end date is not after atart date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
which people are friends of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
student whose start date is not after end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is alices end date	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )	overnight-socialnetwork
students finishing on or before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find someone born on or after alices first day of employment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )	overnight-socialnetwork
what employee has an end date that is not in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find employees who have a start date earlier than that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
find the birth city of employees who have an end date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
find people having a relationship with people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
what is alices start date at brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_start_date ) ) )	overnight-socialnetwork
what employees have an end date before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
180 cm tall persons studied in brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
students finishing contemporaneous to or before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
find the friends of students whose end date is later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
ppeople who joined studies after alice joined the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
people born on or before alices birthday	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )	overnight-socialnetwork
what is the job title of alice who started in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
find the relationship statuses of people whom alice is friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
which employee ended no greater than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the gender of no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
employees finishing before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is the relationship status of students who stated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
student whose start date is start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
who is the tallest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )	overnight-socialnetwork
all 180 cm tall females	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
what employees have an end date that is before student alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what cities are the birthplaces of people who have a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )	overnight-socialnetwork
who has over two relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )	overnight-socialnetwork
who is 180 cm and is in the field of computer science	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) )	overnight-socialnetwork
person who is shorter than 180 cm or 200 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )	overnight-socialnetwork
birthplaces of employees starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
what is the birthplace of an employee who does not work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
which employee ended earlier than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what is job title of alice whose employment end date is in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )	overnight-socialnetwork
what city was alice and bob born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )	overnight-socialnetwork
the gender of an employee whos not a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
whose birthdate is on or after alices start date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )	overnight-socialnetwork
people that started working when alice stopped school or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
a student starting after alice ends	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
when did alice finish school	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) )	overnight-socialnetwork
name a city that fewer than two of the people were born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
180 cm tall persons who were born in the same place where alice was born	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
who has friends that are students who have a start date before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
find students with last days on or before alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )	overnight-socialnetwork
what is the average height of a person	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )	overnight-socialnetwork
find me a male born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
what people are friends of students who have a start date no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
employees finishing after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
what cities were people that are currently online born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )	overnight-socialnetwork
what is the gender of employees who dont work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
name a person of the same gender as alice who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )	overnight-socialnetwork
people who were not friends before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )	overnight-socialnetwork
employees who started working on or after the day alice ended school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
connection to someone who will have graduated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who is 180 cm tall and goes to brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )	overnight-socialnetwork
find employees starting after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )	overnight-socialnetwork
which person has a relationship status the same as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) ) )	overnight-socialnetwork
what is the relationship status of students who are not at brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
people whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )	overnight-socialnetwork
who are all of alices guy friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )	overnight-socialnetwork
find the friends of all people who list their relationship status as single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )	overnight-socialnetwork
who is friends with the student who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
who has at least two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )	overnight-socialnetwork
people that are friends with someone that finished school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )	overnight-socialnetwork
